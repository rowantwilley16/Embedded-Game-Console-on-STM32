
EDesign314.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cf4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b0  08005e00  08005e00  00015e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fb0  08005fb0  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08005fb0  08005fb0  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005fb0  08005fb0  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fb0  08005fb0  00015fb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005fb4  08005fb4  00015fb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08005fb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000184  2000005c  08006014  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e0  08006014  000201e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cb72  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001dbf  00000000  00000000  0002cbf7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b60  00000000  00000000  0002e9b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a80  00000000  00000000  0002f518  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001802d  00000000  00000000  0002ff98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a63d  00000000  00000000  00047fc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000898d8  00000000  00000000  00052602  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dbeda  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d20  00000000  00000000  000dbf58  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08005de8 	.word	0x08005de8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08005de8 	.word	0x08005de8

0800014c <start>:
Button ButtonU = {0,0,GPIOC,GPIO_PIN_2}; // up button
//--------------------------------------------------------
void updateButton(Button *btn);


void start(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0

	calibrationSequence();
 8000150:	f000 f9d2 	bl	80004f8 <calibrationSequence>
}
 8000154:	bf00      	nop
 8000156:	bd80      	pop	{r7, pc}

08000158 <mainloop>:

void mainloop(){
 8000158:	b580      	push	{r7, lr}
 800015a:	af00      	add	r7, sp, #0

 	if (flag_1ms){
 800015c:	4b0e      	ldr	r3, [pc, #56]	; (8000198 <mainloop+0x40>)
 800015e:	781b      	ldrb	r3, [r3, #0]
 8000160:	2b00      	cmp	r3, #0
 8000162:	d017      	beq.n	8000194 <mainloop+0x3c>

		updateScreen();
 8000164:	f000 f8dc 	bl	8000320 <updateScreen>
		updateButton(&ButtonM);
 8000168:	480c      	ldr	r0, [pc, #48]	; (800019c <mainloop+0x44>)
 800016a:	f000 f821 	bl	80001b0 <updateButton>
		updateButton(&ButtonL);
 800016e:	480c      	ldr	r0, [pc, #48]	; (80001a0 <mainloop+0x48>)
 8000170:	f000 f81e 	bl	80001b0 <updateButton>
		updateButton(&ButtonR);
 8000174:	480b      	ldr	r0, [pc, #44]	; (80001a4 <mainloop+0x4c>)
 8000176:	f000 f81b 	bl	80001b0 <updateButton>
		updateButton(&ButtonD);
 800017a:	480b      	ldr	r0, [pc, #44]	; (80001a8 <mainloop+0x50>)
 800017c:	f000 f818 	bl	80001b0 <updateButton>
		updateButton(&ButtonU);
 8000180:	480a      	ldr	r0, [pc, #40]	; (80001ac <mainloop+0x54>)
 8000182:	f000 f815 	bl	80001b0 <updateButton>

		selectGame();
 8000186:	f000 f837 	bl	80001f8 <selectGame>
		state();
 800018a:	f000 f871 	bl	8000270 <state>
		flag_1ms = 0;
 800018e:	4b02      	ldr	r3, [pc, #8]	; (8000198 <mainloop+0x40>)
 8000190:	2200      	movs	r2, #0
 8000192:	701a      	strb	r2, [r3, #0]
	}

}
 8000194:	bf00      	nop
 8000196:	bd80      	pop	{r7, pc}
 8000198:	2000008a 	.word	0x2000008a
 800019c:	20000008 	.word	0x20000008
 80001a0:	20000014 	.word	0x20000014
 80001a4:	20000020 	.word	0x20000020
 80001a8:	2000002c 	.word	0x2000002c
 80001ac:	20000038 	.word	0x20000038

080001b0 <updateButton>:
//Button debounce code, reference : Nicol Visser 16986431
//-------------------------------------------------------------
void updateButton(Button *btn)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b082      	sub	sp, #8
 80001b4:	af00      	add	r7, sp, #0
 80001b6:	6078      	str	r0, [r7, #4]
	if (HAL_GPIO_ReadPin(btn->port,btn->pin)== GPIO_PIN_SET)
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	685a      	ldr	r2, [r3, #4]
 80001bc:	687b      	ldr	r3, [r7, #4]
 80001be:	891b      	ldrh	r3, [r3, #8]
 80001c0:	4619      	mov	r1, r3
 80001c2:	4610      	mov	r0, r2
 80001c4:	f003 ff6e 	bl	80040a4 <HAL_GPIO_ReadPin>
 80001c8:	4603      	mov	r3, r0
 80001ca:	2b01      	cmp	r3, #1
 80001cc:	d103      	bne.n	80001d6 <updateButton+0x26>
		btn ->debounce = BUTTON_DEBOUNCE_TIME;
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	2214      	movs	r2, #20
 80001d2:	805a      	strh	r2, [r3, #2]
	{
		btn ->debounce--;
		if (btn->debounce ==0)
			btn ->needsAction=1;
	}
}
 80001d4:	e00c      	b.n	80001f0 <updateButton+0x40>
		btn ->debounce--;
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	885b      	ldrh	r3, [r3, #2]
 80001da:	3b01      	subs	r3, #1
 80001dc:	b29a      	uxth	r2, r3
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	805a      	strh	r2, [r3, #2]
		if (btn->debounce ==0)
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	885b      	ldrh	r3, [r3, #2]
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	d102      	bne.n	80001f0 <updateButton+0x40>
			btn ->needsAction=1;
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	2201      	movs	r2, #1
 80001ee:	701a      	strb	r2, [r3, #0]
}
 80001f0:	bf00      	nop
 80001f2:	3708      	adds	r7, #8
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bd80      	pop	{r7, pc}

080001f8 <selectGame>:
//--------------------------------------------------------------

void selectGame(){
 80001f8:	b480      	push	{r7}
 80001fa:	af00      	add	r7, sp, #0
	if ((!inMazeGameFlag)  && (!inTennisGameFlag)){
 80001fc:	4b16      	ldr	r3, [pc, #88]	; (8000258 <selectGame+0x60>)
 80001fe:	781b      	ldrb	r3, [r3, #0]
 8000200:	2b00      	cmp	r3, #0
 8000202:	d110      	bne.n	8000226 <selectGame+0x2e>
 8000204:	4b15      	ldr	r3, [pc, #84]	; (800025c <selectGame+0x64>)
 8000206:	781b      	ldrb	r3, [r3, #0]
 8000208:	2b00      	cmp	r3, #0
 800020a:	d10c      	bne.n	8000226 <selectGame+0x2e>
	if (ButtonL.needsAction)
 800020c:	4b14      	ldr	r3, [pc, #80]	; (8000260 <selectGame+0x68>)
 800020e:	781b      	ldrb	r3, [r3, #0]
 8000210:	2b00      	cmp	r3, #0
 8000212:	d008      	beq.n	8000226 <selectGame+0x2e>
		{
			inMazeGameFlag=1;
 8000214:	4b10      	ldr	r3, [pc, #64]	; (8000258 <selectGame+0x60>)
 8000216:	2201      	movs	r2, #1
 8000218:	701a      	strb	r2, [r3, #0]
			initilizeMazeGameFlag=1;
 800021a:	4b12      	ldr	r3, [pc, #72]	; (8000264 <selectGame+0x6c>)
 800021c:	2201      	movs	r2, #1
 800021e:	701a      	strb	r2, [r3, #0]
			ButtonL.needsAction = 0;
 8000220:	4b0f      	ldr	r3, [pc, #60]	; (8000260 <selectGame+0x68>)
 8000222:	2200      	movs	r2, #0
 8000224:	701a      	strb	r2, [r3, #0]
		}
	}

	if ( (!inTennisGameFlag) && (!inMazeGameFlag)){
 8000226:	4b0d      	ldr	r3, [pc, #52]	; (800025c <selectGame+0x64>)
 8000228:	781b      	ldrb	r3, [r3, #0]
 800022a:	2b00      	cmp	r3, #0
 800022c:	d110      	bne.n	8000250 <selectGame+0x58>
 800022e:	4b0a      	ldr	r3, [pc, #40]	; (8000258 <selectGame+0x60>)
 8000230:	781b      	ldrb	r3, [r3, #0]
 8000232:	2b00      	cmp	r3, #0
 8000234:	d10c      	bne.n	8000250 <selectGame+0x58>
		if (ButtonM.needsAction){
 8000236:	4b0c      	ldr	r3, [pc, #48]	; (8000268 <selectGame+0x70>)
 8000238:	781b      	ldrb	r3, [r3, #0]
 800023a:	2b00      	cmp	r3, #0
 800023c:	d008      	beq.n	8000250 <selectGame+0x58>
			inTennisGameFlag=1;
 800023e:	4b07      	ldr	r3, [pc, #28]	; (800025c <selectGame+0x64>)
 8000240:	2201      	movs	r2, #1
 8000242:	701a      	strb	r2, [r3, #0]
			initilizeTennisGameFlag=1;
 8000244:	4b09      	ldr	r3, [pc, #36]	; (800026c <selectGame+0x74>)
 8000246:	2201      	movs	r2, #1
 8000248:	701a      	strb	r2, [r3, #0]
			ButtonM.needsAction=0;
 800024a:	4b07      	ldr	r3, [pc, #28]	; (8000268 <selectGame+0x70>)
 800024c:	2200      	movs	r2, #0
 800024e:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000250:	bf00      	nop
 8000252:	46bd      	mov	sp, r7
 8000254:	bc80      	pop	{r7}
 8000256:	4770      	bx	lr
 8000258:	20000089 	.word	0x20000089
 800025c:	200000b2 	.word	0x200000b2
 8000260:	20000014 	.word	0x20000014
 8000264:	20000097 	.word	0x20000097
 8000268:	20000008 	.word	0x20000008
 800026c:	20000098 	.word	0x20000098

08000270 <state>:
void state(){
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0

	//if else in this is VERY IMPORTANT ELSE IT GOES WILL NOT LOOP THE CURRENT GAME, will go back to main menu
	if (inMazeGameFlag){
 8000274:	4b19      	ldr	r3, [pc, #100]	; (80002dc <state+0x6c>)
 8000276:	781b      	ldrb	r3, [r3, #0]
 8000278:	2b00      	cmp	r3, #0
 800027a:	d00c      	beq.n	8000296 <state+0x26>
		if (enterMazeFlag==0){
 800027c:	4b18      	ldr	r3, [pc, #96]	; (80002e0 <state+0x70>)
 800027e:	781b      	ldrb	r3, [r3, #0]
 8000280:	2b00      	cmp	r3, #0
 8000282:	d101      	bne.n	8000288 <state+0x18>
			mazeSelect();
 8000284:	f002 f942 	bl	800250c <mazeSelect>
		}

		if (enterMazeFlag==1){
 8000288:	4b15      	ldr	r3, [pc, #84]	; (80002e0 <state+0x70>)
 800028a:	781b      	ldrb	r3, [r3, #0]
 800028c:	2b01      	cmp	r3, #1
 800028e:	d123      	bne.n	80002d8 <state+0x68>
			mazeGameLoop();
 8000290:	f000 ff1a 	bl	80010c8 <mazeGameLoop>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET); //debug 2
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET); //debug 3
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET); //debug 4
	}

}
 8000294:	e020      	b.n	80002d8 <state+0x68>
	if (inTennisGameFlag){
 8000296:	4b13      	ldr	r3, [pc, #76]	; (80002e4 <state+0x74>)
 8000298:	781b      	ldrb	r3, [r3, #0]
 800029a:	2b00      	cmp	r3, #0
 800029c:	d002      	beq.n	80002a4 <state+0x34>
		tennisGameLoop();
 800029e:	f002 fccb 	bl	8002c38 <tennisGameLoop>
}
 80002a2:	e019      	b.n	80002d8 <state+0x68>
		clearScreen();
 80002a4:	f001 f90c 	bl	80014c0 <clearScreen>
		lightUpCorners();
 80002a8:	f000 f824 	bl	80002f4 <lightUpCorners>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET); //debug 1
 80002ac:	2200      	movs	r2, #0
 80002ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002b2:	480d      	ldr	r0, [pc, #52]	; (80002e8 <state+0x78>)
 80002b4:	f003 ff0d 	bl	80040d2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET); //debug 2
 80002b8:	2200      	movs	r2, #0
 80002ba:	2140      	movs	r1, #64	; 0x40
 80002bc:	480b      	ldr	r0, [pc, #44]	; (80002ec <state+0x7c>)
 80002be:	f003 ff08 	bl	80040d2 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET); //debug 3
 80002c2:	2200      	movs	r2, #0
 80002c4:	2180      	movs	r1, #128	; 0x80
 80002c6:	480a      	ldr	r0, [pc, #40]	; (80002f0 <state+0x80>)
 80002c8:	f003 ff03 	bl	80040d2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET); //debug 4
 80002cc:	2200      	movs	r2, #0
 80002ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002d2:	4806      	ldr	r0, [pc, #24]	; (80002ec <state+0x7c>)
 80002d4:	f003 fefd 	bl	80040d2 <HAL_GPIO_WritePin>
}
 80002d8:	bf00      	nop
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	20000089 	.word	0x20000089
 80002e0:	200000b4 	.word	0x200000b4
 80002e4:	200000b2 	.word	0x200000b2
 80002e8:	40010c00 	.word	0x40010c00
 80002ec:	40010800 	.word	0x40010800
 80002f0:	40011000 	.word	0x40011000

080002f4 <lightUpCorners>:
	clearScreen();
	lightUpCorners();

}

void lightUpCorners(){
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0

	arrRow[0]=1;
 80002f8:	4b07      	ldr	r3, [pc, #28]	; (8000318 <lightUpCorners+0x24>)
 80002fa:	2201      	movs	r2, #1
 80002fc:	701a      	strb	r2, [r3, #0]
	arrRow[7]=1;
 80002fe:	4b06      	ldr	r3, [pc, #24]	; (8000318 <lightUpCorners+0x24>)
 8000300:	2201      	movs	r2, #1
 8000302:	71da      	strb	r2, [r3, #7]
	arrCol[0]=1;
 8000304:	4b05      	ldr	r3, [pc, #20]	; (800031c <lightUpCorners+0x28>)
 8000306:	2201      	movs	r2, #1
 8000308:	701a      	strb	r2, [r3, #0]
	arrCol[7]=1;
 800030a:	4b04      	ldr	r3, [pc, #16]	; (800031c <lightUpCorners+0x28>)
 800030c:	2201      	movs	r2, #1
 800030e:	71da      	strb	r2, [r3, #7]
	updateScreen();
 8000310:	f000 f806 	bl	8000320 <updateScreen>
}
 8000314:	bf00      	nop
 8000316:	bd80      	pop	{r7, pc}
 8000318:	20000078 	.word	0x20000078
 800031c:	20000080 	.word	0x20000080

08000320 <updateScreen>:
void updateScreen(){
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0

	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, arrRow[0]); 	//row1
 8000324:	4b3e      	ldr	r3, [pc, #248]	; (8000420 <updateScreen+0x100>)
 8000326:	781b      	ldrb	r3, [r3, #0]
 8000328:	461a      	mov	r2, r3
 800032a:	2120      	movs	r1, #32
 800032c:	483d      	ldr	r0, [pc, #244]	; (8000424 <updateScreen+0x104>)
 800032e:	f003 fed0 	bl	80040d2 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, arrRow[1]);	//row2
 8000332:	4b3b      	ldr	r3, [pc, #236]	; (8000420 <updateScreen+0x100>)
 8000334:	785b      	ldrb	r3, [r3, #1]
 8000336:	461a      	mov	r2, r3
 8000338:	2120      	movs	r1, #32
 800033a:	483b      	ldr	r0, [pc, #236]	; (8000428 <updateScreen+0x108>)
 800033c:	f003 fec9 	bl	80040d2 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, arrRow[2]); 	//row3
 8000340:	4b37      	ldr	r3, [pc, #220]	; (8000420 <updateScreen+0x100>)
 8000342:	789b      	ldrb	r3, [r3, #2]
 8000344:	461a      	mov	r2, r3
 8000346:	2140      	movs	r1, #64	; 0x40
 8000348:	4837      	ldr	r0, [pc, #220]	; (8000428 <updateScreen+0x108>)
 800034a:	f003 fec2 	bl	80040d2 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, arrRow[3]); 	//row4
 800034e:	4b34      	ldr	r3, [pc, #208]	; (8000420 <updateScreen+0x100>)
 8000350:	78db      	ldrb	r3, [r3, #3]
 8000352:	461a      	mov	r2, r3
 8000354:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000358:	4833      	ldr	r0, [pc, #204]	; (8000428 <updateScreen+0x108>)
 800035a:	f003 feba 	bl	80040d2 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12,arrRow[4]);	//row5
 800035e:	4b30      	ldr	r3, [pc, #192]	; (8000420 <updateScreen+0x100>)
 8000360:	791b      	ldrb	r3, [r3, #4]
 8000362:	461a      	mov	r2, r3
 8000364:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000368:	4830      	ldr	r0, [pc, #192]	; (800042c <updateScreen+0x10c>)
 800036a:	f003 feb2 	bl	80040d2 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,arrRow[5]); 	//row6
 800036e:	4b2c      	ldr	r3, [pc, #176]	; (8000420 <updateScreen+0x100>)
 8000370:	795b      	ldrb	r3, [r3, #5]
 8000372:	461a      	mov	r2, r3
 8000374:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000378:	482a      	ldr	r0, [pc, #168]	; (8000424 <updateScreen+0x104>)
 800037a:	f003 feaa 	bl	80040d2 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11,arrRow[6]);	//row7
 800037e:	4b28      	ldr	r3, [pc, #160]	; (8000420 <updateScreen+0x100>)
 8000380:	799b      	ldrb	r3, [r3, #6]
 8000382:	461a      	mov	r2, r3
 8000384:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000388:	4826      	ldr	r0, [pc, #152]	; (8000424 <updateScreen+0x104>)
 800038a:	f003 fea2 	bl	80040d2 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, arrRow[7]); 	//row8
 800038e:	4b24      	ldr	r3, [pc, #144]	; (8000420 <updateScreen+0x100>)
 8000390:	79db      	ldrb	r3, [r3, #7]
 8000392:	461a      	mov	r2, r3
 8000394:	2104      	movs	r1, #4
 8000396:	4823      	ldr	r0, [pc, #140]	; (8000424 <updateScreen+0x104>)
 8000398:	f003 fe9b 	bl	80040d2 <HAL_GPIO_WritePin>

	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, arrCol[0]);	//col1
 800039c:	4b24      	ldr	r3, [pc, #144]	; (8000430 <updateScreen+0x110>)
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	461a      	mov	r2, r3
 80003a2:	2102      	movs	r1, #2
 80003a4:	481f      	ldr	r0, [pc, #124]	; (8000424 <updateScreen+0x104>)
 80003a6:	f003 fe94 	bl	80040d2 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15,arrCol[1]);	//col2
 80003aa:	4b21      	ldr	r3, [pc, #132]	; (8000430 <updateScreen+0x110>)
 80003ac:	785b      	ldrb	r3, [r3, #1]
 80003ae:	461a      	mov	r2, r3
 80003b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003b4:	481b      	ldr	r0, [pc, #108]	; (8000424 <updateScreen+0x104>)
 80003b6:	f003 fe8c 	bl	80040d2 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14,arrCol[2]);	//col3
 80003ba:	4b1d      	ldr	r3, [pc, #116]	; (8000430 <updateScreen+0x110>)
 80003bc:	789b      	ldrb	r3, [r3, #2]
 80003be:	461a      	mov	r2, r3
 80003c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003c4:	4817      	ldr	r0, [pc, #92]	; (8000424 <updateScreen+0x104>)
 80003c6:	f003 fe84 	bl	80040d2 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,arrCol[3]); 	//col4
 80003ca:	4b19      	ldr	r3, [pc, #100]	; (8000430 <updateScreen+0x110>)
 80003cc:	78db      	ldrb	r3, [r3, #3]
 80003ce:	461a      	mov	r2, r3
 80003d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003d4:	4813      	ldr	r0, [pc, #76]	; (8000424 <updateScreen+0x104>)
 80003d6:	f003 fe7c 	bl	80040d2 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, arrCol[4]); 	//col5
 80003da:	4b15      	ldr	r3, [pc, #84]	; (8000430 <updateScreen+0x110>)
 80003dc:	791b      	ldrb	r3, [r3, #4]
 80003de:	461a      	mov	r2, r3
 80003e0:	2110      	movs	r1, #16
 80003e2:	4810      	ldr	r0, [pc, #64]	; (8000424 <updateScreen+0x104>)
 80003e4:	f003 fe75 	bl	80040d2 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10,arrCol[5]); 	//col6
 80003e8:	4b11      	ldr	r3, [pc, #68]	; (8000430 <updateScreen+0x110>)
 80003ea:	795b      	ldrb	r3, [r3, #5]
 80003ec:	461a      	mov	r2, r3
 80003ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003f2:	480c      	ldr	r0, [pc, #48]	; (8000424 <updateScreen+0x104>)
 80003f4:	f003 fe6d 	bl	80040d2 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10,arrCol[6]); 	//col7
 80003f8:	4b0d      	ldr	r3, [pc, #52]	; (8000430 <updateScreen+0x110>)
 80003fa:	799b      	ldrb	r3, [r3, #6]
 80003fc:	461a      	mov	r2, r3
 80003fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000402:	480a      	ldr	r0, [pc, #40]	; (800042c <updateScreen+0x10c>)
 8000404:	f003 fe65 	bl	80040d2 <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, arrCol[7]); 	//col8
 8000408:	4b09      	ldr	r3, [pc, #36]	; (8000430 <updateScreen+0x110>)
 800040a:	79db      	ldrb	r3, [r3, #7]
 800040c:	461a      	mov	r2, r3
 800040e:	2108      	movs	r1, #8
 8000410:	4804      	ldr	r0, [pc, #16]	; (8000424 <updateScreen+0x104>)
 8000412:	f003 fe5e 	bl	80040d2 <HAL_GPIO_WritePin>

	 //reset the flag
	 screenUpdateFlag = 0;
 8000416:	4b07      	ldr	r3, [pc, #28]	; (8000434 <updateScreen+0x114>)
 8000418:	2200      	movs	r2, #0
 800041a:	701a      	strb	r2, [r3, #0]

}
 800041c:	bf00      	nop
 800041e:	bd80      	pop	{r7, pc}
 8000420:	20000078 	.word	0x20000078
 8000424:	40010c00 	.word	0x40010c00
 8000428:	40011000 	.word	0x40011000
 800042c:	40010800 	.word	0x40010800
 8000430:	20000080 	.word	0x20000080
 8000434:	20000088 	.word	0x20000088

08000438 <HAL_SYSTICK_Callback>:
void HAL_SYSTICK_Callback(void)
{
 8000438:	b480      	push	{r7}
 800043a:	af00      	add	r7, sp, #0
	flag_1ms = 1 ;
 800043c:	4b24      	ldr	r3, [pc, #144]	; (80004d0 <HAL_SYSTICK_Callback+0x98>)
 800043e:	2201      	movs	r2, #1
 8000440:	701a      	strb	r2, [r3, #0]


	flag_8ms ++;
 8000442:	4b24      	ldr	r3, [pc, #144]	; (80004d4 <HAL_SYSTICK_Callback+0x9c>)
 8000444:	781b      	ldrb	r3, [r3, #0]
 8000446:	3301      	adds	r3, #1
 8000448:	b2da      	uxtb	r2, r3
 800044a:	4b22      	ldr	r3, [pc, #136]	; (80004d4 <HAL_SYSTICK_Callback+0x9c>)
 800044c:	701a      	strb	r2, [r3, #0]
	counter_100ms ++;
 800044e:	4b22      	ldr	r3, [pc, #136]	; (80004d8 <HAL_SYSTICK_Callback+0xa0>)
 8000450:	781b      	ldrb	r3, [r3, #0]
 8000452:	3301      	adds	r3, #1
 8000454:	b2da      	uxtb	r2, r3
 8000456:	4b20      	ldr	r3, [pc, #128]	; (80004d8 <HAL_SYSTICK_Callback+0xa0>)
 8000458:	701a      	strb	r2, [r3, #0]
	counter_300ms ++;
 800045a:	4b20      	ldr	r3, [pc, #128]	; (80004dc <HAL_SYSTICK_Callback+0xa4>)
 800045c:	881b      	ldrh	r3, [r3, #0]
 800045e:	3301      	adds	r3, #1
 8000460:	b29a      	uxth	r2, r3
 8000462:	4b1e      	ldr	r3, [pc, #120]	; (80004dc <HAL_SYSTICK_Callback+0xa4>)
 8000464:	801a      	strh	r2, [r3, #0]
    counter_BallUpdate ++;
 8000466:	4b1e      	ldr	r3, [pc, #120]	; (80004e0 <HAL_SYSTICK_Callback+0xa8>)
 8000468:	881b      	ldrh	r3, [r3, #0]
 800046a:	3301      	adds	r3, #1
 800046c:	b29a      	uxth	r2, r3
 800046e:	4b1c      	ldr	r3, [pc, #112]	; (80004e0 <HAL_SYSTICK_Callback+0xa8>)
 8000470:	801a      	strh	r2, [r3, #0]
    counterTennisUART ++;
 8000472:	4b1c      	ldr	r3, [pc, #112]	; (80004e4 <HAL_SYSTICK_Callback+0xac>)
 8000474:	881b      	ldrh	r3, [r3, #0]
 8000476:	3301      	adds	r3, #1
 8000478:	b29a      	uxth	r2, r3
 800047a:	4b1a      	ldr	r3, [pc, #104]	; (80004e4 <HAL_SYSTICK_Callback+0xac>)
 800047c:	801a      	strh	r2, [r3, #0]

	if (flag_8ms == 8){
 800047e:	4b15      	ldr	r3, [pc, #84]	; (80004d4 <HAL_SYSTICK_Callback+0x9c>)
 8000480:	781b      	ldrb	r3, [r3, #0]
 8000482:	2b08      	cmp	r3, #8
 8000484:	d102      	bne.n	800048c <HAL_SYSTICK_Callback+0x54>
		flag_8ms = 0;
 8000486:	4b13      	ldr	r3, [pc, #76]	; (80004d4 <HAL_SYSTICK_Callback+0x9c>)
 8000488:	2200      	movs	r2, #0
 800048a:	701a      	strb	r2, [r3, #0]
	}
	if (counter_100ms==100){
 800048c:	4b12      	ldr	r3, [pc, #72]	; (80004d8 <HAL_SYSTICK_Callback+0xa0>)
 800048e:	781b      	ldrb	r3, [r3, #0]
 8000490:	2b64      	cmp	r3, #100	; 0x64
 8000492:	d105      	bne.n	80004a0 <HAL_SYSTICK_Callback+0x68>
		flag_100ms = 1;
 8000494:	4b14      	ldr	r3, [pc, #80]	; (80004e8 <HAL_SYSTICK_Callback+0xb0>)
 8000496:	2201      	movs	r2, #1
 8000498:	701a      	strb	r2, [r3, #0]
		counter_100ms=0;
 800049a:	4b0f      	ldr	r3, [pc, #60]	; (80004d8 <HAL_SYSTICK_Callback+0xa0>)
 800049c:	2200      	movs	r2, #0
 800049e:	701a      	strb	r2, [r3, #0]
	}
	if (counter_300ms == 300){
 80004a0:	4b0e      	ldr	r3, [pc, #56]	; (80004dc <HAL_SYSTICK_Callback+0xa4>)
 80004a2:	881b      	ldrh	r3, [r3, #0]
 80004a4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80004a8:	d105      	bne.n	80004b6 <HAL_SYSTICK_Callback+0x7e>
		flag_300ms = 1;
 80004aa:	4b10      	ldr	r3, [pc, #64]	; (80004ec <HAL_SYSTICK_Callback+0xb4>)
 80004ac:	2201      	movs	r2, #1
 80004ae:	701a      	strb	r2, [r3, #0]
		counter_300ms =0;
 80004b0:	4b0a      	ldr	r3, [pc, #40]	; (80004dc <HAL_SYSTICK_Callback+0xa4>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	801a      	strh	r2, [r3, #0]
	}
	if (counter_BallUpdate == ballUpdateTime){
 80004b6:	4b0a      	ldr	r3, [pc, #40]	; (80004e0 <HAL_SYSTICK_Callback+0xa8>)
 80004b8:	881a      	ldrh	r2, [r3, #0]
 80004ba:	4b0d      	ldr	r3, [pc, #52]	; (80004f0 <HAL_SYSTICK_Callback+0xb8>)
 80004bc:	881b      	ldrh	r3, [r3, #0]
 80004be:	429a      	cmp	r2, r3
 80004c0:	d102      	bne.n	80004c8 <HAL_SYSTICK_Callback+0x90>
		flag_BallUpdate = 1;
 80004c2:	4b0c      	ldr	r3, [pc, #48]	; (80004f4 <HAL_SYSTICK_Callback+0xbc>)
 80004c4:	2201      	movs	r2, #1
 80004c6:	701a      	strb	r2, [r3, #0]

	if (UARTCount == 100){
		sendCoordinatesUART();
		UARTCount = 0;
	}*/
}
 80004c8:	bf00      	nop
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bc80      	pop	{r7}
 80004ce:	4770      	bx	lr
 80004d0:	2000008a 	.word	0x2000008a
 80004d4:	2000008b 	.word	0x2000008b
 80004d8:	20000090 	.word	0x20000090
 80004dc:	20000092 	.word	0x20000092
 80004e0:	20000094 	.word	0x20000094
 80004e4:	2000008e 	.word	0x2000008e
 80004e8:	2000008c 	.word	0x2000008c
 80004ec:	2000008d 	.word	0x2000008d
 80004f0:	20000000 	.word	0x20000000
 80004f4:	20000096 	.word	0x20000096

080004f8 <calibrationSequence>:
		HAL_UART_Transmit(&huart2,positionMsg,10,100);

	}
}*/

void calibrationSequence(){
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b09c      	sub	sp, #112	; 0x70
 80004fc:	af00      	add	r7, sp, #0

		//UART Student Number
		uint8_t StudentNumber[] = "$23105577\n"; // Data to Transmit through uART
 80004fe:	4ad4      	ldr	r2, [pc, #848]	; (8000850 <calibrationSequence+0x358>)
 8000500:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000504:	ca07      	ldmia	r2, {r0, r1, r2}
 8000506:	c303      	stmia	r3!, {r0, r1}
 8000508:	801a      	strh	r2, [r3, #0]
 800050a:	3302      	adds	r3, #2
 800050c:	0c12      	lsrs	r2, r2, #16
 800050e:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart2,StudentNumber,10,100);
 8000510:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8000514:	2364      	movs	r3, #100	; 0x64
 8000516:	220a      	movs	r2, #10
 8000518:	48ce      	ldr	r0, [pc, #824]	; (8000854 <calibrationSequence+0x35c>)
 800051a:	f005 face 	bl	8005aba <HAL_UART_Transmit>

	  //calibration Sequence

	  uint8_t message1[] = "$10______\n";
 800051e:	4ace      	ldr	r2, [pc, #824]	; (8000858 <calibrationSequence+0x360>)
 8000520:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000524:	ca07      	ldmia	r2, {r0, r1, r2}
 8000526:	c303      	stmia	r3!, {r0, r1}
 8000528:	801a      	strh	r2, [r3, #0]
 800052a:	3302      	adds	r3, #2
 800052c:	0c12      	lsrs	r2, r2, #16
 800052e:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Transmit(&huart2,message1,10,100);
 8000530:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8000534:	2364      	movs	r3, #100	; 0x64
 8000536:	220a      	movs	r2, #10
 8000538:	48c6      	ldr	r0, [pc, #792]	; (8000854 <calibrationSequence+0x35c>)
 800053a:	f005 fabe 	bl	8005aba <HAL_UART_Transmit>

	  //light up col 1
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET); //col 1 GPIO
 800053e:	2201      	movs	r2, #1
 8000540:	2102      	movs	r1, #2
 8000542:	48c6      	ldr	r0, [pc, #792]	; (800085c <calibrationSequence+0x364>)
 8000544:	f003 fdc5 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET); //R1
 8000548:	2201      	movs	r2, #1
 800054a:	2120      	movs	r1, #32
 800054c:	48c3      	ldr	r0, [pc, #780]	; (800085c <calibrationSequence+0x364>)
 800054e:	f003 fdc0 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET); //R2
 8000552:	2201      	movs	r2, #1
 8000554:	2120      	movs	r1, #32
 8000556:	48c2      	ldr	r0, [pc, #776]	; (8000860 <calibrationSequence+0x368>)
 8000558:	f003 fdbb 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET); //etc
 800055c:	2201      	movs	r2, #1
 800055e:	2140      	movs	r1, #64	; 0x40
 8000560:	48bf      	ldr	r0, [pc, #764]	; (8000860 <calibrationSequence+0x368>)
 8000562:	f003 fdb6 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8000566:	2201      	movs	r2, #1
 8000568:	f44f 7180 	mov.w	r1, #256	; 0x100
 800056c:	48bc      	ldr	r0, [pc, #752]	; (8000860 <calibrationSequence+0x368>)
 800056e:	f003 fdb0 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8000572:	2201      	movs	r2, #1
 8000574:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000578:	48ba      	ldr	r0, [pc, #744]	; (8000864 <calibrationSequence+0x36c>)
 800057a:	f003 fdaa 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 800057e:	2201      	movs	r2, #1
 8000580:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000584:	48b5      	ldr	r0, [pc, #724]	; (800085c <calibrationSequence+0x364>)
 8000586:	f003 fda4 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 800058a:	2201      	movs	r2, #1
 800058c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000590:	48b2      	ldr	r0, [pc, #712]	; (800085c <calibrationSequence+0x364>)
 8000592:	f003 fd9e 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8000596:	2201      	movs	r2, #1
 8000598:	2104      	movs	r1, #4
 800059a:	48b0      	ldr	r0, [pc, #704]	; (800085c <calibrationSequence+0x364>)
 800059c:	f003 fd99 	bl	80040d2 <HAL_GPIO_WritePin>

	  HAL_Delay(1000); // 1 second delay
 80005a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005a4:	f003 f914 	bl	80037d0 <HAL_Delay>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80005a8:	2200      	movs	r2, #0
 80005aa:	2102      	movs	r1, #2
 80005ac:	48ab      	ldr	r0, [pc, #684]	; (800085c <calibrationSequence+0x364>)
 80005ae:	f003 fd90 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80005b2:	2200      	movs	r2, #0
 80005b4:	2120      	movs	r1, #32
 80005b6:	48a9      	ldr	r0, [pc, #676]	; (800085c <calibrationSequence+0x364>)
 80005b8:	f003 fd8b 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 80005bc:	2200      	movs	r2, #0
 80005be:	2120      	movs	r1, #32
 80005c0:	48a7      	ldr	r0, [pc, #668]	; (8000860 <calibrationSequence+0x368>)
 80005c2:	f003 fd86 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 80005c6:	2200      	movs	r2, #0
 80005c8:	2140      	movs	r1, #64	; 0x40
 80005ca:	48a5      	ldr	r0, [pc, #660]	; (8000860 <calibrationSequence+0x368>)
 80005cc:	f003 fd81 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80005d0:	2200      	movs	r2, #0
 80005d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005d6:	48a2      	ldr	r0, [pc, #648]	; (8000860 <calibrationSequence+0x368>)
 80005d8:	f003 fd7b 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80005dc:	2200      	movs	r2, #0
 80005de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005e2:	48a0      	ldr	r0, [pc, #640]	; (8000864 <calibrationSequence+0x36c>)
 80005e4:	f003 fd75 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80005e8:	2200      	movs	r2, #0
 80005ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005ee:	489b      	ldr	r0, [pc, #620]	; (800085c <calibrationSequence+0x364>)
 80005f0:	f003 fd6f 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 80005f4:	2200      	movs	r2, #0
 80005f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005fa:	4898      	ldr	r0, [pc, #608]	; (800085c <calibrationSequence+0x364>)
 80005fc:	f003 fd69 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000600:	2200      	movs	r2, #0
 8000602:	2104      	movs	r1, #4
 8000604:	4895      	ldr	r0, [pc, #596]	; (800085c <calibrationSequence+0x364>)
 8000606:	f003 fd64 	bl	80040d2 <HAL_GPIO_WritePin>


	  //light up col 2

	  uint8_t message2[] = "$11______\n";
 800060a:	4a97      	ldr	r2, [pc, #604]	; (8000868 <calibrationSequence+0x370>)
 800060c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000610:	ca07      	ldmia	r2, {r0, r1, r2}
 8000612:	c303      	stmia	r3!, {r0, r1}
 8000614:	801a      	strh	r2, [r3, #0]
 8000616:	3302      	adds	r3, #2
 8000618:	0c12      	lsrs	r2, r2, #16
 800061a:	701a      	strb	r2, [r3, #0]
	   HAL_UART_Transmit(&huart2,message2,10,100);
 800061c:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8000620:	2364      	movs	r3, #100	; 0x64
 8000622:	220a      	movs	r2, #10
 8000624:	488b      	ldr	r0, [pc, #556]	; (8000854 <calibrationSequence+0x35c>)
 8000626:	f005 fa48 	bl	8005aba <HAL_UART_Transmit>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET); //col 2 GPIO
 800062a:	2201      	movs	r2, #1
 800062c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000630:	488a      	ldr	r0, [pc, #552]	; (800085c <calibrationSequence+0x364>)
 8000632:	f003 fd4e 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET); //R1
 8000636:	2201      	movs	r2, #1
 8000638:	2120      	movs	r1, #32
 800063a:	4888      	ldr	r0, [pc, #544]	; (800085c <calibrationSequence+0x364>)
 800063c:	f003 fd49 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET); //R2
 8000640:	2201      	movs	r2, #1
 8000642:	2120      	movs	r1, #32
 8000644:	4886      	ldr	r0, [pc, #536]	; (8000860 <calibrationSequence+0x368>)
 8000646:	f003 fd44 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET); //etc
 800064a:	2201      	movs	r2, #1
 800064c:	2140      	movs	r1, #64	; 0x40
 800064e:	4884      	ldr	r0, [pc, #528]	; (8000860 <calibrationSequence+0x368>)
 8000650:	f003 fd3f 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8000654:	2201      	movs	r2, #1
 8000656:	f44f 7180 	mov.w	r1, #256	; 0x100
 800065a:	4881      	ldr	r0, [pc, #516]	; (8000860 <calibrationSequence+0x368>)
 800065c:	f003 fd39 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8000660:	2201      	movs	r2, #1
 8000662:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000666:	487f      	ldr	r0, [pc, #508]	; (8000864 <calibrationSequence+0x36c>)
 8000668:	f003 fd33 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 800066c:	2201      	movs	r2, #1
 800066e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000672:	487a      	ldr	r0, [pc, #488]	; (800085c <calibrationSequence+0x364>)
 8000674:	f003 fd2d 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8000678:	2201      	movs	r2, #1
 800067a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800067e:	4877      	ldr	r0, [pc, #476]	; (800085c <calibrationSequence+0x364>)
 8000680:	f003 fd27 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8000684:	2201      	movs	r2, #1
 8000686:	2104      	movs	r1, #4
 8000688:	4874      	ldr	r0, [pc, #464]	; (800085c <calibrationSequence+0x364>)
 800068a:	f003 fd22 	bl	80040d2 <HAL_GPIO_WritePin>

	  HAL_Delay(1000); // 1 second delay
 800068e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000692:	f003 f89d 	bl	80037d0 <HAL_Delay>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000696:	2200      	movs	r2, #0
 8000698:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800069c:	486f      	ldr	r0, [pc, #444]	; (800085c <calibrationSequence+0x364>)
 800069e:	f003 fd18 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80006a2:	2200      	movs	r2, #0
 80006a4:	2120      	movs	r1, #32
 80006a6:	486d      	ldr	r0, [pc, #436]	; (800085c <calibrationSequence+0x364>)
 80006a8:	f003 fd13 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 80006ac:	2200      	movs	r2, #0
 80006ae:	2120      	movs	r1, #32
 80006b0:	486b      	ldr	r0, [pc, #428]	; (8000860 <calibrationSequence+0x368>)
 80006b2:	f003 fd0e 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2140      	movs	r1, #64	; 0x40
 80006ba:	4869      	ldr	r0, [pc, #420]	; (8000860 <calibrationSequence+0x368>)
 80006bc:	f003 fd09 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80006c0:	2200      	movs	r2, #0
 80006c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006c6:	4866      	ldr	r0, [pc, #408]	; (8000860 <calibrationSequence+0x368>)
 80006c8:	f003 fd03 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80006cc:	2200      	movs	r2, #0
 80006ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006d2:	4864      	ldr	r0, [pc, #400]	; (8000864 <calibrationSequence+0x36c>)
 80006d4:	f003 fcfd 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80006d8:	2200      	movs	r2, #0
 80006da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006de:	485f      	ldr	r0, [pc, #380]	; (800085c <calibrationSequence+0x364>)
 80006e0:	f003 fcf7 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 80006e4:	2200      	movs	r2, #0
 80006e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006ea:	485c      	ldr	r0, [pc, #368]	; (800085c <calibrationSequence+0x364>)
 80006ec:	f003 fcf1 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80006f0:	2200      	movs	r2, #0
 80006f2:	2104      	movs	r1, #4
 80006f4:	4859      	ldr	r0, [pc, #356]	; (800085c <calibrationSequence+0x364>)
 80006f6:	f003 fcec 	bl	80040d2 <HAL_GPIO_WritePin>



	  //light up col 3

	  uint8_t message3[] = "$12______\n";
 80006fa:	4a5c      	ldr	r2, [pc, #368]	; (800086c <calibrationSequence+0x374>)
 80006fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000700:	ca07      	ldmia	r2, {r0, r1, r2}
 8000702:	c303      	stmia	r3!, {r0, r1}
 8000704:	801a      	strh	r2, [r3, #0]
 8000706:	3302      	adds	r3, #2
 8000708:	0c12      	lsrs	r2, r2, #16
 800070a:	701a      	strb	r2, [r3, #0]
	     HAL_UART_Transmit(&huart2,message3,10,100);
 800070c:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000710:	2364      	movs	r3, #100	; 0x64
 8000712:	220a      	movs	r2, #10
 8000714:	484f      	ldr	r0, [pc, #316]	; (8000854 <calibrationSequence+0x35c>)
 8000716:	f005 f9d0 	bl	8005aba <HAL_UART_Transmit>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); //col 3 GPIO
 800071a:	2201      	movs	r2, #1
 800071c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000720:	484e      	ldr	r0, [pc, #312]	; (800085c <calibrationSequence+0x364>)
 8000722:	f003 fcd6 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET); //R1
 8000726:	2201      	movs	r2, #1
 8000728:	2120      	movs	r1, #32
 800072a:	484c      	ldr	r0, [pc, #304]	; (800085c <calibrationSequence+0x364>)
 800072c:	f003 fcd1 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET); //R2
 8000730:	2201      	movs	r2, #1
 8000732:	2120      	movs	r1, #32
 8000734:	484a      	ldr	r0, [pc, #296]	; (8000860 <calibrationSequence+0x368>)
 8000736:	f003 fccc 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET); //etc
 800073a:	2201      	movs	r2, #1
 800073c:	2140      	movs	r1, #64	; 0x40
 800073e:	4848      	ldr	r0, [pc, #288]	; (8000860 <calibrationSequence+0x368>)
 8000740:	f003 fcc7 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8000744:	2201      	movs	r2, #1
 8000746:	f44f 7180 	mov.w	r1, #256	; 0x100
 800074a:	4845      	ldr	r0, [pc, #276]	; (8000860 <calibrationSequence+0x368>)
 800074c:	f003 fcc1 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8000750:	2201      	movs	r2, #1
 8000752:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000756:	4843      	ldr	r0, [pc, #268]	; (8000864 <calibrationSequence+0x36c>)
 8000758:	f003 fcbb 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 800075c:	2201      	movs	r2, #1
 800075e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000762:	483e      	ldr	r0, [pc, #248]	; (800085c <calibrationSequence+0x364>)
 8000764:	f003 fcb5 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8000768:	2201      	movs	r2, #1
 800076a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800076e:	483b      	ldr	r0, [pc, #236]	; (800085c <calibrationSequence+0x364>)
 8000770:	f003 fcaf 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8000774:	2201      	movs	r2, #1
 8000776:	2104      	movs	r1, #4
 8000778:	4838      	ldr	r0, [pc, #224]	; (800085c <calibrationSequence+0x364>)
 800077a:	f003 fcaa 	bl	80040d2 <HAL_GPIO_WritePin>

	  HAL_Delay(1000); // 1 second delay
 800077e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000782:	f003 f825 	bl	80037d0 <HAL_Delay>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000786:	2200      	movs	r2, #0
 8000788:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800078c:	4833      	ldr	r0, [pc, #204]	; (800085c <calibrationSequence+0x364>)
 800078e:	f003 fca0 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000792:	2200      	movs	r2, #0
 8000794:	2120      	movs	r1, #32
 8000796:	4831      	ldr	r0, [pc, #196]	; (800085c <calibrationSequence+0x364>)
 8000798:	f003 fc9b 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 800079c:	2200      	movs	r2, #0
 800079e:	2120      	movs	r1, #32
 80007a0:	482f      	ldr	r0, [pc, #188]	; (8000860 <calibrationSequence+0x368>)
 80007a2:	f003 fc96 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2140      	movs	r1, #64	; 0x40
 80007aa:	482d      	ldr	r0, [pc, #180]	; (8000860 <calibrationSequence+0x368>)
 80007ac:	f003 fc91 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80007b0:	2200      	movs	r2, #0
 80007b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007b6:	482a      	ldr	r0, [pc, #168]	; (8000860 <calibrationSequence+0x368>)
 80007b8:	f003 fc8b 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80007bc:	2200      	movs	r2, #0
 80007be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007c2:	4828      	ldr	r0, [pc, #160]	; (8000864 <calibrationSequence+0x36c>)
 80007c4:	f003 fc85 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80007c8:	2200      	movs	r2, #0
 80007ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007ce:	4823      	ldr	r0, [pc, #140]	; (800085c <calibrationSequence+0x364>)
 80007d0:	f003 fc7f 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 80007d4:	2200      	movs	r2, #0
 80007d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007da:	4820      	ldr	r0, [pc, #128]	; (800085c <calibrationSequence+0x364>)
 80007dc:	f003 fc79 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80007e0:	2200      	movs	r2, #0
 80007e2:	2104      	movs	r1, #4
 80007e4:	481d      	ldr	r0, [pc, #116]	; (800085c <calibrationSequence+0x364>)
 80007e6:	f003 fc74 	bl	80040d2 <HAL_GPIO_WritePin>



	  //light up col 4

	  uint8_t message4[] = "$13______\n";
 80007ea:	4a21      	ldr	r2, [pc, #132]	; (8000870 <calibrationSequence+0x378>)
 80007ec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80007f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80007f2:	c303      	stmia	r3!, {r0, r1}
 80007f4:	801a      	strh	r2, [r3, #0]
 80007f6:	3302      	adds	r3, #2
 80007f8:	0c12      	lsrs	r2, r2, #16
 80007fa:	701a      	strb	r2, [r3, #0]
	     HAL_UART_Transmit(&huart2,message4,10,100);
 80007fc:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000800:	2364      	movs	r3, #100	; 0x64
 8000802:	220a      	movs	r2, #10
 8000804:	4813      	ldr	r0, [pc, #76]	; (8000854 <calibrationSequence+0x35c>)
 8000806:	f005 f958 	bl	8005aba <HAL_UART_Transmit>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,GPIO_PIN_SET); //col 4 GPIO
 800080a:	2201      	movs	r2, #1
 800080c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000810:	4812      	ldr	r0, [pc, #72]	; (800085c <calibrationSequence+0x364>)
 8000812:	f003 fc5e 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET); //R1
 8000816:	2201      	movs	r2, #1
 8000818:	2120      	movs	r1, #32
 800081a:	4810      	ldr	r0, [pc, #64]	; (800085c <calibrationSequence+0x364>)
 800081c:	f003 fc59 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET); //R2
 8000820:	2201      	movs	r2, #1
 8000822:	2120      	movs	r1, #32
 8000824:	480e      	ldr	r0, [pc, #56]	; (8000860 <calibrationSequence+0x368>)
 8000826:	f003 fc54 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET); //etc
 800082a:	2201      	movs	r2, #1
 800082c:	2140      	movs	r1, #64	; 0x40
 800082e:	480c      	ldr	r0, [pc, #48]	; (8000860 <calibrationSequence+0x368>)
 8000830:	f003 fc4f 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8000834:	2201      	movs	r2, #1
 8000836:	f44f 7180 	mov.w	r1, #256	; 0x100
 800083a:	4809      	ldr	r0, [pc, #36]	; (8000860 <calibrationSequence+0x368>)
 800083c:	f003 fc49 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8000840:	2201      	movs	r2, #1
 8000842:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000846:	4807      	ldr	r0, [pc, #28]	; (8000864 <calibrationSequence+0x36c>)
 8000848:	f003 fc43 	bl	80040d2 <HAL_GPIO_WritePin>
 800084c:	e012      	b.n	8000874 <calibrationSequence+0x37c>
 800084e:	bf00      	nop
 8000850:	08005e00 	.word	0x08005e00
 8000854:	20000144 	.word	0x20000144
 8000858:	08005e0c 	.word	0x08005e0c
 800085c:	40010c00 	.word	0x40010c00
 8000860:	40011000 	.word	0x40011000
 8000864:	40010800 	.word	0x40010800
 8000868:	08005e18 	.word	0x08005e18
 800086c:	08005e24 	.word	0x08005e24
 8000870:	08005e30 	.word	0x08005e30
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000874:	2201      	movs	r2, #1
 8000876:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800087a:	48d5      	ldr	r0, [pc, #852]	; (8000bd0 <calibrationSequence+0x6d8>)
 800087c:	f003 fc29 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8000880:	2201      	movs	r2, #1
 8000882:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000886:	48d2      	ldr	r0, [pc, #840]	; (8000bd0 <calibrationSequence+0x6d8>)
 8000888:	f003 fc23 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 800088c:	2201      	movs	r2, #1
 800088e:	2104      	movs	r1, #4
 8000890:	48cf      	ldr	r0, [pc, #828]	; (8000bd0 <calibrationSequence+0x6d8>)
 8000892:	f003 fc1e 	bl	80040d2 <HAL_GPIO_WritePin>

	  HAL_Delay(1000); // 1 second delay
 8000896:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800089a:	f002 ff99 	bl	80037d0 <HAL_Delay>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,GPIO_PIN_RESET);
 800089e:	2200      	movs	r2, #0
 80008a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008a4:	48ca      	ldr	r0, [pc, #808]	; (8000bd0 <calibrationSequence+0x6d8>)
 80008a6:	f003 fc14 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80008aa:	2200      	movs	r2, #0
 80008ac:	2120      	movs	r1, #32
 80008ae:	48c8      	ldr	r0, [pc, #800]	; (8000bd0 <calibrationSequence+0x6d8>)
 80008b0:	f003 fc0f 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 80008b4:	2200      	movs	r2, #0
 80008b6:	2120      	movs	r1, #32
 80008b8:	48c6      	ldr	r0, [pc, #792]	; (8000bd4 <calibrationSequence+0x6dc>)
 80008ba:	f003 fc0a 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 80008be:	2200      	movs	r2, #0
 80008c0:	2140      	movs	r1, #64	; 0x40
 80008c2:	48c4      	ldr	r0, [pc, #784]	; (8000bd4 <calibrationSequence+0x6dc>)
 80008c4:	f003 fc05 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80008c8:	2200      	movs	r2, #0
 80008ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008ce:	48c1      	ldr	r0, [pc, #772]	; (8000bd4 <calibrationSequence+0x6dc>)
 80008d0:	f003 fbff 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80008d4:	2200      	movs	r2, #0
 80008d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008da:	48bf      	ldr	r0, [pc, #764]	; (8000bd8 <calibrationSequence+0x6e0>)
 80008dc:	f003 fbf9 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80008e0:	2200      	movs	r2, #0
 80008e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008e6:	48ba      	ldr	r0, [pc, #744]	; (8000bd0 <calibrationSequence+0x6d8>)
 80008e8:	f003 fbf3 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 80008ec:	2200      	movs	r2, #0
 80008ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008f2:	48b7      	ldr	r0, [pc, #732]	; (8000bd0 <calibrationSequence+0x6d8>)
 80008f4:	f003 fbed 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80008f8:	2200      	movs	r2, #0
 80008fa:	2104      	movs	r1, #4
 80008fc:	48b4      	ldr	r0, [pc, #720]	; (8000bd0 <calibrationSequence+0x6d8>)
 80008fe:	f003 fbe8 	bl	80040d2 <HAL_GPIO_WritePin>



	  //light up col 5

	  uint8_t message5[] = "$14______\n";
 8000902:	4ab6      	ldr	r2, [pc, #728]	; (8000bdc <calibrationSequence+0x6e4>)
 8000904:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000908:	ca07      	ldmia	r2, {r0, r1, r2}
 800090a:	c303      	stmia	r3!, {r0, r1}
 800090c:	801a      	strh	r2, [r3, #0]
 800090e:	3302      	adds	r3, #2
 8000910:	0c12      	lsrs	r2, r2, #16
 8000912:	701a      	strb	r2, [r3, #0]
	     HAL_UART_Transmit(&huart2,message5,10,100);
 8000914:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000918:	2364      	movs	r3, #100	; 0x64
 800091a:	220a      	movs	r2, #10
 800091c:	48b0      	ldr	r0, [pc, #704]	; (8000be0 <calibrationSequence+0x6e8>)
 800091e:	f005 f8cc 	bl	8005aba <HAL_UART_Transmit>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET); //col 5 GPIO
 8000922:	2201      	movs	r2, #1
 8000924:	2110      	movs	r1, #16
 8000926:	48aa      	ldr	r0, [pc, #680]	; (8000bd0 <calibrationSequence+0x6d8>)
 8000928:	f003 fbd3 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET); //R1
 800092c:	2201      	movs	r2, #1
 800092e:	2120      	movs	r1, #32
 8000930:	48a7      	ldr	r0, [pc, #668]	; (8000bd0 <calibrationSequence+0x6d8>)
 8000932:	f003 fbce 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET); //R2
 8000936:	2201      	movs	r2, #1
 8000938:	2120      	movs	r1, #32
 800093a:	48a6      	ldr	r0, [pc, #664]	; (8000bd4 <calibrationSequence+0x6dc>)
 800093c:	f003 fbc9 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET); //etc
 8000940:	2201      	movs	r2, #1
 8000942:	2140      	movs	r1, #64	; 0x40
 8000944:	48a3      	ldr	r0, [pc, #652]	; (8000bd4 <calibrationSequence+0x6dc>)
 8000946:	f003 fbc4 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800094a:	2201      	movs	r2, #1
 800094c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000950:	48a0      	ldr	r0, [pc, #640]	; (8000bd4 <calibrationSequence+0x6dc>)
 8000952:	f003 fbbe 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8000956:	2201      	movs	r2, #1
 8000958:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800095c:	489e      	ldr	r0, [pc, #632]	; (8000bd8 <calibrationSequence+0x6e0>)
 800095e:	f003 fbb8 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000962:	2201      	movs	r2, #1
 8000964:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000968:	4899      	ldr	r0, [pc, #612]	; (8000bd0 <calibrationSequence+0x6d8>)
 800096a:	f003 fbb2 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 800096e:	2201      	movs	r2, #1
 8000970:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000974:	4896      	ldr	r0, [pc, #600]	; (8000bd0 <calibrationSequence+0x6d8>)
 8000976:	f003 fbac 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 800097a:	2201      	movs	r2, #1
 800097c:	2104      	movs	r1, #4
 800097e:	4894      	ldr	r0, [pc, #592]	; (8000bd0 <calibrationSequence+0x6d8>)
 8000980:	f003 fba7 	bl	80040d2 <HAL_GPIO_WritePin>

	  HAL_Delay(1000); // 1 second delay
 8000984:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000988:	f002 ff22 	bl	80037d0 <HAL_Delay>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800098c:	2200      	movs	r2, #0
 800098e:	2110      	movs	r1, #16
 8000990:	488f      	ldr	r0, [pc, #572]	; (8000bd0 <calibrationSequence+0x6d8>)
 8000992:	f003 fb9e 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000996:	2200      	movs	r2, #0
 8000998:	2120      	movs	r1, #32
 800099a:	488d      	ldr	r0, [pc, #564]	; (8000bd0 <calibrationSequence+0x6d8>)
 800099c:	f003 fb99 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 80009a0:	2200      	movs	r2, #0
 80009a2:	2120      	movs	r1, #32
 80009a4:	488b      	ldr	r0, [pc, #556]	; (8000bd4 <calibrationSequence+0x6dc>)
 80009a6:	f003 fb94 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 80009aa:	2200      	movs	r2, #0
 80009ac:	2140      	movs	r1, #64	; 0x40
 80009ae:	4889      	ldr	r0, [pc, #548]	; (8000bd4 <calibrationSequence+0x6dc>)
 80009b0:	f003 fb8f 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80009b4:	2200      	movs	r2, #0
 80009b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009ba:	4886      	ldr	r0, [pc, #536]	; (8000bd4 <calibrationSequence+0x6dc>)
 80009bc:	f003 fb89 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80009c0:	2200      	movs	r2, #0
 80009c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009c6:	4884      	ldr	r0, [pc, #528]	; (8000bd8 <calibrationSequence+0x6e0>)
 80009c8:	f003 fb83 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80009cc:	2200      	movs	r2, #0
 80009ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009d2:	487f      	ldr	r0, [pc, #508]	; (8000bd0 <calibrationSequence+0x6d8>)
 80009d4:	f003 fb7d 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 80009d8:	2200      	movs	r2, #0
 80009da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009de:	487c      	ldr	r0, [pc, #496]	; (8000bd0 <calibrationSequence+0x6d8>)
 80009e0:	f003 fb77 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80009e4:	2200      	movs	r2, #0
 80009e6:	2104      	movs	r1, #4
 80009e8:	4879      	ldr	r0, [pc, #484]	; (8000bd0 <calibrationSequence+0x6d8>)
 80009ea:	f003 fb72 	bl	80040d2 <HAL_GPIO_WritePin>



	  //light up col 6

	  uint8_t message6[] = "$15______\n";
 80009ee:	4a7d      	ldr	r2, [pc, #500]	; (8000be4 <calibrationSequence+0x6ec>)
 80009f0:	f107 031c 	add.w	r3, r7, #28
 80009f4:	ca07      	ldmia	r2, {r0, r1, r2}
 80009f6:	c303      	stmia	r3!, {r0, r1}
 80009f8:	801a      	strh	r2, [r3, #0]
 80009fa:	3302      	adds	r3, #2
 80009fc:	0c12      	lsrs	r2, r2, #16
 80009fe:	701a      	strb	r2, [r3, #0]
	     HAL_UART_Transmit(&huart2,message6,10,100);
 8000a00:	f107 011c 	add.w	r1, r7, #28
 8000a04:	2364      	movs	r3, #100	; 0x64
 8000a06:	220a      	movs	r2, #10
 8000a08:	4875      	ldr	r0, [pc, #468]	; (8000be0 <calibrationSequence+0x6e8>)
 8000a0a:	f005 f856 	bl	8005aba <HAL_UART_Transmit>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET); //col 6 GPIO
 8000a0e:	2201      	movs	r2, #1
 8000a10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a14:	486e      	ldr	r0, [pc, #440]	; (8000bd0 <calibrationSequence+0x6d8>)
 8000a16:	f003 fb5c 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET); //R1
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	2120      	movs	r1, #32
 8000a1e:	486c      	ldr	r0, [pc, #432]	; (8000bd0 <calibrationSequence+0x6d8>)
 8000a20:	f003 fb57 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET); //R2
 8000a24:	2201      	movs	r2, #1
 8000a26:	2120      	movs	r1, #32
 8000a28:	486a      	ldr	r0, [pc, #424]	; (8000bd4 <calibrationSequence+0x6dc>)
 8000a2a:	f003 fb52 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET); //etc
 8000a2e:	2201      	movs	r2, #1
 8000a30:	2140      	movs	r1, #64	; 0x40
 8000a32:	4868      	ldr	r0, [pc, #416]	; (8000bd4 <calibrationSequence+0x6dc>)
 8000a34:	f003 fb4d 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8000a38:	2201      	movs	r2, #1
 8000a3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a3e:	4865      	ldr	r0, [pc, #404]	; (8000bd4 <calibrationSequence+0x6dc>)
 8000a40:	f003 fb47 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8000a44:	2201      	movs	r2, #1
 8000a46:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a4a:	4863      	ldr	r0, [pc, #396]	; (8000bd8 <calibrationSequence+0x6e0>)
 8000a4c:	f003 fb41 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000a50:	2201      	movs	r2, #1
 8000a52:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a56:	485e      	ldr	r0, [pc, #376]	; (8000bd0 <calibrationSequence+0x6d8>)
 8000a58:	f003 fb3b 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a62:	485b      	ldr	r0, [pc, #364]	; (8000bd0 <calibrationSequence+0x6d8>)
 8000a64:	f003 fb35 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8000a68:	2201      	movs	r2, #1
 8000a6a:	2104      	movs	r1, #4
 8000a6c:	4858      	ldr	r0, [pc, #352]	; (8000bd0 <calibrationSequence+0x6d8>)
 8000a6e:	f003 fb30 	bl	80040d2 <HAL_GPIO_WritePin>

	  HAL_Delay(1000); // 1 second delay
 8000a72:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a76:	f002 feab 	bl	80037d0 <HAL_Delay>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a80:	4853      	ldr	r0, [pc, #332]	; (8000bd0 <calibrationSequence+0x6d8>)
 8000a82:	f003 fb26 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000a86:	2200      	movs	r2, #0
 8000a88:	2120      	movs	r1, #32
 8000a8a:	4851      	ldr	r0, [pc, #324]	; (8000bd0 <calibrationSequence+0x6d8>)
 8000a8c:	f003 fb21 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8000a90:	2200      	movs	r2, #0
 8000a92:	2120      	movs	r1, #32
 8000a94:	484f      	ldr	r0, [pc, #316]	; (8000bd4 <calibrationSequence+0x6dc>)
 8000a96:	f003 fb1c 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2140      	movs	r1, #64	; 0x40
 8000a9e:	484d      	ldr	r0, [pc, #308]	; (8000bd4 <calibrationSequence+0x6dc>)
 8000aa0:	f003 fb17 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aaa:	484a      	ldr	r0, [pc, #296]	; (8000bd4 <calibrationSequence+0x6dc>)
 8000aac:	f003 fb11 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ab6:	4848      	ldr	r0, [pc, #288]	; (8000bd8 <calibrationSequence+0x6e0>)
 8000ab8:	f003 fb0b 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000abc:	2200      	movs	r2, #0
 8000abe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ac2:	4843      	ldr	r0, [pc, #268]	; (8000bd0 <calibrationSequence+0x6d8>)
 8000ac4:	f003 fb05 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ace:	4840      	ldr	r0, [pc, #256]	; (8000bd0 <calibrationSequence+0x6d8>)
 8000ad0:	f003 faff 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	2104      	movs	r1, #4
 8000ad8:	483d      	ldr	r0, [pc, #244]	; (8000bd0 <calibrationSequence+0x6d8>)
 8000ada:	f003 fafa 	bl	80040d2 <HAL_GPIO_WritePin>


	  //light up col 7

	  uint8_t message7[] = "$16______\n";
 8000ade:	4a42      	ldr	r2, [pc, #264]	; (8000be8 <calibrationSequence+0x6f0>)
 8000ae0:	f107 0310 	add.w	r3, r7, #16
 8000ae4:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ae6:	c303      	stmia	r3!, {r0, r1}
 8000ae8:	801a      	strh	r2, [r3, #0]
 8000aea:	3302      	adds	r3, #2
 8000aec:	0c12      	lsrs	r2, r2, #16
 8000aee:	701a      	strb	r2, [r3, #0]
	     HAL_UART_Transmit(&huart2,message7,10,100);
 8000af0:	f107 0110 	add.w	r1, r7, #16
 8000af4:	2364      	movs	r3, #100	; 0x64
 8000af6:	220a      	movs	r2, #10
 8000af8:	4839      	ldr	r0, [pc, #228]	; (8000be0 <calibrationSequence+0x6e8>)
 8000afa:	f004 ffde 	bl	8005aba <HAL_UART_Transmit>

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET); //col 7 GPIO
 8000afe:	2201      	movs	r2, #1
 8000b00:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b04:	4834      	ldr	r0, [pc, #208]	; (8000bd8 <calibrationSequence+0x6e0>)
 8000b06:	f003 fae4 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET); //R1
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	2120      	movs	r1, #32
 8000b0e:	4830      	ldr	r0, [pc, #192]	; (8000bd0 <calibrationSequence+0x6d8>)
 8000b10:	f003 fadf 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET); //R2
 8000b14:	2201      	movs	r2, #1
 8000b16:	2120      	movs	r1, #32
 8000b18:	482e      	ldr	r0, [pc, #184]	; (8000bd4 <calibrationSequence+0x6dc>)
 8000b1a:	f003 fada 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET); //etc
 8000b1e:	2201      	movs	r2, #1
 8000b20:	2140      	movs	r1, #64	; 0x40
 8000b22:	482c      	ldr	r0, [pc, #176]	; (8000bd4 <calibrationSequence+0x6dc>)
 8000b24:	f003 fad5 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8000b28:	2201      	movs	r2, #1
 8000b2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b2e:	4829      	ldr	r0, [pc, #164]	; (8000bd4 <calibrationSequence+0x6dc>)
 8000b30:	f003 facf 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8000b34:	2201      	movs	r2, #1
 8000b36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b3a:	4827      	ldr	r0, [pc, #156]	; (8000bd8 <calibrationSequence+0x6e0>)
 8000b3c:	f003 fac9 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000b40:	2201      	movs	r2, #1
 8000b42:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b46:	4822      	ldr	r0, [pc, #136]	; (8000bd0 <calibrationSequence+0x6d8>)
 8000b48:	f003 fac3 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b52:	481f      	ldr	r0, [pc, #124]	; (8000bd0 <calibrationSequence+0x6d8>)
 8000b54:	f003 fabd 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8000b58:	2201      	movs	r2, #1
 8000b5a:	2104      	movs	r1, #4
 8000b5c:	481c      	ldr	r0, [pc, #112]	; (8000bd0 <calibrationSequence+0x6d8>)
 8000b5e:	f003 fab8 	bl	80040d2 <HAL_GPIO_WritePin>

	  HAL_Delay(1000); // 1 second delay
 8000b62:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b66:	f002 fe33 	bl	80037d0 <HAL_Delay>

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b70:	4819      	ldr	r0, [pc, #100]	; (8000bd8 <calibrationSequence+0x6e0>)
 8000b72:	f003 faae 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000b76:	2200      	movs	r2, #0
 8000b78:	2120      	movs	r1, #32
 8000b7a:	4815      	ldr	r0, [pc, #84]	; (8000bd0 <calibrationSequence+0x6d8>)
 8000b7c:	f003 faa9 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8000b80:	2200      	movs	r2, #0
 8000b82:	2120      	movs	r1, #32
 8000b84:	4813      	ldr	r0, [pc, #76]	; (8000bd4 <calibrationSequence+0x6dc>)
 8000b86:	f003 faa4 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	2140      	movs	r1, #64	; 0x40
 8000b8e:	4811      	ldr	r0, [pc, #68]	; (8000bd4 <calibrationSequence+0x6dc>)
 8000b90:	f003 fa9f 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8000b94:	2200      	movs	r2, #0
 8000b96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b9a:	480e      	ldr	r0, [pc, #56]	; (8000bd4 <calibrationSequence+0x6dc>)
 8000b9c:	f003 fa99 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ba6:	480c      	ldr	r0, [pc, #48]	; (8000bd8 <calibrationSequence+0x6e0>)
 8000ba8:	f003 fa93 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000bac:	2200      	movs	r2, #0
 8000bae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bb2:	4807      	ldr	r0, [pc, #28]	; (8000bd0 <calibrationSequence+0x6d8>)
 8000bb4:	f003 fa8d 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bbe:	4804      	ldr	r0, [pc, #16]	; (8000bd0 <calibrationSequence+0x6d8>)
 8000bc0:	f003 fa87 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	2104      	movs	r1, #4
 8000bc8:	4801      	ldr	r0, [pc, #4]	; (8000bd0 <calibrationSequence+0x6d8>)
 8000bca:	f003 fa82 	bl	80040d2 <HAL_GPIO_WritePin>
 8000bce:	e00d      	b.n	8000bec <calibrationSequence+0x6f4>
 8000bd0:	40010c00 	.word	0x40010c00
 8000bd4:	40011000 	.word	0x40011000
 8000bd8:	40010800 	.word	0x40010800
 8000bdc:	08005e3c 	.word	0x08005e3c
 8000be0:	20000144 	.word	0x20000144
 8000be4:	08005e48 	.word	0x08005e48
 8000be8:	08005e54 	.word	0x08005e54



	  //light up col 8
	  uint8_t message8[] = "$17______\n";
 8000bec:	4a51      	ldr	r2, [pc, #324]	; (8000d34 <calibrationSequence+0x83c>)
 8000bee:	1d3b      	adds	r3, r7, #4
 8000bf0:	ca07      	ldmia	r2, {r0, r1, r2}
 8000bf2:	c303      	stmia	r3!, {r0, r1}
 8000bf4:	801a      	strh	r2, [r3, #0]
 8000bf6:	3302      	adds	r3, #2
 8000bf8:	0c12      	lsrs	r2, r2, #16
 8000bfa:	701a      	strb	r2, [r3, #0]
	     HAL_UART_Transmit(&huart2,message8,10,100);
 8000bfc:	1d39      	adds	r1, r7, #4
 8000bfe:	2364      	movs	r3, #100	; 0x64
 8000c00:	220a      	movs	r2, #10
 8000c02:	484d      	ldr	r0, [pc, #308]	; (8000d38 <calibrationSequence+0x840>)
 8000c04:	f004 ff59 	bl	8005aba <HAL_UART_Transmit>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET); //col 8 GPIO
 8000c08:	2201      	movs	r2, #1
 8000c0a:	2108      	movs	r1, #8
 8000c0c:	484b      	ldr	r0, [pc, #300]	; (8000d3c <calibrationSequence+0x844>)
 8000c0e:	f003 fa60 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET); //R1
 8000c12:	2201      	movs	r2, #1
 8000c14:	2120      	movs	r1, #32
 8000c16:	4849      	ldr	r0, [pc, #292]	; (8000d3c <calibrationSequence+0x844>)
 8000c18:	f003 fa5b 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET); //R2
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	2120      	movs	r1, #32
 8000c20:	4847      	ldr	r0, [pc, #284]	; (8000d40 <calibrationSequence+0x848>)
 8000c22:	f003 fa56 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET); //etc
 8000c26:	2201      	movs	r2, #1
 8000c28:	2140      	movs	r1, #64	; 0x40
 8000c2a:	4845      	ldr	r0, [pc, #276]	; (8000d40 <calibrationSequence+0x848>)
 8000c2c:	f003 fa51 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8000c30:	2201      	movs	r2, #1
 8000c32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c36:	4842      	ldr	r0, [pc, #264]	; (8000d40 <calibrationSequence+0x848>)
 8000c38:	f003 fa4b 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c42:	4840      	ldr	r0, [pc, #256]	; (8000d44 <calibrationSequence+0x84c>)
 8000c44:	f003 fa45 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8000c48:	2201      	movs	r2, #1
 8000c4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c4e:	483b      	ldr	r0, [pc, #236]	; (8000d3c <calibrationSequence+0x844>)
 8000c50:	f003 fa3f 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8000c54:	2201      	movs	r2, #1
 8000c56:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c5a:	4838      	ldr	r0, [pc, #224]	; (8000d3c <calibrationSequence+0x844>)
 8000c5c:	f003 fa39 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8000c60:	2201      	movs	r2, #1
 8000c62:	2104      	movs	r1, #4
 8000c64:	4835      	ldr	r0, [pc, #212]	; (8000d3c <calibrationSequence+0x844>)
 8000c66:	f003 fa34 	bl	80040d2 <HAL_GPIO_WritePin>

	  HAL_Delay(1000); // 1 second delay
 8000c6a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c6e:	f002 fdaf 	bl	80037d0 <HAL_Delay>

	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2108      	movs	r1, #8
 8000c76:	4831      	ldr	r0, [pc, #196]	; (8000d3c <calibrationSequence+0x844>)
 8000c78:	f003 fa2b 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	2120      	movs	r1, #32
 8000c80:	482e      	ldr	r0, [pc, #184]	; (8000d3c <calibrationSequence+0x844>)
 8000c82:	f003 fa26 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8000c86:	2200      	movs	r2, #0
 8000c88:	2120      	movs	r1, #32
 8000c8a:	482d      	ldr	r0, [pc, #180]	; (8000d40 <calibrationSequence+0x848>)
 8000c8c:	f003 fa21 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8000c90:	2200      	movs	r2, #0
 8000c92:	2140      	movs	r1, #64	; 0x40
 8000c94:	482a      	ldr	r0, [pc, #168]	; (8000d40 <calibrationSequence+0x848>)
 8000c96:	f003 fa1c 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ca0:	4827      	ldr	r0, [pc, #156]	; (8000d40 <calibrationSequence+0x848>)
 8000ca2:	f003 fa16 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cac:	4825      	ldr	r0, [pc, #148]	; (8000d44 <calibrationSequence+0x84c>)
 8000cae:	f003 fa10 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cb8:	4820      	ldr	r0, [pc, #128]	; (8000d3c <calibrationSequence+0x844>)
 8000cba:	f003 fa0a 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cc4:	481d      	ldr	r0, [pc, #116]	; (8000d3c <calibrationSequence+0x844>)
 8000cc6:	f003 fa04 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2104      	movs	r1, #4
 8000cce:	481b      	ldr	r0, [pc, #108]	; (8000d3c <calibrationSequence+0x844>)
 8000cd0:	f003 f9ff 	bl	80040d2 <HAL_GPIO_WritePin>


	  //Light up all 4 Corners

	  //top left
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	2120      	movs	r1, #32
 8000cd8:	4818      	ldr	r0, [pc, #96]	; (8000d3c <calibrationSequence+0x844>)
 8000cda:	f003 f9fa 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8000cde:	2201      	movs	r2, #1
 8000ce0:	2102      	movs	r1, #2
 8000ce2:	4816      	ldr	r0, [pc, #88]	; (8000d3c <calibrationSequence+0x844>)
 8000ce4:	f003 f9f5 	bl	80040d2 <HAL_GPIO_WritePin>

	  //bottom left
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8000ce8:	2201      	movs	r2, #1
 8000cea:	2104      	movs	r1, #4
 8000cec:	4813      	ldr	r0, [pc, #76]	; (8000d3c <calibrationSequence+0x844>)
 8000cee:	f003 f9f0 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	2102      	movs	r1, #2
 8000cf6:	4811      	ldr	r0, [pc, #68]	; (8000d3c <calibrationSequence+0x844>)
 8000cf8:	f003 f9eb 	bl	80040d2 <HAL_GPIO_WritePin>

	  //top right
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	2120      	movs	r1, #32
 8000d00:	480e      	ldr	r0, [pc, #56]	; (8000d3c <calibrationSequence+0x844>)
 8000d02:	f003 f9e6 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8000d06:	2201      	movs	r2, #1
 8000d08:	2108      	movs	r1, #8
 8000d0a:	480c      	ldr	r0, [pc, #48]	; (8000d3c <calibrationSequence+0x844>)
 8000d0c:	f003 f9e1 	bl	80040d2 <HAL_GPIO_WritePin>

	  //bottom right
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8000d10:	2201      	movs	r2, #1
 8000d12:	2104      	movs	r1, #4
 8000d14:	4809      	ldr	r0, [pc, #36]	; (8000d3c <calibrationSequence+0x844>)
 8000d16:	f003 f9dc 	bl	80040d2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	2108      	movs	r1, #8
 8000d1e:	4807      	ldr	r0, [pc, #28]	; (8000d3c <calibrationSequence+0x844>)
 8000d20:	f003 f9d7 	bl	80040d2 <HAL_GPIO_WritePin>

	  HAL_Delay(1000); // 1 second delay
 8000d24:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d28:	f002 fd52 	bl	80037d0 <HAL_Delay>

}
 8000d2c:	bf00      	nop
 8000d2e:	3770      	adds	r7, #112	; 0x70
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	08005e60 	.word	0x08005e60
 8000d38:	20000144 	.word	0x20000144
 8000d3c:	40010c00 	.word	0x40010c00
 8000d40:	40011000 	.word	0x40011000
 8000d44:	40010800 	.word	0x40010800

08000d48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d4e:	f002 fcdd 	bl	800370c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d52:	f000 f82f 	bl	8000db4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d56:	f000 f913 	bl	8000f80 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d5a:	f000 f8e7 	bl	8000f2c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000d5e:	f000 f879 	bl	8000e54 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000d62:	f000 f8b5 	bl	8000ed0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  i2c_transferData[0] = ControlRegister1;
 8000d66:	4b0d      	ldr	r3, [pc, #52]	; (8000d9c <main+0x54>)
 8000d68:	781a      	ldrb	r2, [r3, #0]
 8000d6a:	4b0d      	ldr	r3, [pc, #52]	; (8000da0 <main+0x58>)
 8000d6c:	701a      	strb	r2, [r3, #0]
  i2c_transferData[1] = ControlRegister1Data;
 8000d6e:	4b0d      	ldr	r3, [pc, #52]	; (8000da4 <main+0x5c>)
 8000d70:	781a      	ldrb	r2, [r3, #0]
 8000d72:	4b0b      	ldr	r3, [pc, #44]	; (8000da0 <main+0x58>)
 8000d74:	705a      	strb	r2, [r3, #1]

  accRes = HAL_I2C_Master_Transmit(&hi2c1,i2cAddress,i2c_transferData, 2, 10);
 8000d76:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <main+0x60>)
 8000d78:	8819      	ldrh	r1, [r3, #0]
 8000d7a:	230a      	movs	r3, #10
 8000d7c:	9300      	str	r3, [sp, #0]
 8000d7e:	2302      	movs	r3, #2
 8000d80:	4a07      	ldr	r2, [pc, #28]	; (8000da0 <main+0x58>)
 8000d82:	480a      	ldr	r0, [pc, #40]	; (8000dac <main+0x64>)
 8000d84:	f003 faf6 	bl	8004374 <HAL_I2C_Master_Transmit>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <main+0x68>)
 8000d8e:	701a      	strb	r2, [r3, #0]

 start();
 8000d90:	f7ff f9dc 	bl	800014c <start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  mainloop();
 8000d94:	f7ff f9e0 	bl	8000158 <mainloop>
 8000d98:	e7fc      	b.n	8000d94 <main+0x4c>
 8000d9a:	bf00      	nop
 8000d9c:	20000004 	.word	0x20000004
 8000da0:	2000009c 	.word	0x2000009c
 8000da4:	20000005 	.word	0x20000005
 8000da8:	20000002 	.word	0x20000002
 8000dac:	200000c0 	.word	0x200000c0
 8000db0:	200000bc 	.word	0x200000bc

08000db4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b094      	sub	sp, #80	; 0x50
 8000db8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dbe:	2228      	movs	r2, #40	; 0x28
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f005 f808 	bl	8005dd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dc8:	f107 0314 	add.w	r3, r7, #20
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
 8000dd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dd8:	1d3b      	adds	r3, r7, #4
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	605a      	str	r2, [r3, #4]
 8000de0:	609a      	str	r2, [r3, #8]
 8000de2:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000de4:	2302      	movs	r3, #2
 8000de6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000de8:	2301      	movs	r3, #1
 8000dea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dec:	2310      	movs	r3, #16
 8000dee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000df0:	2300      	movs	r3, #0
 8000df2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000df4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f004 f93f 	bl	800507c <HAL_RCC_OscConfig>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000e04:	f000 f95a 	bl	80010bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e08:	230f      	movs	r3, #15
 8000e0a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e10:	2300      	movs	r3, #0
 8000e12:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e14:	2300      	movs	r3, #0
 8000e16:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e1c:	f107 0314 	add.w	r3, r7, #20
 8000e20:	2100      	movs	r1, #0
 8000e22:	4618      	mov	r0, r3
 8000e24:	f004 fbaa 	bl	800557c <HAL_RCC_ClockConfig>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000e2e:	f000 f945 	bl	80010bc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000e32:	2302      	movs	r3, #2
 8000e34:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000e36:	2300      	movs	r3, #0
 8000e38:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e3a:	1d3b      	adds	r3, r7, #4
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f004 fd39 	bl	80058b4 <HAL_RCCEx_PeriphCLKConfig>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000e48:	f000 f938 	bl	80010bc <Error_Handler>
  }
}
 8000e4c:	bf00      	nop
 8000e4e:	3750      	adds	r7, #80	; 0x50
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e5a:	1d3b      	adds	r3, r7, #4
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000e64:	4b18      	ldr	r3, [pc, #96]	; (8000ec8 <MX_ADC1_Init+0x74>)
 8000e66:	4a19      	ldr	r2, [pc, #100]	; (8000ecc <MX_ADC1_Init+0x78>)
 8000e68:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e6a:	4b17      	ldr	r3, [pc, #92]	; (8000ec8 <MX_ADC1_Init+0x74>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e70:	4b15      	ldr	r3, [pc, #84]	; (8000ec8 <MX_ADC1_Init+0x74>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e76:	4b14      	ldr	r3, [pc, #80]	; (8000ec8 <MX_ADC1_Init+0x74>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e7c:	4b12      	ldr	r3, [pc, #72]	; (8000ec8 <MX_ADC1_Init+0x74>)
 8000e7e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000e82:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e84:	4b10      	ldr	r3, [pc, #64]	; (8000ec8 <MX_ADC1_Init+0x74>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000e8a:	4b0f      	ldr	r3, [pc, #60]	; (8000ec8 <MX_ADC1_Init+0x74>)
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e90:	480d      	ldr	r0, [pc, #52]	; (8000ec8 <MX_ADC1_Init+0x74>)
 8000e92:	f002 fcbf 	bl	8003814 <HAL_ADC_Init>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000e9c:	f000 f90e 	bl	80010bc <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000ea0:	230b      	movs	r3, #11
 8000ea2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eac:	1d3b      	adds	r3, r7, #4
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4805      	ldr	r0, [pc, #20]	; (8000ec8 <MX_ADC1_Init+0x74>)
 8000eb2:	f002 fd87 	bl	80039c4 <HAL_ADC_ConfigChannel>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000ebc:	f000 f8fe 	bl	80010bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ec0:	bf00      	nop
 8000ec2:	3710      	adds	r7, #16
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	20000114 	.word	0x20000114
 8000ecc:	40012400 	.word	0x40012400

08000ed0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ed4:	4b12      	ldr	r3, [pc, #72]	; (8000f20 <MX_I2C1_Init+0x50>)
 8000ed6:	4a13      	ldr	r2, [pc, #76]	; (8000f24 <MX_I2C1_Init+0x54>)
 8000ed8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000eda:	4b11      	ldr	r3, [pc, #68]	; (8000f20 <MX_I2C1_Init+0x50>)
 8000edc:	4a12      	ldr	r2, [pc, #72]	; (8000f28 <MX_I2C1_Init+0x58>)
 8000ede:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ee0:	4b0f      	ldr	r3, [pc, #60]	; (8000f20 <MX_I2C1_Init+0x50>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ee6:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <MX_I2C1_Init+0x50>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000eec:	4b0c      	ldr	r3, [pc, #48]	; (8000f20 <MX_I2C1_Init+0x50>)
 8000eee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ef2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ef4:	4b0a      	ldr	r3, [pc, #40]	; (8000f20 <MX_I2C1_Init+0x50>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000efa:	4b09      	ldr	r3, [pc, #36]	; (8000f20 <MX_I2C1_Init+0x50>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f00:	4b07      	ldr	r3, [pc, #28]	; (8000f20 <MX_I2C1_Init+0x50>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f06:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <MX_I2C1_Init+0x50>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f0c:	4804      	ldr	r0, [pc, #16]	; (8000f20 <MX_I2C1_Init+0x50>)
 8000f0e:	f003 f8f9 	bl	8004104 <HAL_I2C_Init>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f18:	f000 f8d0 	bl	80010bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f1c:	bf00      	nop
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	200000c0 	.word	0x200000c0
 8000f24:	40005400 	.word	0x40005400
 8000f28:	000186a0 	.word	0x000186a0

08000f2c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f30:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <MX_USART2_UART_Init+0x4c>)
 8000f32:	4a12      	ldr	r2, [pc, #72]	; (8000f7c <MX_USART2_UART_Init+0x50>)
 8000f34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f36:	4b10      	ldr	r3, [pc, #64]	; (8000f78 <MX_USART2_UART_Init+0x4c>)
 8000f38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f3e:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <MX_USART2_UART_Init+0x4c>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f44:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <MX_USART2_UART_Init+0x4c>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f4a:	4b0b      	ldr	r3, [pc, #44]	; (8000f78 <MX_USART2_UART_Init+0x4c>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 8000f50:	4b09      	ldr	r3, [pc, #36]	; (8000f78 <MX_USART2_UART_Init+0x4c>)
 8000f52:	2208      	movs	r2, #8
 8000f54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f56:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <MX_USART2_UART_Init+0x4c>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f5c:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <MX_USART2_UART_Init+0x4c>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f62:	4805      	ldr	r0, [pc, #20]	; (8000f78 <MX_USART2_UART_Init+0x4c>)
 8000f64:	f004 fd5c 	bl	8005a20 <HAL_UART_Init>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f6e:	f000 f8a5 	bl	80010bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	20000144 	.word	0x20000144
 8000f7c:	40004400 	.word	0x40004400

08000f80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b088      	sub	sp, #32
 8000f84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f86:	f107 0310 	add.w	r3, r7, #16
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]
 8000f8e:	605a      	str	r2, [r3, #4]
 8000f90:	609a      	str	r2, [r3, #8]
 8000f92:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f94:	4b45      	ldr	r3, [pc, #276]	; (80010ac <MX_GPIO_Init+0x12c>)
 8000f96:	699b      	ldr	r3, [r3, #24]
 8000f98:	4a44      	ldr	r2, [pc, #272]	; (80010ac <MX_GPIO_Init+0x12c>)
 8000f9a:	f043 0310 	orr.w	r3, r3, #16
 8000f9e:	6193      	str	r3, [r2, #24]
 8000fa0:	4b42      	ldr	r3, [pc, #264]	; (80010ac <MX_GPIO_Init+0x12c>)
 8000fa2:	699b      	ldr	r3, [r3, #24]
 8000fa4:	f003 0310 	and.w	r3, r3, #16
 8000fa8:	60fb      	str	r3, [r7, #12]
 8000faa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fac:	4b3f      	ldr	r3, [pc, #252]	; (80010ac <MX_GPIO_Init+0x12c>)
 8000fae:	699b      	ldr	r3, [r3, #24]
 8000fb0:	4a3e      	ldr	r2, [pc, #248]	; (80010ac <MX_GPIO_Init+0x12c>)
 8000fb2:	f043 0304 	orr.w	r3, r3, #4
 8000fb6:	6193      	str	r3, [r2, #24]
 8000fb8:	4b3c      	ldr	r3, [pc, #240]	; (80010ac <MX_GPIO_Init+0x12c>)
 8000fba:	699b      	ldr	r3, [r3, #24]
 8000fbc:	f003 0304 	and.w	r3, r3, #4
 8000fc0:	60bb      	str	r3, [r7, #8]
 8000fc2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc4:	4b39      	ldr	r3, [pc, #228]	; (80010ac <MX_GPIO_Init+0x12c>)
 8000fc6:	699b      	ldr	r3, [r3, #24]
 8000fc8:	4a38      	ldr	r2, [pc, #224]	; (80010ac <MX_GPIO_Init+0x12c>)
 8000fca:	f043 0308 	orr.w	r3, r3, #8
 8000fce:	6193      	str	r3, [r2, #24]
 8000fd0:	4b36      	ldr	r3, [pc, #216]	; (80010ac <MX_GPIO_Init+0x12c>)
 8000fd2:	699b      	ldr	r3, [r3, #24]
 8000fd4:	f003 0308 	and.w	r3, r3, #8
 8000fd8:	607b      	str	r3, [r7, #4]
 8000fda:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Debug_2_Pin|Debug_4_Pin|GPIO_PIN_10|GPIO_PIN_11 
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f44f 51f2 	mov.w	r1, #7744	; 0x1e40
 8000fe2:	4833      	ldr	r0, [pc, #204]	; (80010b0 <MX_GPIO_Init+0x130>)
 8000fe4:	f003 f875 	bl	80040d2 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5|GPIO_PIN_6|Debug_3_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 8000fe8:	2200      	movs	r2, #0
 8000fea:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8000fee:	4831      	ldr	r0, [pc, #196]	; (80010b4 <MX_GPIO_Init+0x134>)
 8000ff0:	f003 f86f 	bl	80040d2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11 
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f64f 613e 	movw	r1, #65086	; 0xfe3e
 8000ffa:	482f      	ldr	r0, [pc, #188]	; (80010b8 <MX_GPIO_Init+0x138>)
 8000ffc:	f003 f869 	bl	80040d2 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|Debug_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC0 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8001000:	230d      	movs	r3, #13
 8001002:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001004:	2300      	movs	r3, #0
 8001006:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001008:	2301      	movs	r3, #1
 800100a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800100c:	f107 0310 	add.w	r3, r7, #16
 8001010:	4619      	mov	r1, r3
 8001012:	4828      	ldr	r0, [pc, #160]	; (80010b4 <MX_GPIO_Init+0x134>)
 8001014:	f002 feec 	bl	8003df0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001018:	2301      	movs	r3, #1
 800101a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800101c:	2300      	movs	r3, #0
 800101e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001020:	2301      	movs	r3, #1
 8001022:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001024:	f107 0310 	add.w	r3, r7, #16
 8001028:	4619      	mov	r1, r3
 800102a:	4821      	ldr	r0, [pc, #132]	; (80010b0 <MX_GPIO_Init+0x130>)
 800102c:	f002 fee0 	bl	8003df0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Debug_2_Pin Debug_4_Pin PA10 PA11 
                           PA12 */
  GPIO_InitStruct.Pin = Debug_2_Pin|Debug_4_Pin|GPIO_PIN_10|GPIO_PIN_11 
 8001030:	f44f 53f2 	mov.w	r3, #7744	; 0x1e40
 8001034:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001036:	2301      	movs	r3, #1
 8001038:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103a:	2300      	movs	r3, #0
 800103c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103e:	2302      	movs	r3, #2
 8001040:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001042:	f107 0310 	add.w	r3, r7, #16
 8001046:	4619      	mov	r1, r3
 8001048:	4819      	ldr	r0, [pc, #100]	; (80010b0 <MX_GPIO_Init+0x130>)
 800104a:	f002 fed1 	bl	8003df0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC6 Debug_3_Pin PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|Debug_3_Pin|GPIO_PIN_8;
 800104e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001052:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001054:	2301      	movs	r3, #1
 8001056:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105c:	2302      	movs	r3, #2
 800105e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001060:	f107 0310 	add.w	r3, r7, #16
 8001064:	4619      	mov	r1, r3
 8001066:	4813      	ldr	r0, [pc, #76]	; (80010b4 <MX_GPIO_Init+0x134>)
 8001068:	f002 fec2 	bl	8003df0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800106c:	2301      	movs	r3, #1
 800106e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001070:	2300      	movs	r3, #0
 8001072:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001074:	2301      	movs	r3, #1
 8001076:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001078:	f107 0310 	add.w	r3, r7, #16
 800107c:	4619      	mov	r1, r3
 800107e:	480e      	ldr	r0, [pc, #56]	; (80010b8 <MX_GPIO_Init+0x138>)
 8001080:	f002 feb6 	bl	8003df0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB10 PB11 
                           PB12 PB13 PB14 PB15 
                           PB3 PB4 PB5 Debug_1_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11 
 8001084:	f64f 633e 	movw	r3, #65086	; 0xfe3e
 8001088:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|Debug_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108a:	2301      	movs	r3, #1
 800108c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001092:	2302      	movs	r3, #2
 8001094:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001096:	f107 0310 	add.w	r3, r7, #16
 800109a:	4619      	mov	r1, r3
 800109c:	4806      	ldr	r0, [pc, #24]	; (80010b8 <MX_GPIO_Init+0x138>)
 800109e:	f002 fea7 	bl	8003df0 <HAL_GPIO_Init>

}
 80010a2:	bf00      	nop
 80010a4:	3720      	adds	r7, #32
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40021000 	.word	0x40021000
 80010b0:	40010800 	.word	0x40010800
 80010b4:	40011000 	.word	0x40011000
 80010b8:	40010c00 	.word	0x40010c00

080010bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80010c0:	bf00      	nop
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bc80      	pop	{r7}
 80010c6:	4770      	bx	lr

080010c8 <mazeGameLoop>:
extern int16_t accz ;

//0=N,R=1,L=2,U=3,D=4
uint8_t IMUDirection = 0;

void mazeGameLoop(){
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0

	//performs on startup of the loop
	if (initilizeMazeGameFlag){
 80010cc:	4b3b      	ldr	r3, [pc, #236]	; (80011bc <mazeGameLoop+0xf4>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d006      	beq.n	80010e2 <mazeGameLoop+0x1a>
		clearScreen();
 80010d4:	f000 f9f4 	bl	80014c0 <clearScreen>
		initialisePosition();
 80010d8:	f000 f8f6 	bl	80012c8 <initialisePosition>
		initilizeMazeGameFlag=0;
 80010dc:	4b37      	ldr	r3, [pc, #220]	; (80011bc <mazeGameLoop+0xf4>)
 80010de:	2200      	movs	r2, #0
 80010e0:	701a      	strb	r2, [r3, #0]

	//send UART



	if (flag_100ms==1){
 80010e2:	4b37      	ldr	r3, [pc, #220]	; (80011c0 <mazeGameLoop+0xf8>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d111      	bne.n	800110e <mazeGameLoop+0x46>
		if (endGoal.state ==0){
 80010ea:	4b36      	ldr	r3, [pc, #216]	; (80011c4 <mazeGameLoop+0xfc>)
 80010ec:	789b      	ldrb	r3, [r3, #2]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d103      	bne.n	80010fa <mazeGameLoop+0x32>
			endGoal.state =1;
 80010f2:	4b34      	ldr	r3, [pc, #208]	; (80011c4 <mazeGameLoop+0xfc>)
 80010f4:	2201      	movs	r2, #1
 80010f6:	709a      	strb	r2, [r3, #2]
 80010f8:	e006      	b.n	8001108 <mazeGameLoop+0x40>
		}else if (endGoal.state==1){
 80010fa:	4b32      	ldr	r3, [pc, #200]	; (80011c4 <mazeGameLoop+0xfc>)
 80010fc:	789b      	ldrb	r3, [r3, #2]
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d102      	bne.n	8001108 <mazeGameLoop+0x40>
			endGoal.state =0;
 8001102:	4b30      	ldr	r3, [pc, #192]	; (80011c4 <mazeGameLoop+0xfc>)
 8001104:	2200      	movs	r2, #0
 8001106:	709a      	strb	r2, [r3, #2]
		}

		flag_100ms 	= 0;
 8001108:	4b2d      	ldr	r3, [pc, #180]	; (80011c0 <mazeGameLoop+0xf8>)
 800110a:	2200      	movs	r2, #0
 800110c:	701a      	strb	r2, [r3, #0]

	}

	if(flag_300ms ==1){
 800110e:	4b2e      	ldr	r3, [pc, #184]	; (80011c8 <mazeGameLoop+0x100>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	2b01      	cmp	r3, #1
 8001114:	d12c      	bne.n	8001170 <mazeGameLoop+0xa8>
		MovePlayerIMU();
 8001116:	f000 f861 	bl	80011dc <MovePlayerIMU>

		updatePlayerPos();
 800111a:	f000 f9f1 	bl	8001500 <updatePlayerPos>
		sendMazeUART();
 800111e:	f000 f90f 	bl	8001340 <sendMazeUART>
		if( (ball.xpos == endGoal.xpos) && (ball.ypos == endGoal.ypos) ){
 8001122:	4b2a      	ldr	r3, [pc, #168]	; (80011cc <mazeGameLoop+0x104>)
 8001124:	781a      	ldrb	r2, [r3, #0]
 8001126:	4b27      	ldr	r3, [pc, #156]	; (80011c4 <mazeGameLoop+0xfc>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	429a      	cmp	r2, r3
 800112c:	d10e      	bne.n	800114c <mazeGameLoop+0x84>
 800112e:	4b27      	ldr	r3, [pc, #156]	; (80011cc <mazeGameLoop+0x104>)
 8001130:	785a      	ldrb	r2, [r3, #1]
 8001132:	4b24      	ldr	r3, [pc, #144]	; (80011c4 <mazeGameLoop+0xfc>)
 8001134:	785b      	ldrb	r3, [r3, #1]
 8001136:	429a      	cmp	r2, r3
 8001138:	d108      	bne.n	800114c <mazeGameLoop+0x84>
			enterMazeFlag=0;
 800113a:	4b25      	ldr	r3, [pc, #148]	; (80011d0 <mazeGameLoop+0x108>)
 800113c:	2200      	movs	r2, #0
 800113e:	701a      	strb	r2, [r3, #0]
			mazeNumber=1;
 8001140:	4b24      	ldr	r3, [pc, #144]	; (80011d4 <mazeGameLoop+0x10c>)
 8001142:	2201      	movs	r2, #1
 8001144:	701a      	strb	r2, [r3, #0]
			inMazeGameFlag=0;
 8001146:	4b24      	ldr	r3, [pc, #144]	; (80011d8 <mazeGameLoop+0x110>)
 8001148:	2200      	movs	r2, #0
 800114a:	701a      	strb	r2, [r3, #0]
			//lightUpCorners();
		}

		if(ball.state == 0){//toggle ball state
 800114c:	4b1f      	ldr	r3, [pc, #124]	; (80011cc <mazeGameLoop+0x104>)
 800114e:	789b      	ldrb	r3, [r3, #2]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d103      	bne.n	800115c <mazeGameLoop+0x94>
			ball.state = 1;
 8001154:	4b1d      	ldr	r3, [pc, #116]	; (80011cc <mazeGameLoop+0x104>)
 8001156:	2201      	movs	r2, #1
 8001158:	709a      	strb	r2, [r3, #2]
 800115a:	e006      	b.n	800116a <mazeGameLoop+0xa2>
		}else if(ball.state == 1){
 800115c:	4b1b      	ldr	r3, [pc, #108]	; (80011cc <mazeGameLoop+0x104>)
 800115e:	789b      	ldrb	r3, [r3, #2]
 8001160:	2b01      	cmp	r3, #1
 8001162:	d102      	bne.n	800116a <mazeGameLoop+0xa2>
			ball.state = 0;
 8001164:	4b19      	ldr	r3, [pc, #100]	; (80011cc <mazeGameLoop+0x104>)
 8001166:	2200      	movs	r2, #0
 8001168:	709a      	strb	r2, [r3, #2]
		}


		flag_300ms = 0;
 800116a:	4b17      	ldr	r3, [pc, #92]	; (80011c8 <mazeGameLoop+0x100>)
 800116c:	2200      	movs	r2, #0
 800116e:	701a      	strb	r2, [r3, #0]
	}

	//loop every 1 ms


	updatePlayerPos();//only for x at the moment
 8001170:	f000 f9c6 	bl	8001500 <updatePlayerPos>
	//updatePosition(); //writes to matrix

	switch (mazeNumber){
 8001174:	4b17      	ldr	r3, [pc, #92]	; (80011d4 <mazeGameLoop+0x10c>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	3b01      	subs	r3, #1
 800117a:	2b03      	cmp	r3, #3
 800117c:	d816      	bhi.n	80011ac <mazeGameLoop+0xe4>
 800117e:	a201      	add	r2, pc, #4	; (adr r2, 8001184 <mazeGameLoop+0xbc>)
 8001180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001184:	08001195 	.word	0x08001195
 8001188:	0800119b 	.word	0x0800119b
 800118c:	080011a1 	.word	0x080011a1
 8001190:	080011a7 	.word	0x080011a7
	case 1:
		colomnScanMaze1();
 8001194:	f000 fcd2 	bl	8001b3c <colomnScanMaze1>
		break;
 8001198:	e008      	b.n	80011ac <mazeGameLoop+0xe4>
	case 2:
		colomnScanMaze2();
 800119a:	f000 fdfb 	bl	8001d94 <colomnScanMaze2>
		break;
 800119e:	e005      	b.n	80011ac <mazeGameLoop+0xe4>
	case 3:
		colomnScanMaze3();
 80011a0:	f000 ff1c 	bl	8001fdc <colomnScanMaze3>
		break;
 80011a4:	e002      	b.n	80011ac <mazeGameLoop+0xe4>
	case 4:
		colomnScanMaze4();
 80011a6:	f001 f845 	bl	8002234 <colomnScanMaze4>
		break;
 80011aa:	bf00      	nop
	}



	//check the effect of this == no effect
	clearScreen();
 80011ac:	f000 f988 	bl	80014c0 <clearScreen>



	writeMazeToArray();
 80011b0:	f000 f952 	bl	8001458 <writeMazeToArray>
	updateScreen();	  //displays position
 80011b4:	f7ff f8b4 	bl	8000320 <updateScreen>


}
 80011b8:	bf00      	nop
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20000097 	.word	0x20000097
 80011c0:	2000008c 	.word	0x2000008c
 80011c4:	20000048 	.word	0x20000048
 80011c8:	2000008d 	.word	0x2000008d
 80011cc:	20000044 	.word	0x20000044
 80011d0:	200000b4 	.word	0x200000b4
 80011d4:	2000004b 	.word	0x2000004b
 80011d8:	20000089 	.word	0x20000089

080011dc <MovePlayerIMU>:
void MovePlayerIMU(){
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af02      	add	r7, sp, #8
	i2c_transferData[0] = outxl_reg;
 80011e2:	4b2e      	ldr	r3, [pc, #184]	; (800129c <MovePlayerIMU+0xc0>)
 80011e4:	781a      	ldrb	r2, [r3, #0]
 80011e6:	4b2e      	ldr	r3, [pc, #184]	; (80012a0 <MovePlayerIMU+0xc4>)
 80011e8:	701a      	strb	r2, [r3, #0]
	accRes = HAL_I2C_Master_Transmit(&hi2c1, i2cAddress, i2c_transferData,1,1);
 80011ea:	4b2e      	ldr	r3, [pc, #184]	; (80012a4 <MovePlayerIMU+0xc8>)
 80011ec:	8819      	ldrh	r1, [r3, #0]
 80011ee:	2301      	movs	r3, #1
 80011f0:	9300      	str	r3, [sp, #0]
 80011f2:	2301      	movs	r3, #1
 80011f4:	4a2a      	ldr	r2, [pc, #168]	; (80012a0 <MovePlayerIMU+0xc4>)
 80011f6:	482c      	ldr	r0, [pc, #176]	; (80012a8 <MovePlayerIMU+0xcc>)
 80011f8:	f003 f8bc 	bl	8004374 <HAL_I2C_Master_Transmit>
 80011fc:	4603      	mov	r3, r0
 80011fe:	461a      	mov	r2, r3
 8001200:	4b2a      	ldr	r3, [pc, #168]	; (80012ac <MovePlayerIMU+0xd0>)
 8001202:	701a      	strb	r2, [r3, #0]
	accRes2 = HAL_I2C_Master_Receive(&hi2c1,i2cAddress, i2c_accData, 6, 1);
 8001204:	4b27      	ldr	r3, [pc, #156]	; (80012a4 <MovePlayerIMU+0xc8>)
 8001206:	8819      	ldrh	r1, [r3, #0]
 8001208:	2301      	movs	r3, #1
 800120a:	9300      	str	r3, [sp, #0]
 800120c:	2306      	movs	r3, #6
 800120e:	4a28      	ldr	r2, [pc, #160]	; (80012b0 <MovePlayerIMU+0xd4>)
 8001210:	4825      	ldr	r0, [pc, #148]	; (80012a8 <MovePlayerIMU+0xcc>)
 8001212:	f003 f9ad 	bl	8004570 <HAL_I2C_Master_Receive>
 8001216:	4603      	mov	r3, r0
 8001218:	461a      	mov	r2, r3
 800121a:	4b26      	ldr	r3, [pc, #152]	; (80012b4 <MovePlayerIMU+0xd8>)
 800121c:	701a      	strb	r2, [r3, #0]

	accz = (int16_t)((int8_t)i2c_accData[5]);
 800121e:	4b24      	ldr	r3, [pc, #144]	; (80012b0 <MovePlayerIMU+0xd4>)
 8001220:	795b      	ldrb	r3, [r3, #5]
 8001222:	b25b      	sxtb	r3, r3
 8001224:	b21a      	sxth	r2, r3
 8001226:	4b24      	ldr	r3, [pc, #144]	; (80012b8 <MovePlayerIMU+0xdc>)
 8001228:	801a      	strh	r2, [r3, #0]
	accy = (int16_t)((int8_t)i2c_accData[3]);
 800122a:	4b21      	ldr	r3, [pc, #132]	; (80012b0 <MovePlayerIMU+0xd4>)
 800122c:	78db      	ldrb	r3, [r3, #3]
 800122e:	b25b      	sxtb	r3, r3
 8001230:	b21a      	sxth	r2, r3
 8001232:	4b22      	ldr	r3, [pc, #136]	; (80012bc <MovePlayerIMU+0xe0>)
 8001234:	801a      	strh	r2, [r3, #0]
	accx = (int16_t)((int8_t)i2c_accData[1]);
 8001236:	4b1e      	ldr	r3, [pc, #120]	; (80012b0 <MovePlayerIMU+0xd4>)
 8001238:	785b      	ldrb	r3, [r3, #1]
 800123a:	b25b      	sxtb	r3, r3
 800123c:	b21a      	sxth	r2, r3
 800123e:	4b20      	ldr	r3, [pc, #128]	; (80012c0 <MovePlayerIMU+0xe4>)
 8001240:	801a      	strh	r2, [r3, #0]


	if (accx>31){
 8001242:	4b1f      	ldr	r3, [pc, #124]	; (80012c0 <MovePlayerIMU+0xe4>)
 8001244:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001248:	2b1f      	cmp	r3, #31
 800124a:	dd03      	ble.n	8001254 <MovePlayerIMU+0x78>
		IMUDirection = 2; //left
 800124c:	4b1d      	ldr	r3, [pc, #116]	; (80012c4 <MovePlayerIMU+0xe8>)
 800124e:	2202      	movs	r2, #2
 8001250:	701a      	strb	r2, [r3, #0]
		IMUDirection = 4; //down
	}else
	{
		IMUDirection=0; //no dirction
	}
}
 8001252:	e01f      	b.n	8001294 <MovePlayerIMU+0xb8>
	if (accx<-31){
 8001254:	4b1a      	ldr	r3, [pc, #104]	; (80012c0 <MovePlayerIMU+0xe4>)
 8001256:	f9b3 3000 	ldrsh.w	r3, [r3]
 800125a:	f113 0f1f 	cmn.w	r3, #31
 800125e:	da03      	bge.n	8001268 <MovePlayerIMU+0x8c>
		IMUDirection =1 ;//right
 8001260:	4b18      	ldr	r3, [pc, #96]	; (80012c4 <MovePlayerIMU+0xe8>)
 8001262:	2201      	movs	r2, #1
 8001264:	701a      	strb	r2, [r3, #0]
}
 8001266:	e015      	b.n	8001294 <MovePlayerIMU+0xb8>
	if (accy<-31){
 8001268:	4b14      	ldr	r3, [pc, #80]	; (80012bc <MovePlayerIMU+0xe0>)
 800126a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800126e:	f113 0f1f 	cmn.w	r3, #31
 8001272:	da03      	bge.n	800127c <MovePlayerIMU+0xa0>
		IMUDirection=3; //up
 8001274:	4b13      	ldr	r3, [pc, #76]	; (80012c4 <MovePlayerIMU+0xe8>)
 8001276:	2203      	movs	r2, #3
 8001278:	701a      	strb	r2, [r3, #0]
}
 800127a:	e00b      	b.n	8001294 <MovePlayerIMU+0xb8>
	if (accy>31){
 800127c:	4b0f      	ldr	r3, [pc, #60]	; (80012bc <MovePlayerIMU+0xe0>)
 800127e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001282:	2b1f      	cmp	r3, #31
 8001284:	dd03      	ble.n	800128e <MovePlayerIMU+0xb2>
		IMUDirection = 4; //down
 8001286:	4b0f      	ldr	r3, [pc, #60]	; (80012c4 <MovePlayerIMU+0xe8>)
 8001288:	2204      	movs	r2, #4
 800128a:	701a      	strb	r2, [r3, #0]
}
 800128c:	e002      	b.n	8001294 <MovePlayerIMU+0xb8>
		IMUDirection=0; //no dirction
 800128e:	4b0d      	ldr	r3, [pc, #52]	; (80012c4 <MovePlayerIMU+0xe8>)
 8001290:	2200      	movs	r2, #0
 8001292:	701a      	strb	r2, [r3, #0]
}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20000006 	.word	0x20000006
 80012a0:	2000009c 	.word	0x2000009c
 80012a4:	20000002 	.word	0x20000002
 80012a8:	200000c0 	.word	0x200000c0
 80012ac:	200000bc 	.word	0x200000bc
 80012b0:	200000a4 	.word	0x200000a4
 80012b4:	200000bd 	.word	0x200000bd
 80012b8:	200000b0 	.word	0x200000b0
 80012bc:	200000ae 	.word	0x200000ae
 80012c0:	200000ac 	.word	0x200000ac
 80012c4:	200000b3 	.word	0x200000b3

080012c8 <initialisePosition>:
void initialisePosition(){
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
	ball.xpos = 0;
 80012cc:	4b19      	ldr	r3, [pc, #100]	; (8001334 <initialisePosition+0x6c>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	701a      	strb	r2, [r3, #0]
	ball.ypos = 0;
 80012d2:	4b18      	ldr	r3, [pc, #96]	; (8001334 <initialisePosition+0x6c>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	705a      	strb	r2, [r3, #1]

	if (mazeNumber==1) {
 80012d8:	4b17      	ldr	r3, [pc, #92]	; (8001338 <initialisePosition+0x70>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d105      	bne.n	80012ec <initialisePosition+0x24>
	endGoal.xpos = 7;
 80012e0:	4b16      	ldr	r3, [pc, #88]	; (800133c <initialisePosition+0x74>)
 80012e2:	2207      	movs	r2, #7
 80012e4:	701a      	strb	r2, [r3, #0]
	endGoal.ypos = 7;
 80012e6:	4b15      	ldr	r3, [pc, #84]	; (800133c <initialisePosition+0x74>)
 80012e8:	2207      	movs	r2, #7
 80012ea:	705a      	strb	r2, [r3, #1]
	}
	if (mazeNumber==2) {
 80012ec:	4b12      	ldr	r3, [pc, #72]	; (8001338 <initialisePosition+0x70>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d105      	bne.n	8001300 <initialisePosition+0x38>
	endGoal.xpos = 3;
 80012f4:	4b11      	ldr	r3, [pc, #68]	; (800133c <initialisePosition+0x74>)
 80012f6:	2203      	movs	r2, #3
 80012f8:	701a      	strb	r2, [r3, #0]
	endGoal.ypos = 3;
 80012fa:	4b10      	ldr	r3, [pc, #64]	; (800133c <initialisePosition+0x74>)
 80012fc:	2203      	movs	r2, #3
 80012fe:	705a      	strb	r2, [r3, #1]
	}
	if (mazeNumber==3) {
 8001300:	4b0d      	ldr	r3, [pc, #52]	; (8001338 <initialisePosition+0x70>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	2b03      	cmp	r3, #3
 8001306:	d105      	bne.n	8001314 <initialisePosition+0x4c>
	endGoal.xpos = 7;
 8001308:	4b0c      	ldr	r3, [pc, #48]	; (800133c <initialisePosition+0x74>)
 800130a:	2207      	movs	r2, #7
 800130c:	701a      	strb	r2, [r3, #0]
	endGoal.ypos = 7;
 800130e:	4b0b      	ldr	r3, [pc, #44]	; (800133c <initialisePosition+0x74>)
 8001310:	2207      	movs	r2, #7
 8001312:	705a      	strb	r2, [r3, #1]
	}
	if (mazeNumber==4) {
 8001314:	4b08      	ldr	r3, [pc, #32]	; (8001338 <initialisePosition+0x70>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	2b04      	cmp	r3, #4
 800131a:	d105      	bne.n	8001328 <initialisePosition+0x60>
	endGoal.xpos = 2;
 800131c:	4b07      	ldr	r3, [pc, #28]	; (800133c <initialisePosition+0x74>)
 800131e:	2202      	movs	r2, #2
 8001320:	701a      	strb	r2, [r3, #0]
	endGoal.ypos = 0;
 8001322:	4b06      	ldr	r3, [pc, #24]	; (800133c <initialisePosition+0x74>)
 8001324:	2200      	movs	r2, #0
 8001326:	705a      	strb	r2, [r3, #1]
	}


	writeMazeToArray();
 8001328:	f000 f896 	bl	8001458 <writeMazeToArray>
	updateScreen();
 800132c:	f7fe fff8 	bl	8000320 <updateScreen>

}
 8001330:	bf00      	nop
 8001332:	bd80      	pop	{r7, pc}
 8001334:	20000044 	.word	0x20000044
 8001338:	2000004b 	.word	0x2000004b
 800133c:	20000048 	.word	0x20000048

08001340 <sendMazeUART>:
void sendMazeUART(){
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0

	uint8_t positionMsg[] = "$3xxxxx__\n";
 8001346:	4a24      	ldr	r2, [pc, #144]	; (80013d8 <sendMazeUART+0x98>)
 8001348:	1d3b      	adds	r3, r7, #4
 800134a:	ca07      	ldmia	r2, {r0, r1, r2}
 800134c:	c303      	stmia	r3!, {r0, r1}
 800134e:	801a      	strh	r2, [r3, #0]
 8001350:	3302      	adds	r3, #2
 8001352:	0c12      	lsrs	r2, r2, #16
 8001354:	701a      	strb	r2, [r3, #0]

		positionMsg[2] = ball.xpos 		+ 48;
 8001356:	4b21      	ldr	r3, [pc, #132]	; (80013dc <sendMazeUART+0x9c>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	3330      	adds	r3, #48	; 0x30
 800135c:	b2db      	uxtb	r3, r3
 800135e:	71bb      	strb	r3, [r7, #6]
		positionMsg[3] = ball.ypos 		+ 48;
 8001360:	4b1e      	ldr	r3, [pc, #120]	; (80013dc <sendMazeUART+0x9c>)
 8001362:	785b      	ldrb	r3, [r3, #1]
 8001364:	3330      	adds	r3, #48	; 0x30
 8001366:	b2db      	uxtb	r3, r3
 8001368:	71fb      	strb	r3, [r7, #7]

		positionMsg[4] = ball.state 	+ 48;
 800136a:	4b1c      	ldr	r3, [pc, #112]	; (80013dc <sendMazeUART+0x9c>)
 800136c:	789b      	ldrb	r3, [r3, #2]
 800136e:	3330      	adds	r3, #48	; 0x30
 8001370:	b2db      	uxtb	r3, r3
 8001372:	723b      	strb	r3, [r7, #8]
		positionMsg[5] = endGoal.state	+ 48;
 8001374:	4b1a      	ldr	r3, [pc, #104]	; (80013e0 <sendMazeUART+0xa0>)
 8001376:	789b      	ldrb	r3, [r3, #2]
 8001378:	3330      	adds	r3, #48	; 0x30
 800137a:	b2db      	uxtb	r3, r3
 800137c:	727b      	strb	r3, [r7, #9]

		if (IMUDirection==0){
 800137e:	4b19      	ldr	r3, [pc, #100]	; (80013e4 <sendMazeUART+0xa4>)
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d102      	bne.n	800138c <sendMazeUART+0x4c>
			positionMsg[6] = 'N';
 8001386:	234e      	movs	r3, #78	; 0x4e
 8001388:	72bb      	strb	r3, [r7, #10]
 800138a:	e01a      	b.n	80013c2 <sendMazeUART+0x82>
		}else
		if (IMUDirection==1){
 800138c:	4b15      	ldr	r3, [pc, #84]	; (80013e4 <sendMazeUART+0xa4>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	2b01      	cmp	r3, #1
 8001392:	d102      	bne.n	800139a <sendMazeUART+0x5a>
			positionMsg[6] = 'R';
 8001394:	2352      	movs	r3, #82	; 0x52
 8001396:	72bb      	strb	r3, [r7, #10]
 8001398:	e013      	b.n	80013c2 <sendMazeUART+0x82>
		}else
		if (IMUDirection==2){
 800139a:	4b12      	ldr	r3, [pc, #72]	; (80013e4 <sendMazeUART+0xa4>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d102      	bne.n	80013a8 <sendMazeUART+0x68>
			positionMsg[6] = 'L';
 80013a2:	234c      	movs	r3, #76	; 0x4c
 80013a4:	72bb      	strb	r3, [r7, #10]
 80013a6:	e00c      	b.n	80013c2 <sendMazeUART+0x82>
		}else
		if (IMUDirection==3){
 80013a8:	4b0e      	ldr	r3, [pc, #56]	; (80013e4 <sendMazeUART+0xa4>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	2b03      	cmp	r3, #3
 80013ae:	d102      	bne.n	80013b6 <sendMazeUART+0x76>
			positionMsg[6] = 'U';
 80013b0:	2355      	movs	r3, #85	; 0x55
 80013b2:	72bb      	strb	r3, [r7, #10]
 80013b4:	e005      	b.n	80013c2 <sendMazeUART+0x82>
		}else
		if (IMUDirection==4){
 80013b6:	4b0b      	ldr	r3, [pc, #44]	; (80013e4 <sendMazeUART+0xa4>)
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	2b04      	cmp	r3, #4
 80013bc:	d101      	bne.n	80013c2 <sendMazeUART+0x82>
			positionMsg[6] = 'D';
 80013be:	2344      	movs	r3, #68	; 0x44
 80013c0:	72bb      	strb	r3, [r7, #10]
		}

		HAL_UART_Transmit(&huart2,positionMsg,10,100);
 80013c2:	1d39      	adds	r1, r7, #4
 80013c4:	2364      	movs	r3, #100	; 0x64
 80013c6:	220a      	movs	r2, #10
 80013c8:	4807      	ldr	r0, [pc, #28]	; (80013e8 <sendMazeUART+0xa8>)
 80013ca:	f004 fb76 	bl	8005aba <HAL_UART_Transmit>
}
 80013ce:	bf00      	nop
 80013d0:	3710      	adds	r7, #16
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	08005e6c 	.word	0x08005e6c
 80013dc:	20000044 	.word	0x20000044
 80013e0:	20000048 	.word	0x20000048
 80013e4:	200000b3 	.word	0x200000b3
 80013e8:	20000144 	.word	0x20000144

080013ec <resetElements>:
void resetElements(){//resets the elements of the row and col for the maze1 variable
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0

	for (int i=0; i <8; i ++){
 80013f2:	2300      	movs	r3, #0
 80013f4:	607b      	str	r3, [r7, #4]
 80013f6:	e00c      	b.n	8001412 <resetElements+0x26>
		arrRow[i]= 0;
 80013f8:	4a14      	ldr	r2, [pc, #80]	; (800144c <resetElements+0x60>)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4413      	add	r3, r2
 80013fe:	2200      	movs	r2, #0
 8001400:	701a      	strb	r2, [r3, #0]
		Maze1.row[i]=0;
 8001402:	4a13      	ldr	r2, [pc, #76]	; (8001450 <resetElements+0x64>)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	4413      	add	r3, r2
 8001408:	2200      	movs	r2, #0
 800140a:	701a      	strb	r2, [r3, #0]
	for (int i=0; i <8; i ++){
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	3301      	adds	r3, #1
 8001410:	607b      	str	r3, [r7, #4]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2b07      	cmp	r3, #7
 8001416:	ddef      	ble.n	80013f8 <resetElements+0xc>
	}
	for (int j=0; j <8; j ++){
 8001418:	2300      	movs	r3, #0
 800141a:	603b      	str	r3, [r7, #0]
 800141c:	e00d      	b.n	800143a <resetElements+0x4e>
			arrCol[j]= 0;
 800141e:	4a0d      	ldr	r2, [pc, #52]	; (8001454 <resetElements+0x68>)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	4413      	add	r3, r2
 8001424:	2200      	movs	r2, #0
 8001426:	701a      	strb	r2, [r3, #0]
			Maze1.col[j]=0;
 8001428:	4a09      	ldr	r2, [pc, #36]	; (8001450 <resetElements+0x64>)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	4413      	add	r3, r2
 800142e:	3308      	adds	r3, #8
 8001430:	2200      	movs	r2, #0
 8001432:	701a      	strb	r2, [r3, #0]
	for (int j=0; j <8; j ++){
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	3301      	adds	r3, #1
 8001438:	603b      	str	r3, [r7, #0]
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	2b07      	cmp	r3, #7
 800143e:	ddee      	ble.n	800141e <resetElements+0x32>
		}
}
 8001440:	bf00      	nop
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	bc80      	pop	{r7}
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	20000078 	.word	0x20000078
 8001450:	20000194 	.word	0x20000194
 8001454:	20000080 	.word	0x20000080

08001458 <writeMazeToArray>:
void writeMazeToArray(){
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0

	for (int i=0; i <8; i ++){
 800145e:	2300      	movs	r3, #0
 8001460:	607b      	str	r3, [r7, #4]
 8001462:	e00b      	b.n	800147c <writeMazeToArray+0x24>
		arrRow[i]= Maze1.row[i];
 8001464:	4a13      	ldr	r2, [pc, #76]	; (80014b4 <writeMazeToArray+0x5c>)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4413      	add	r3, r2
 800146a:	7819      	ldrb	r1, [r3, #0]
 800146c:	4a12      	ldr	r2, [pc, #72]	; (80014b8 <writeMazeToArray+0x60>)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4413      	add	r3, r2
 8001472:	460a      	mov	r2, r1
 8001474:	701a      	strb	r2, [r3, #0]
	for (int i=0; i <8; i ++){
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	3301      	adds	r3, #1
 800147a:	607b      	str	r3, [r7, #4]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2b07      	cmp	r3, #7
 8001480:	ddf0      	ble.n	8001464 <writeMazeToArray+0xc>
	}
	for (int j=0; j <8; j ++){
 8001482:	2300      	movs	r3, #0
 8001484:	603b      	str	r3, [r7, #0]
 8001486:	e00c      	b.n	80014a2 <writeMazeToArray+0x4a>
			arrCol[j]= Maze1.col[j];
 8001488:	4a0a      	ldr	r2, [pc, #40]	; (80014b4 <writeMazeToArray+0x5c>)
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	4413      	add	r3, r2
 800148e:	3308      	adds	r3, #8
 8001490:	7819      	ldrb	r1, [r3, #0]
 8001492:	4a0a      	ldr	r2, [pc, #40]	; (80014bc <writeMazeToArray+0x64>)
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	4413      	add	r3, r2
 8001498:	460a      	mov	r2, r1
 800149a:	701a      	strb	r2, [r3, #0]
	for (int j=0; j <8; j ++){
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	3301      	adds	r3, #1
 80014a0:	603b      	str	r3, [r7, #0]
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	2b07      	cmp	r3, #7
 80014a6:	ddef      	ble.n	8001488 <writeMazeToArray+0x30>
		}
}
 80014a8:	bf00      	nop
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bc80      	pop	{r7}
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	20000194 	.word	0x20000194
 80014b8:	20000078 	.word	0x20000078
 80014bc:	20000080 	.word	0x20000080

080014c0 <clearScreen>:
			}else
				arrRow[j]=0;
	}
}

void clearScreen(){
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0

	for (int i =0; i<8;i ++){
 80014c6:	2300      	movs	r3, #0
 80014c8:	607b      	str	r3, [r7, #4]
 80014ca:	e00c      	b.n	80014e6 <clearScreen+0x26>
			arrCol[i]=0;
 80014cc:	4a0a      	ldr	r2, [pc, #40]	; (80014f8 <clearScreen+0x38>)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4413      	add	r3, r2
 80014d2:	2200      	movs	r2, #0
 80014d4:	701a      	strb	r2, [r3, #0]
			arrRow[i]=0;
 80014d6:	4a09      	ldr	r2, [pc, #36]	; (80014fc <clearScreen+0x3c>)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	4413      	add	r3, r2
 80014dc:	2200      	movs	r2, #0
 80014de:	701a      	strb	r2, [r3, #0]
	for (int i =0; i<8;i ++){
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	3301      	adds	r3, #1
 80014e4:	607b      	str	r3, [r7, #4]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2b07      	cmp	r3, #7
 80014ea:	ddef      	ble.n	80014cc <clearScreen+0xc>
	}
			updateScreen();
 80014ec:	f7fe ff18 	bl	8000320 <updateScreen>

}
 80014f0:	bf00      	nop
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	20000080 	.word	0x20000080
 80014fc:	20000078 	.word	0x20000078

08001500 <updatePlayerPos>:

void updatePlayerPos(){//scans for button presses
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0

	switch (mazeNumber){
 8001504:	4b9e      	ldr	r3, [pc, #632]	; (8001780 <updatePlayerPos+0x280>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	3b01      	subs	r3, #1
 800150a:	2b03      	cmp	r3, #3
 800150c:	f200 82eb 	bhi.w	8001ae6 <updatePlayerPos+0x5e6>
 8001510:	a201      	add	r2, pc, #4	; (adr r2, 8001518 <updatePlayerPos+0x18>)
 8001512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001516:	bf00      	nop
 8001518:	08001529 	.word	0x08001529
 800151c:	08001681 	.word	0x08001681
 8001520:	08001801 	.word	0x08001801
 8001524:	08001959 	.word	0x08001959
	case 1 :
		if ((ButtonL.needsAction) || (accx > 31))
 8001528:	4b96      	ldr	r3, [pc, #600]	; (8001784 <updatePlayerPos+0x284>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d104      	bne.n	800153a <updatePlayerPos+0x3a>
 8001530:	4b95      	ldr	r3, [pc, #596]	; (8001788 <updatePlayerPos+0x288>)
 8001532:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001536:	2b1f      	cmp	r3, #31
 8001538:	dd20      	ble.n	800157c <updatePlayerPos+0x7c>
	{
		//moveLeft
		if (ball.xpos>0){
 800153a:	4b94      	ldr	r3, [pc, #592]	; (800178c <updatePlayerPos+0x28c>)
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d012      	beq.n	8001568 <updatePlayerPos+0x68>
			if (layout_M1[ball.ypos][ball.xpos-1] == 0 ){
 8001542:	4b92      	ldr	r3, [pc, #584]	; (800178c <updatePlayerPos+0x28c>)
 8001544:	785b      	ldrb	r3, [r3, #1]
 8001546:	461a      	mov	r2, r3
 8001548:	4b90      	ldr	r3, [pc, #576]	; (800178c <updatePlayerPos+0x28c>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	3b01      	subs	r3, #1
 800154e:	4990      	ldr	r1, [pc, #576]	; (8001790 <updatePlayerPos+0x290>)
 8001550:	00d2      	lsls	r2, r2, #3
 8001552:	440a      	add	r2, r1
 8001554:	4413      	add	r3, r2
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d105      	bne.n	8001568 <updatePlayerPos+0x68>
				ball.xpos --;
 800155c:	4b8b      	ldr	r3, [pc, #556]	; (800178c <updatePlayerPos+0x28c>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	3b01      	subs	r3, #1
 8001562:	b2da      	uxtb	r2, r3
 8001564:	4b89      	ldr	r3, [pc, #548]	; (800178c <updatePlayerPos+0x28c>)
 8001566:	701a      	strb	r2, [r3, #0]
			}
		}
		ButtonL.needsAction=0;
 8001568:	4b86      	ldr	r3, [pc, #536]	; (8001784 <updatePlayerPos+0x284>)
 800156a:	2200      	movs	r2, #0
 800156c:	701a      	strb	r2, [r3, #0]
		accx = 0;
 800156e:	4b86      	ldr	r3, [pc, #536]	; (8001788 <updatePlayerPos+0x288>)
 8001570:	2200      	movs	r2, #0
 8001572:	801a      	strh	r2, [r3, #0]
		accy = 0;
 8001574:	4b87      	ldr	r3, [pc, #540]	; (8001794 <updatePlayerPos+0x294>)
 8001576:	2200      	movs	r2, #0
 8001578:	801a      	strh	r2, [r3, #0]
 800157a:	e080      	b.n	800167e <updatePlayerPos+0x17e>
	}else
	if ((ButtonR.needsAction)  || (accx < -31))
 800157c:	4b86      	ldr	r3, [pc, #536]	; (8001798 <updatePlayerPos+0x298>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d105      	bne.n	8001590 <updatePlayerPos+0x90>
 8001584:	4b80      	ldr	r3, [pc, #512]	; (8001788 <updatePlayerPos+0x288>)
 8001586:	f9b3 3000 	ldrsh.w	r3, [r3]
 800158a:	f113 0f1f 	cmn.w	r3, #31
 800158e:	da20      	bge.n	80015d2 <updatePlayerPos+0xd2>
		{
		//moveRight
			if (ball.xpos <7){
 8001590:	4b7e      	ldr	r3, [pc, #504]	; (800178c <updatePlayerPos+0x28c>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	2b06      	cmp	r3, #6
 8001596:	d812      	bhi.n	80015be <updatePlayerPos+0xbe>
				if (layout_M1[ball.ypos][ball.xpos+1] ==0){
 8001598:	4b7c      	ldr	r3, [pc, #496]	; (800178c <updatePlayerPos+0x28c>)
 800159a:	785b      	ldrb	r3, [r3, #1]
 800159c:	461a      	mov	r2, r3
 800159e:	4b7b      	ldr	r3, [pc, #492]	; (800178c <updatePlayerPos+0x28c>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	3301      	adds	r3, #1
 80015a4:	497a      	ldr	r1, [pc, #488]	; (8001790 <updatePlayerPos+0x290>)
 80015a6:	00d2      	lsls	r2, r2, #3
 80015a8:	440a      	add	r2, r1
 80015aa:	4413      	add	r3, r2
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d105      	bne.n	80015be <updatePlayerPos+0xbe>
					ball.xpos ++;
 80015b2:	4b76      	ldr	r3, [pc, #472]	; (800178c <updatePlayerPos+0x28c>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	3301      	adds	r3, #1
 80015b8:	b2da      	uxtb	r2, r3
 80015ba:	4b74      	ldr	r3, [pc, #464]	; (800178c <updatePlayerPos+0x28c>)
 80015bc:	701a      	strb	r2, [r3, #0]
				}
			}
			ButtonR.needsAction=0;
 80015be:	4b76      	ldr	r3, [pc, #472]	; (8001798 <updatePlayerPos+0x298>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	701a      	strb	r2, [r3, #0]
			accx = 0;
 80015c4:	4b70      	ldr	r3, [pc, #448]	; (8001788 <updatePlayerPos+0x288>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	801a      	strh	r2, [r3, #0]
			accy = 0;
 80015ca:	4b72      	ldr	r3, [pc, #456]	; (8001794 <updatePlayerPos+0x294>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	801a      	strh	r2, [r3, #0]
 80015d0:	e055      	b.n	800167e <updatePlayerPos+0x17e>
		}else
	if (ButtonU.needsAction || (accy < -31)){
 80015d2:	4b72      	ldr	r3, [pc, #456]	; (800179c <updatePlayerPos+0x29c>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d105      	bne.n	80015e6 <updatePlayerPos+0xe6>
 80015da:	4b6e      	ldr	r3, [pc, #440]	; (8001794 <updatePlayerPos+0x294>)
 80015dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015e0:	f113 0f1f 	cmn.w	r3, #31
 80015e4:	da20      	bge.n	8001628 <updatePlayerPos+0x128>
		//move up
		if (ball.ypos>0){
 80015e6:	4b69      	ldr	r3, [pc, #420]	; (800178c <updatePlayerPos+0x28c>)
 80015e8:	785b      	ldrb	r3, [r3, #1]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d012      	beq.n	8001614 <updatePlayerPos+0x114>
			if (layout_M1[ball.ypos-1][ball.xpos] == 0){
 80015ee:	4b67      	ldr	r3, [pc, #412]	; (800178c <updatePlayerPos+0x28c>)
 80015f0:	785b      	ldrb	r3, [r3, #1]
 80015f2:	3b01      	subs	r3, #1
 80015f4:	4a65      	ldr	r2, [pc, #404]	; (800178c <updatePlayerPos+0x28c>)
 80015f6:	7812      	ldrb	r2, [r2, #0]
 80015f8:	4611      	mov	r1, r2
 80015fa:	4a65      	ldr	r2, [pc, #404]	; (8001790 <updatePlayerPos+0x290>)
 80015fc:	00db      	lsls	r3, r3, #3
 80015fe:	4413      	add	r3, r2
 8001600:	440b      	add	r3, r1
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d105      	bne.n	8001614 <updatePlayerPos+0x114>
				ball.ypos --;
 8001608:	4b60      	ldr	r3, [pc, #384]	; (800178c <updatePlayerPos+0x28c>)
 800160a:	785b      	ldrb	r3, [r3, #1]
 800160c:	3b01      	subs	r3, #1
 800160e:	b2da      	uxtb	r2, r3
 8001610:	4b5e      	ldr	r3, [pc, #376]	; (800178c <updatePlayerPos+0x28c>)
 8001612:	705a      	strb	r2, [r3, #1]
			}
		}
		ButtonU.needsAction=0;
 8001614:	4b61      	ldr	r3, [pc, #388]	; (800179c <updatePlayerPos+0x29c>)
 8001616:	2200      	movs	r2, #0
 8001618:	701a      	strb	r2, [r3, #0]
		accx = 0;
 800161a:	4b5b      	ldr	r3, [pc, #364]	; (8001788 <updatePlayerPos+0x288>)
 800161c:	2200      	movs	r2, #0
 800161e:	801a      	strh	r2, [r3, #0]
		accy = 0;
 8001620:	4b5c      	ldr	r3, [pc, #368]	; (8001794 <updatePlayerPos+0x294>)
 8001622:	2200      	movs	r2, #0
 8001624:	801a      	strh	r2, [r3, #0]
 8001626:	e02a      	b.n	800167e <updatePlayerPos+0x17e>
	}else
	if ((ButtonD.needsAction) || (accy > 31)){
 8001628:	4b5d      	ldr	r3, [pc, #372]	; (80017a0 <updatePlayerPos+0x2a0>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d105      	bne.n	800163c <updatePlayerPos+0x13c>
 8001630:	4b58      	ldr	r3, [pc, #352]	; (8001794 <updatePlayerPos+0x294>)
 8001632:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001636:	2b1f      	cmp	r3, #31
 8001638:	f340 824e 	ble.w	8001ad8 <updatePlayerPos+0x5d8>
		if (ball.ypos<7){
 800163c:	4b53      	ldr	r3, [pc, #332]	; (800178c <updatePlayerPos+0x28c>)
 800163e:	785b      	ldrb	r3, [r3, #1]
 8001640:	2b06      	cmp	r3, #6
 8001642:	d812      	bhi.n	800166a <updatePlayerPos+0x16a>
			if (layout_M1[ball.ypos+1][ball.xpos]==0){
 8001644:	4b51      	ldr	r3, [pc, #324]	; (800178c <updatePlayerPos+0x28c>)
 8001646:	785b      	ldrb	r3, [r3, #1]
 8001648:	3301      	adds	r3, #1
 800164a:	4a50      	ldr	r2, [pc, #320]	; (800178c <updatePlayerPos+0x28c>)
 800164c:	7812      	ldrb	r2, [r2, #0]
 800164e:	4611      	mov	r1, r2
 8001650:	4a4f      	ldr	r2, [pc, #316]	; (8001790 <updatePlayerPos+0x290>)
 8001652:	00db      	lsls	r3, r3, #3
 8001654:	4413      	add	r3, r2
 8001656:	440b      	add	r3, r1
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d105      	bne.n	800166a <updatePlayerPos+0x16a>
				ball.ypos ++;
 800165e:	4b4b      	ldr	r3, [pc, #300]	; (800178c <updatePlayerPos+0x28c>)
 8001660:	785b      	ldrb	r3, [r3, #1]
 8001662:	3301      	adds	r3, #1
 8001664:	b2da      	uxtb	r2, r3
 8001666:	4b49      	ldr	r3, [pc, #292]	; (800178c <updatePlayerPos+0x28c>)
 8001668:	705a      	strb	r2, [r3, #1]
			}
		}
		ButtonD.needsAction=0;
 800166a:	4b4d      	ldr	r3, [pc, #308]	; (80017a0 <updatePlayerPos+0x2a0>)
 800166c:	2200      	movs	r2, #0
 800166e:	701a      	strb	r2, [r3, #0]

		accx = 0;
 8001670:	4b45      	ldr	r3, [pc, #276]	; (8001788 <updatePlayerPos+0x288>)
 8001672:	2200      	movs	r2, #0
 8001674:	801a      	strh	r2, [r3, #0]
		accy = 0;
 8001676:	4b47      	ldr	r3, [pc, #284]	; (8001794 <updatePlayerPos+0x294>)
 8001678:	2200      	movs	r2, #0
 800167a:	801a      	strh	r2, [r3, #0]
	}
		break;
 800167c:	e22c      	b.n	8001ad8 <updatePlayerPos+0x5d8>
 800167e:	e22b      	b.n	8001ad8 <updatePlayerPos+0x5d8>
	case 2:
		if ((ButtonL.needsAction) || (accx >31))
 8001680:	4b40      	ldr	r3, [pc, #256]	; (8001784 <updatePlayerPos+0x284>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d104      	bne.n	8001692 <updatePlayerPos+0x192>
 8001688:	4b3f      	ldr	r3, [pc, #252]	; (8001788 <updatePlayerPos+0x288>)
 800168a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800168e:	2b1f      	cmp	r3, #31
 8001690:	dd20      	ble.n	80016d4 <updatePlayerPos+0x1d4>
			{
				//moveLeft
				if (ball.xpos>0){
 8001692:	4b3e      	ldr	r3, [pc, #248]	; (800178c <updatePlayerPos+0x28c>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d012      	beq.n	80016c0 <updatePlayerPos+0x1c0>
					if (layout_M2[ball.ypos][ball.xpos-1] == 0 ){
 800169a:	4b3c      	ldr	r3, [pc, #240]	; (800178c <updatePlayerPos+0x28c>)
 800169c:	785b      	ldrb	r3, [r3, #1]
 800169e:	461a      	mov	r2, r3
 80016a0:	4b3a      	ldr	r3, [pc, #232]	; (800178c <updatePlayerPos+0x28c>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	3b01      	subs	r3, #1
 80016a6:	493f      	ldr	r1, [pc, #252]	; (80017a4 <updatePlayerPos+0x2a4>)
 80016a8:	00d2      	lsls	r2, r2, #3
 80016aa:	440a      	add	r2, r1
 80016ac:	4413      	add	r3, r2
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d105      	bne.n	80016c0 <updatePlayerPos+0x1c0>
						ball.xpos --;
 80016b4:	4b35      	ldr	r3, [pc, #212]	; (800178c <updatePlayerPos+0x28c>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	3b01      	subs	r3, #1
 80016ba:	b2da      	uxtb	r2, r3
 80016bc:	4b33      	ldr	r3, [pc, #204]	; (800178c <updatePlayerPos+0x28c>)
 80016be:	701a      	strb	r2, [r3, #0]
					}
				}
				ButtonL.needsAction=0;
 80016c0:	4b30      	ldr	r3, [pc, #192]	; (8001784 <updatePlayerPos+0x284>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	701a      	strb	r2, [r3, #0]
				accx = 0;
 80016c6:	4b30      	ldr	r3, [pc, #192]	; (8001788 <updatePlayerPos+0x288>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	801a      	strh	r2, [r3, #0]
				accy = 0;
 80016cc:	4b31      	ldr	r3, [pc, #196]	; (8001794 <updatePlayerPos+0x294>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	801a      	strh	r2, [r3, #0]
 80016d2:	e094      	b.n	80017fe <updatePlayerPos+0x2fe>
			}else
			if ((ButtonR.needsAction) || (accx < -31))
 80016d4:	4b30      	ldr	r3, [pc, #192]	; (8001798 <updatePlayerPos+0x298>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d105      	bne.n	80016e8 <updatePlayerPos+0x1e8>
 80016dc:	4b2a      	ldr	r3, [pc, #168]	; (8001788 <updatePlayerPos+0x288>)
 80016de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016e2:	f113 0f1f 	cmn.w	r3, #31
 80016e6:	da20      	bge.n	800172a <updatePlayerPos+0x22a>
				{
				//moveRight
					if (ball.xpos <7){
 80016e8:	4b28      	ldr	r3, [pc, #160]	; (800178c <updatePlayerPos+0x28c>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	2b06      	cmp	r3, #6
 80016ee:	d812      	bhi.n	8001716 <updatePlayerPos+0x216>
						if (layout_M2[ball.ypos][ball.xpos+1] ==0){
 80016f0:	4b26      	ldr	r3, [pc, #152]	; (800178c <updatePlayerPos+0x28c>)
 80016f2:	785b      	ldrb	r3, [r3, #1]
 80016f4:	461a      	mov	r2, r3
 80016f6:	4b25      	ldr	r3, [pc, #148]	; (800178c <updatePlayerPos+0x28c>)
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	3301      	adds	r3, #1
 80016fc:	4929      	ldr	r1, [pc, #164]	; (80017a4 <updatePlayerPos+0x2a4>)
 80016fe:	00d2      	lsls	r2, r2, #3
 8001700:	440a      	add	r2, r1
 8001702:	4413      	add	r3, r2
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d105      	bne.n	8001716 <updatePlayerPos+0x216>
							ball.xpos ++;
 800170a:	4b20      	ldr	r3, [pc, #128]	; (800178c <updatePlayerPos+0x28c>)
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	3301      	adds	r3, #1
 8001710:	b2da      	uxtb	r2, r3
 8001712:	4b1e      	ldr	r3, [pc, #120]	; (800178c <updatePlayerPos+0x28c>)
 8001714:	701a      	strb	r2, [r3, #0]
						}
					}
					ButtonR.needsAction=0;
 8001716:	4b20      	ldr	r3, [pc, #128]	; (8001798 <updatePlayerPos+0x298>)
 8001718:	2200      	movs	r2, #0
 800171a:	701a      	strb	r2, [r3, #0]
					accx = 0;
 800171c:	4b1a      	ldr	r3, [pc, #104]	; (8001788 <updatePlayerPos+0x288>)
 800171e:	2200      	movs	r2, #0
 8001720:	801a      	strh	r2, [r3, #0]
					accy = 0;
 8001722:	4b1c      	ldr	r3, [pc, #112]	; (8001794 <updatePlayerPos+0x294>)
 8001724:	2200      	movs	r2, #0
 8001726:	801a      	strh	r2, [r3, #0]
 8001728:	e069      	b.n	80017fe <updatePlayerPos+0x2fe>
				}else
			if ((ButtonU.needsAction) || (accy < -31)){
 800172a:	4b1c      	ldr	r3, [pc, #112]	; (800179c <updatePlayerPos+0x29c>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d105      	bne.n	800173e <updatePlayerPos+0x23e>
 8001732:	4b18      	ldr	r3, [pc, #96]	; (8001794 <updatePlayerPos+0x294>)
 8001734:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001738:	f113 0f1f 	cmn.w	r3, #31
 800173c:	da34      	bge.n	80017a8 <updatePlayerPos+0x2a8>
				//move up
				if (ball.ypos>0){
 800173e:	4b13      	ldr	r3, [pc, #76]	; (800178c <updatePlayerPos+0x28c>)
 8001740:	785b      	ldrb	r3, [r3, #1]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d012      	beq.n	800176c <updatePlayerPos+0x26c>
					if (layout_M2[ball.ypos-1][ball.xpos] == 0){
 8001746:	4b11      	ldr	r3, [pc, #68]	; (800178c <updatePlayerPos+0x28c>)
 8001748:	785b      	ldrb	r3, [r3, #1]
 800174a:	3b01      	subs	r3, #1
 800174c:	4a0f      	ldr	r2, [pc, #60]	; (800178c <updatePlayerPos+0x28c>)
 800174e:	7812      	ldrb	r2, [r2, #0]
 8001750:	4611      	mov	r1, r2
 8001752:	4a14      	ldr	r2, [pc, #80]	; (80017a4 <updatePlayerPos+0x2a4>)
 8001754:	00db      	lsls	r3, r3, #3
 8001756:	4413      	add	r3, r2
 8001758:	440b      	add	r3, r1
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d105      	bne.n	800176c <updatePlayerPos+0x26c>
						ball.ypos --;
 8001760:	4b0a      	ldr	r3, [pc, #40]	; (800178c <updatePlayerPos+0x28c>)
 8001762:	785b      	ldrb	r3, [r3, #1]
 8001764:	3b01      	subs	r3, #1
 8001766:	b2da      	uxtb	r2, r3
 8001768:	4b08      	ldr	r3, [pc, #32]	; (800178c <updatePlayerPos+0x28c>)
 800176a:	705a      	strb	r2, [r3, #1]
					}
				}
				ButtonU.needsAction=0;
 800176c:	4b0b      	ldr	r3, [pc, #44]	; (800179c <updatePlayerPos+0x29c>)
 800176e:	2200      	movs	r2, #0
 8001770:	701a      	strb	r2, [r3, #0]
				accx = 0;
 8001772:	4b05      	ldr	r3, [pc, #20]	; (8001788 <updatePlayerPos+0x288>)
 8001774:	2200      	movs	r2, #0
 8001776:	801a      	strh	r2, [r3, #0]
				accy = 0;
 8001778:	4b06      	ldr	r3, [pc, #24]	; (8001794 <updatePlayerPos+0x294>)
 800177a:	2200      	movs	r2, #0
 800177c:	801a      	strh	r2, [r3, #0]
 800177e:	e03e      	b.n	80017fe <updatePlayerPos+0x2fe>
 8001780:	2000004b 	.word	0x2000004b
 8001784:	20000014 	.word	0x20000014
 8001788:	200000ac 	.word	0x200000ac
 800178c:	20000044 	.word	0x20000044
 8001790:	08005e98 	.word	0x08005e98
 8001794:	200000ae 	.word	0x200000ae
 8001798:	20000020 	.word	0x20000020
 800179c:	20000038 	.word	0x20000038
 80017a0:	2000002c 	.word	0x2000002c
 80017a4:	08005ed8 	.word	0x08005ed8
			}else
			if ((ButtonD.needsAction) || (accy > 31)){
 80017a8:	4b96      	ldr	r3, [pc, #600]	; (8001a04 <updatePlayerPos+0x504>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d105      	bne.n	80017bc <updatePlayerPos+0x2bc>
 80017b0:	4b95      	ldr	r3, [pc, #596]	; (8001a08 <updatePlayerPos+0x508>)
 80017b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017b6:	2b1f      	cmp	r3, #31
 80017b8:	f340 8190 	ble.w	8001adc <updatePlayerPos+0x5dc>
				if (ball.ypos<7){
 80017bc:	4b93      	ldr	r3, [pc, #588]	; (8001a0c <updatePlayerPos+0x50c>)
 80017be:	785b      	ldrb	r3, [r3, #1]
 80017c0:	2b06      	cmp	r3, #6
 80017c2:	d812      	bhi.n	80017ea <updatePlayerPos+0x2ea>
					if (layout_M2[ball.ypos+1][ball.xpos]==0){
 80017c4:	4b91      	ldr	r3, [pc, #580]	; (8001a0c <updatePlayerPos+0x50c>)
 80017c6:	785b      	ldrb	r3, [r3, #1]
 80017c8:	3301      	adds	r3, #1
 80017ca:	4a90      	ldr	r2, [pc, #576]	; (8001a0c <updatePlayerPos+0x50c>)
 80017cc:	7812      	ldrb	r2, [r2, #0]
 80017ce:	4611      	mov	r1, r2
 80017d0:	4a8f      	ldr	r2, [pc, #572]	; (8001a10 <updatePlayerPos+0x510>)
 80017d2:	00db      	lsls	r3, r3, #3
 80017d4:	4413      	add	r3, r2
 80017d6:	440b      	add	r3, r1
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d105      	bne.n	80017ea <updatePlayerPos+0x2ea>
						ball.ypos ++;
 80017de:	4b8b      	ldr	r3, [pc, #556]	; (8001a0c <updatePlayerPos+0x50c>)
 80017e0:	785b      	ldrb	r3, [r3, #1]
 80017e2:	3301      	adds	r3, #1
 80017e4:	b2da      	uxtb	r2, r3
 80017e6:	4b89      	ldr	r3, [pc, #548]	; (8001a0c <updatePlayerPos+0x50c>)
 80017e8:	705a      	strb	r2, [r3, #1]
					}
				}
				ButtonD.needsAction=0;
 80017ea:	4b86      	ldr	r3, [pc, #536]	; (8001a04 <updatePlayerPos+0x504>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	701a      	strb	r2, [r3, #0]

				accx = 0;
 80017f0:	4b88      	ldr	r3, [pc, #544]	; (8001a14 <updatePlayerPos+0x514>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	801a      	strh	r2, [r3, #0]
				accy = 0;
 80017f6:	4b84      	ldr	r3, [pc, #528]	; (8001a08 <updatePlayerPos+0x508>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	801a      	strh	r2, [r3, #0]
			}
		break;
 80017fc:	e16e      	b.n	8001adc <updatePlayerPos+0x5dc>
 80017fe:	e16d      	b.n	8001adc <updatePlayerPos+0x5dc>
	case 3:
		if ((ButtonL.needsAction)  || (accx >31))
 8001800:	4b85      	ldr	r3, [pc, #532]	; (8001a18 <updatePlayerPos+0x518>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d104      	bne.n	8001812 <updatePlayerPos+0x312>
 8001808:	4b82      	ldr	r3, [pc, #520]	; (8001a14 <updatePlayerPos+0x514>)
 800180a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800180e:	2b1f      	cmp	r3, #31
 8001810:	dd20      	ble.n	8001854 <updatePlayerPos+0x354>
					{
						//moveLeft
						if (ball.xpos>0){
 8001812:	4b7e      	ldr	r3, [pc, #504]	; (8001a0c <updatePlayerPos+0x50c>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d012      	beq.n	8001840 <updatePlayerPos+0x340>
							if (layout_M3[ball.ypos][ball.xpos-1] == 0 ){
 800181a:	4b7c      	ldr	r3, [pc, #496]	; (8001a0c <updatePlayerPos+0x50c>)
 800181c:	785b      	ldrb	r3, [r3, #1]
 800181e:	461a      	mov	r2, r3
 8001820:	4b7a      	ldr	r3, [pc, #488]	; (8001a0c <updatePlayerPos+0x50c>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	3b01      	subs	r3, #1
 8001826:	497d      	ldr	r1, [pc, #500]	; (8001a1c <updatePlayerPos+0x51c>)
 8001828:	00d2      	lsls	r2, r2, #3
 800182a:	440a      	add	r2, r1
 800182c:	4413      	add	r3, r2
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d105      	bne.n	8001840 <updatePlayerPos+0x340>
								ball.xpos --;
 8001834:	4b75      	ldr	r3, [pc, #468]	; (8001a0c <updatePlayerPos+0x50c>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	3b01      	subs	r3, #1
 800183a:	b2da      	uxtb	r2, r3
 800183c:	4b73      	ldr	r3, [pc, #460]	; (8001a0c <updatePlayerPos+0x50c>)
 800183e:	701a      	strb	r2, [r3, #0]
							}
						}
						ButtonL.needsAction=0;
 8001840:	4b75      	ldr	r3, [pc, #468]	; (8001a18 <updatePlayerPos+0x518>)
 8001842:	2200      	movs	r2, #0
 8001844:	701a      	strb	r2, [r3, #0]
						accx = 0;
 8001846:	4b73      	ldr	r3, [pc, #460]	; (8001a14 <updatePlayerPos+0x514>)
 8001848:	2200      	movs	r2, #0
 800184a:	801a      	strh	r2, [r3, #0]
						accy = 0;
 800184c:	4b6e      	ldr	r3, [pc, #440]	; (8001a08 <updatePlayerPos+0x508>)
 800184e:	2200      	movs	r2, #0
 8001850:	801a      	strh	r2, [r3, #0]
 8001852:	e080      	b.n	8001956 <updatePlayerPos+0x456>
					}else
					if ((ButtonR.needsAction) || (accx < -31))
 8001854:	4b72      	ldr	r3, [pc, #456]	; (8001a20 <updatePlayerPos+0x520>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d105      	bne.n	8001868 <updatePlayerPos+0x368>
 800185c:	4b6d      	ldr	r3, [pc, #436]	; (8001a14 <updatePlayerPos+0x514>)
 800185e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001862:	f113 0f1f 	cmn.w	r3, #31
 8001866:	da20      	bge.n	80018aa <updatePlayerPos+0x3aa>
						{
						//moveRight
							if (ball.xpos <7){
 8001868:	4b68      	ldr	r3, [pc, #416]	; (8001a0c <updatePlayerPos+0x50c>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	2b06      	cmp	r3, #6
 800186e:	d812      	bhi.n	8001896 <updatePlayerPos+0x396>
								if (layout_M3[ball.ypos][ball.xpos+1] ==0){
 8001870:	4b66      	ldr	r3, [pc, #408]	; (8001a0c <updatePlayerPos+0x50c>)
 8001872:	785b      	ldrb	r3, [r3, #1]
 8001874:	461a      	mov	r2, r3
 8001876:	4b65      	ldr	r3, [pc, #404]	; (8001a0c <updatePlayerPos+0x50c>)
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	3301      	adds	r3, #1
 800187c:	4967      	ldr	r1, [pc, #412]	; (8001a1c <updatePlayerPos+0x51c>)
 800187e:	00d2      	lsls	r2, r2, #3
 8001880:	440a      	add	r2, r1
 8001882:	4413      	add	r3, r2
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d105      	bne.n	8001896 <updatePlayerPos+0x396>
									ball.xpos ++;
 800188a:	4b60      	ldr	r3, [pc, #384]	; (8001a0c <updatePlayerPos+0x50c>)
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	3301      	adds	r3, #1
 8001890:	b2da      	uxtb	r2, r3
 8001892:	4b5e      	ldr	r3, [pc, #376]	; (8001a0c <updatePlayerPos+0x50c>)
 8001894:	701a      	strb	r2, [r3, #0]
								}
							}
							ButtonR.needsAction=0;
 8001896:	4b62      	ldr	r3, [pc, #392]	; (8001a20 <updatePlayerPos+0x520>)
 8001898:	2200      	movs	r2, #0
 800189a:	701a      	strb	r2, [r3, #0]
							accx = 0;
 800189c:	4b5d      	ldr	r3, [pc, #372]	; (8001a14 <updatePlayerPos+0x514>)
 800189e:	2200      	movs	r2, #0
 80018a0:	801a      	strh	r2, [r3, #0]
							accy = 0;
 80018a2:	4b59      	ldr	r3, [pc, #356]	; (8001a08 <updatePlayerPos+0x508>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	801a      	strh	r2, [r3, #0]
 80018a8:	e055      	b.n	8001956 <updatePlayerPos+0x456>
						}else
					if ((ButtonU.needsAction) || (accy < -31)){
 80018aa:	4b5e      	ldr	r3, [pc, #376]	; (8001a24 <updatePlayerPos+0x524>)
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d105      	bne.n	80018be <updatePlayerPos+0x3be>
 80018b2:	4b55      	ldr	r3, [pc, #340]	; (8001a08 <updatePlayerPos+0x508>)
 80018b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018b8:	f113 0f1f 	cmn.w	r3, #31
 80018bc:	da20      	bge.n	8001900 <updatePlayerPos+0x400>
						//move up
						if (ball.ypos>0){
 80018be:	4b53      	ldr	r3, [pc, #332]	; (8001a0c <updatePlayerPos+0x50c>)
 80018c0:	785b      	ldrb	r3, [r3, #1]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d012      	beq.n	80018ec <updatePlayerPos+0x3ec>
							if (layout_M3[ball.ypos-1][ball.xpos] == 0){
 80018c6:	4b51      	ldr	r3, [pc, #324]	; (8001a0c <updatePlayerPos+0x50c>)
 80018c8:	785b      	ldrb	r3, [r3, #1]
 80018ca:	3b01      	subs	r3, #1
 80018cc:	4a4f      	ldr	r2, [pc, #316]	; (8001a0c <updatePlayerPos+0x50c>)
 80018ce:	7812      	ldrb	r2, [r2, #0]
 80018d0:	4611      	mov	r1, r2
 80018d2:	4a52      	ldr	r2, [pc, #328]	; (8001a1c <updatePlayerPos+0x51c>)
 80018d4:	00db      	lsls	r3, r3, #3
 80018d6:	4413      	add	r3, r2
 80018d8:	440b      	add	r3, r1
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d105      	bne.n	80018ec <updatePlayerPos+0x3ec>
								ball.ypos --;
 80018e0:	4b4a      	ldr	r3, [pc, #296]	; (8001a0c <updatePlayerPos+0x50c>)
 80018e2:	785b      	ldrb	r3, [r3, #1]
 80018e4:	3b01      	subs	r3, #1
 80018e6:	b2da      	uxtb	r2, r3
 80018e8:	4b48      	ldr	r3, [pc, #288]	; (8001a0c <updatePlayerPos+0x50c>)
 80018ea:	705a      	strb	r2, [r3, #1]
							}
						}
						ButtonU.needsAction=0;
 80018ec:	4b4d      	ldr	r3, [pc, #308]	; (8001a24 <updatePlayerPos+0x524>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	701a      	strb	r2, [r3, #0]
						accx = 0;
 80018f2:	4b48      	ldr	r3, [pc, #288]	; (8001a14 <updatePlayerPos+0x514>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	801a      	strh	r2, [r3, #0]
						accy = 0;
 80018f8:	4b43      	ldr	r3, [pc, #268]	; (8001a08 <updatePlayerPos+0x508>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	801a      	strh	r2, [r3, #0]
 80018fe:	e02a      	b.n	8001956 <updatePlayerPos+0x456>
					}else
					if ((ButtonD.needsAction) || (accy >31)){
 8001900:	4b40      	ldr	r3, [pc, #256]	; (8001a04 <updatePlayerPos+0x504>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d105      	bne.n	8001914 <updatePlayerPos+0x414>
 8001908:	4b3f      	ldr	r3, [pc, #252]	; (8001a08 <updatePlayerPos+0x508>)
 800190a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800190e:	2b1f      	cmp	r3, #31
 8001910:	f340 80e6 	ble.w	8001ae0 <updatePlayerPos+0x5e0>
						if (ball.ypos<7){
 8001914:	4b3d      	ldr	r3, [pc, #244]	; (8001a0c <updatePlayerPos+0x50c>)
 8001916:	785b      	ldrb	r3, [r3, #1]
 8001918:	2b06      	cmp	r3, #6
 800191a:	d812      	bhi.n	8001942 <updatePlayerPos+0x442>
							if (layout_M3[ball.ypos+1][ball.xpos]==0){
 800191c:	4b3b      	ldr	r3, [pc, #236]	; (8001a0c <updatePlayerPos+0x50c>)
 800191e:	785b      	ldrb	r3, [r3, #1]
 8001920:	3301      	adds	r3, #1
 8001922:	4a3a      	ldr	r2, [pc, #232]	; (8001a0c <updatePlayerPos+0x50c>)
 8001924:	7812      	ldrb	r2, [r2, #0]
 8001926:	4611      	mov	r1, r2
 8001928:	4a3c      	ldr	r2, [pc, #240]	; (8001a1c <updatePlayerPos+0x51c>)
 800192a:	00db      	lsls	r3, r3, #3
 800192c:	4413      	add	r3, r2
 800192e:	440b      	add	r3, r1
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d105      	bne.n	8001942 <updatePlayerPos+0x442>
								ball.ypos ++;
 8001936:	4b35      	ldr	r3, [pc, #212]	; (8001a0c <updatePlayerPos+0x50c>)
 8001938:	785b      	ldrb	r3, [r3, #1]
 800193a:	3301      	adds	r3, #1
 800193c:	b2da      	uxtb	r2, r3
 800193e:	4b33      	ldr	r3, [pc, #204]	; (8001a0c <updatePlayerPos+0x50c>)
 8001940:	705a      	strb	r2, [r3, #1]
							}
						}
						ButtonD.needsAction=0;
 8001942:	4b30      	ldr	r3, [pc, #192]	; (8001a04 <updatePlayerPos+0x504>)
 8001944:	2200      	movs	r2, #0
 8001946:	701a      	strb	r2, [r3, #0]
						accx = 0;
 8001948:	4b32      	ldr	r3, [pc, #200]	; (8001a14 <updatePlayerPos+0x514>)
 800194a:	2200      	movs	r2, #0
 800194c:	801a      	strh	r2, [r3, #0]
						accy = 0;
 800194e:	4b2e      	ldr	r3, [pc, #184]	; (8001a08 <updatePlayerPos+0x508>)
 8001950:	2200      	movs	r2, #0
 8001952:	801a      	strh	r2, [r3, #0]
					}
		break;
 8001954:	e0c4      	b.n	8001ae0 <updatePlayerPos+0x5e0>
 8001956:	e0c3      	b.n	8001ae0 <updatePlayerPos+0x5e0>

	case 4:
		if ((ButtonL.needsAction) || (accx > 31))
 8001958:	4b2f      	ldr	r3, [pc, #188]	; (8001a18 <updatePlayerPos+0x518>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d104      	bne.n	800196a <updatePlayerPos+0x46a>
 8001960:	4b2c      	ldr	r3, [pc, #176]	; (8001a14 <updatePlayerPos+0x514>)
 8001962:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001966:	2b1f      	cmp	r3, #31
 8001968:	dd20      	ble.n	80019ac <updatePlayerPos+0x4ac>
					{
						//moveLeft
						if (ball.xpos>0){
 800196a:	4b28      	ldr	r3, [pc, #160]	; (8001a0c <updatePlayerPos+0x50c>)
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d012      	beq.n	8001998 <updatePlayerPos+0x498>
							if (layout_M4[ball.ypos][ball.xpos-1] == 0 ){
 8001972:	4b26      	ldr	r3, [pc, #152]	; (8001a0c <updatePlayerPos+0x50c>)
 8001974:	785b      	ldrb	r3, [r3, #1]
 8001976:	461a      	mov	r2, r3
 8001978:	4b24      	ldr	r3, [pc, #144]	; (8001a0c <updatePlayerPos+0x50c>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	3b01      	subs	r3, #1
 800197e:	492a      	ldr	r1, [pc, #168]	; (8001a28 <updatePlayerPos+0x528>)
 8001980:	00d2      	lsls	r2, r2, #3
 8001982:	440a      	add	r2, r1
 8001984:	4413      	add	r3, r2
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d105      	bne.n	8001998 <updatePlayerPos+0x498>
								ball.xpos --;
 800198c:	4b1f      	ldr	r3, [pc, #124]	; (8001a0c <updatePlayerPos+0x50c>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	3b01      	subs	r3, #1
 8001992:	b2da      	uxtb	r2, r3
 8001994:	4b1d      	ldr	r3, [pc, #116]	; (8001a0c <updatePlayerPos+0x50c>)
 8001996:	701a      	strb	r2, [r3, #0]
							}
						}
						ButtonL.needsAction=0;
 8001998:	4b1f      	ldr	r3, [pc, #124]	; (8001a18 <updatePlayerPos+0x518>)
 800199a:	2200      	movs	r2, #0
 800199c:	701a      	strb	r2, [r3, #0]
						accx = 0;
 800199e:	4b1d      	ldr	r3, [pc, #116]	; (8001a14 <updatePlayerPos+0x514>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	801a      	strh	r2, [r3, #0]
						accy = 0;
 80019a4:	4b18      	ldr	r3, [pc, #96]	; (8001a08 <updatePlayerPos+0x508>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	801a      	strh	r2, [r3, #0]
 80019aa:	e094      	b.n	8001ad6 <updatePlayerPos+0x5d6>
					}else
					if ((ButtonR.needsAction) || (accx < -31))
 80019ac:	4b1c      	ldr	r3, [pc, #112]	; (8001a20 <updatePlayerPos+0x520>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d105      	bne.n	80019c0 <updatePlayerPos+0x4c0>
 80019b4:	4b17      	ldr	r3, [pc, #92]	; (8001a14 <updatePlayerPos+0x514>)
 80019b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019ba:	f113 0f1f 	cmn.w	r3, #31
 80019be:	da35      	bge.n	8001a2c <updatePlayerPos+0x52c>
						{
						//moveRight
							if (ball.xpos <7){
 80019c0:	4b12      	ldr	r3, [pc, #72]	; (8001a0c <updatePlayerPos+0x50c>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	2b06      	cmp	r3, #6
 80019c6:	d812      	bhi.n	80019ee <updatePlayerPos+0x4ee>
								if (layout_M4[ball.ypos][ball.xpos+1] ==0){
 80019c8:	4b10      	ldr	r3, [pc, #64]	; (8001a0c <updatePlayerPos+0x50c>)
 80019ca:	785b      	ldrb	r3, [r3, #1]
 80019cc:	461a      	mov	r2, r3
 80019ce:	4b0f      	ldr	r3, [pc, #60]	; (8001a0c <updatePlayerPos+0x50c>)
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	3301      	adds	r3, #1
 80019d4:	4914      	ldr	r1, [pc, #80]	; (8001a28 <updatePlayerPos+0x528>)
 80019d6:	00d2      	lsls	r2, r2, #3
 80019d8:	440a      	add	r2, r1
 80019da:	4413      	add	r3, r2
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d105      	bne.n	80019ee <updatePlayerPos+0x4ee>
									ball.xpos ++;
 80019e2:	4b0a      	ldr	r3, [pc, #40]	; (8001a0c <updatePlayerPos+0x50c>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	3301      	adds	r3, #1
 80019e8:	b2da      	uxtb	r2, r3
 80019ea:	4b08      	ldr	r3, [pc, #32]	; (8001a0c <updatePlayerPos+0x50c>)
 80019ec:	701a      	strb	r2, [r3, #0]
								}
							}
							ButtonR.needsAction=0;
 80019ee:	4b0c      	ldr	r3, [pc, #48]	; (8001a20 <updatePlayerPos+0x520>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	701a      	strb	r2, [r3, #0]
							accx = 0;
 80019f4:	4b07      	ldr	r3, [pc, #28]	; (8001a14 <updatePlayerPos+0x514>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	801a      	strh	r2, [r3, #0]
							accy = 0;
 80019fa:	4b03      	ldr	r3, [pc, #12]	; (8001a08 <updatePlayerPos+0x508>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	801a      	strh	r2, [r3, #0]
 8001a00:	e069      	b.n	8001ad6 <updatePlayerPos+0x5d6>
 8001a02:	bf00      	nop
 8001a04:	2000002c 	.word	0x2000002c
 8001a08:	200000ae 	.word	0x200000ae
 8001a0c:	20000044 	.word	0x20000044
 8001a10:	08005ed8 	.word	0x08005ed8
 8001a14:	200000ac 	.word	0x200000ac
 8001a18:	20000014 	.word	0x20000014
 8001a1c:	08005f18 	.word	0x08005f18
 8001a20:	20000020 	.word	0x20000020
 8001a24:	20000038 	.word	0x20000038
 8001a28:	08005f58 	.word	0x08005f58
						}else
					if ((ButtonU.needsAction) || (accy < -31)){
 8001a2c:	4b39      	ldr	r3, [pc, #228]	; (8001b14 <updatePlayerPos+0x614>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d105      	bne.n	8001a40 <updatePlayerPos+0x540>
 8001a34:	4b38      	ldr	r3, [pc, #224]	; (8001b18 <updatePlayerPos+0x618>)
 8001a36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a3a:	f113 0f1f 	cmn.w	r3, #31
 8001a3e:	da20      	bge.n	8001a82 <updatePlayerPos+0x582>
						//move up
						if (ball.ypos>0){
 8001a40:	4b36      	ldr	r3, [pc, #216]	; (8001b1c <updatePlayerPos+0x61c>)
 8001a42:	785b      	ldrb	r3, [r3, #1]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d012      	beq.n	8001a6e <updatePlayerPos+0x56e>
							if (layout_M4[ball.ypos-1][ball.xpos] == 0){
 8001a48:	4b34      	ldr	r3, [pc, #208]	; (8001b1c <updatePlayerPos+0x61c>)
 8001a4a:	785b      	ldrb	r3, [r3, #1]
 8001a4c:	3b01      	subs	r3, #1
 8001a4e:	4a33      	ldr	r2, [pc, #204]	; (8001b1c <updatePlayerPos+0x61c>)
 8001a50:	7812      	ldrb	r2, [r2, #0]
 8001a52:	4611      	mov	r1, r2
 8001a54:	4a32      	ldr	r2, [pc, #200]	; (8001b20 <updatePlayerPos+0x620>)
 8001a56:	00db      	lsls	r3, r3, #3
 8001a58:	4413      	add	r3, r2
 8001a5a:	440b      	add	r3, r1
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d105      	bne.n	8001a6e <updatePlayerPos+0x56e>
								ball.ypos --;
 8001a62:	4b2e      	ldr	r3, [pc, #184]	; (8001b1c <updatePlayerPos+0x61c>)
 8001a64:	785b      	ldrb	r3, [r3, #1]
 8001a66:	3b01      	subs	r3, #1
 8001a68:	b2da      	uxtb	r2, r3
 8001a6a:	4b2c      	ldr	r3, [pc, #176]	; (8001b1c <updatePlayerPos+0x61c>)
 8001a6c:	705a      	strb	r2, [r3, #1]
							}
						}
						ButtonU.needsAction=0;
 8001a6e:	4b29      	ldr	r3, [pc, #164]	; (8001b14 <updatePlayerPos+0x614>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	701a      	strb	r2, [r3, #0]
						accx = 0;
 8001a74:	4b2b      	ldr	r3, [pc, #172]	; (8001b24 <updatePlayerPos+0x624>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	801a      	strh	r2, [r3, #0]
						accy = 0;
 8001a7a:	4b27      	ldr	r3, [pc, #156]	; (8001b18 <updatePlayerPos+0x618>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	801a      	strh	r2, [r3, #0]
 8001a80:	e029      	b.n	8001ad6 <updatePlayerPos+0x5d6>
					}else
					if ((ButtonD.needsAction) || (accy > 31)){
 8001a82:	4b29      	ldr	r3, [pc, #164]	; (8001b28 <updatePlayerPos+0x628>)
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d104      	bne.n	8001a94 <updatePlayerPos+0x594>
 8001a8a:	4b23      	ldr	r3, [pc, #140]	; (8001b18 <updatePlayerPos+0x618>)
 8001a8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a90:	2b1f      	cmp	r3, #31
 8001a92:	dd27      	ble.n	8001ae4 <updatePlayerPos+0x5e4>
						if (ball.ypos<7){
 8001a94:	4b21      	ldr	r3, [pc, #132]	; (8001b1c <updatePlayerPos+0x61c>)
 8001a96:	785b      	ldrb	r3, [r3, #1]
 8001a98:	2b06      	cmp	r3, #6
 8001a9a:	d812      	bhi.n	8001ac2 <updatePlayerPos+0x5c2>
							if (layout_M4[ball.ypos+1][ball.xpos]==0){
 8001a9c:	4b1f      	ldr	r3, [pc, #124]	; (8001b1c <updatePlayerPos+0x61c>)
 8001a9e:	785b      	ldrb	r3, [r3, #1]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	4a1e      	ldr	r2, [pc, #120]	; (8001b1c <updatePlayerPos+0x61c>)
 8001aa4:	7812      	ldrb	r2, [r2, #0]
 8001aa6:	4611      	mov	r1, r2
 8001aa8:	4a1d      	ldr	r2, [pc, #116]	; (8001b20 <updatePlayerPos+0x620>)
 8001aaa:	00db      	lsls	r3, r3, #3
 8001aac:	4413      	add	r3, r2
 8001aae:	440b      	add	r3, r1
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d105      	bne.n	8001ac2 <updatePlayerPos+0x5c2>
								ball.ypos ++;
 8001ab6:	4b19      	ldr	r3, [pc, #100]	; (8001b1c <updatePlayerPos+0x61c>)
 8001ab8:	785b      	ldrb	r3, [r3, #1]
 8001aba:	3301      	adds	r3, #1
 8001abc:	b2da      	uxtb	r2, r3
 8001abe:	4b17      	ldr	r3, [pc, #92]	; (8001b1c <updatePlayerPos+0x61c>)
 8001ac0:	705a      	strb	r2, [r3, #1]
							}
						}
						ButtonD.needsAction=0;
 8001ac2:	4b19      	ldr	r3, [pc, #100]	; (8001b28 <updatePlayerPos+0x628>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	701a      	strb	r2, [r3, #0]
						accx = 0;
 8001ac8:	4b16      	ldr	r3, [pc, #88]	; (8001b24 <updatePlayerPos+0x624>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	801a      	strh	r2, [r3, #0]
						accy = 0;
 8001ace:	4b12      	ldr	r3, [pc, #72]	; (8001b18 <updatePlayerPos+0x618>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	801a      	strh	r2, [r3, #0]
					}
			break;
 8001ad4:	e006      	b.n	8001ae4 <updatePlayerPos+0x5e4>
 8001ad6:	e005      	b.n	8001ae4 <updatePlayerPos+0x5e4>
		break;
 8001ad8:	bf00      	nop
 8001ada:	e004      	b.n	8001ae6 <updatePlayerPos+0x5e6>
		break;
 8001adc:	bf00      	nop
 8001ade:	e002      	b.n	8001ae6 <updatePlayerPos+0x5e6>
		break;
 8001ae0:	bf00      	nop
 8001ae2:	e000      	b.n	8001ae6 <updatePlayerPos+0x5e6>
			break;
 8001ae4:	bf00      	nop
	}//switch

	if (ButtonM.needsAction)
 8001ae6:	4b11      	ldr	r3, [pc, #68]	; (8001b2c <updatePlayerPos+0x62c>)
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d00f      	beq.n	8001b0e <updatePlayerPos+0x60e>
		{
			resetElements();
 8001aee:	f7ff fc7d 	bl	80013ec <resetElements>
			clearScreen();
 8001af2:	f7ff fce5 	bl	80014c0 <clearScreen>

			enterMazeFlag=0;
 8001af6:	4b0e      	ldr	r3, [pc, #56]	; (8001b30 <updatePlayerPos+0x630>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	701a      	strb	r2, [r3, #0]
			inMazeGameFlag =0;
 8001afc:	4b0d      	ldr	r3, [pc, #52]	; (8001b34 <updatePlayerPos+0x634>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	701a      	strb	r2, [r3, #0]
			mazeNumber =1;
 8001b02:	4b0d      	ldr	r3, [pc, #52]	; (8001b38 <updatePlayerPos+0x638>)
 8001b04:	2201      	movs	r2, #1
 8001b06:	701a      	strb	r2, [r3, #0]
		 	ButtonM.needsAction=0;
 8001b08:	4b08      	ldr	r3, [pc, #32]	; (8001b2c <updatePlayerPos+0x62c>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	701a      	strb	r2, [r3, #0]

		}
}
 8001b0e:	bf00      	nop
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	20000038 	.word	0x20000038
 8001b18:	200000ae 	.word	0x200000ae
 8001b1c:	20000044 	.word	0x20000044
 8001b20:	08005f58 	.word	0x08005f58
 8001b24:	200000ac 	.word	0x200000ac
 8001b28:	2000002c 	.word	0x2000002c
 8001b2c:	20000008 	.word	0x20000008
 8001b30:	200000b4 	.word	0x200000b4
 8001b34:	20000089 	.word	0x20000089
 8001b38:	2000004b 	.word	0x2000004b

08001b3c <colomnScanMaze1>:




void colomnScanMaze1(){
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0

	switch (flag_8ms)
 8001b40:	4b90      	ldr	r3, [pc, #576]	; (8001d84 <colomnScanMaze1+0x248>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	2b07      	cmp	r3, #7
 8001b46:	f200 811b 	bhi.w	8001d80 <colomnScanMaze1+0x244>
 8001b4a:	a201      	add	r2, pc, #4	; (adr r2, 8001b50 <colomnScanMaze1+0x14>)
 8001b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b50:	08001b71 	.word	0x08001b71
 8001b54:	08001bab 	.word	0x08001bab
 8001b58:	08001bf1 	.word	0x08001bf1
 8001b5c:	08001c25 	.word	0x08001c25
 8001b60:	08001c6b 	.word	0x08001c6b
 8001b64:	08001caf 	.word	0x08001caf
 8001b68:	08001ce7 	.word	0x08001ce7
 8001b6c:	08001d31 	.word	0x08001d31
	{
	case 0 :resetElements();
 8001b70:	f7ff fc3c 	bl	80013ec <resetElements>
		Maze1.col[0] = 1;
 8001b74:	4b84      	ldr	r3, [pc, #528]	; (8001d88 <colomnScanMaze1+0x24c>)
 8001b76:	2201      	movs	r2, #1
 8001b78:	721a      	strb	r2, [r3, #8]
		Maze1.row[1] = 1;
 8001b7a:	4b83      	ldr	r3, [pc, #524]	; (8001d88 <colomnScanMaze1+0x24c>)
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	705a      	strb	r2, [r3, #1]
		Maze1.row[5] = 1;
 8001b80:	4b81      	ldr	r3, [pc, #516]	; (8001d88 <colomnScanMaze1+0x24c>)
 8001b82:	2201      	movs	r2, #1
 8001b84:	715a      	strb	r2, [r3, #5]

		if(ball.xpos == flag_8ms){
 8001b86:	4b81      	ldr	r3, [pc, #516]	; (8001d8c <colomnScanMaze1+0x250>)
 8001b88:	781a      	ldrb	r2, [r3, #0]
 8001b8a:	4b7e      	ldr	r3, [pc, #504]	; (8001d84 <colomnScanMaze1+0x248>)
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d101      	bne.n	8001b96 <colomnScanMaze1+0x5a>
			setBall();
 8001b92:	f000 fc7b 	bl	800248c <setBall>

		}
		if(endGoal.xpos == flag_8ms){
 8001b96:	4b7e      	ldr	r3, [pc, #504]	; (8001d90 <colomnScanMaze1+0x254>)
 8001b98:	781a      	ldrb	r2, [r3, #0]
 8001b9a:	4b7a      	ldr	r3, [pc, #488]	; (8001d84 <colomnScanMaze1+0x248>)
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	f040 80df 	bne.w	8001d62 <colomnScanMaze1+0x226>
			setEndGoal();
 8001ba4:	f000 fc92 	bl	80024cc <setEndGoal>
		}
		break;
 8001ba8:	e0db      	b.n	8001d62 <colomnScanMaze1+0x226>


	case 1 :resetElements();
 8001baa:	f7ff fc1f 	bl	80013ec <resetElements>
		Maze1.col[1] = 1;
 8001bae:	4b76      	ldr	r3, [pc, #472]	; (8001d88 <colomnScanMaze1+0x24c>)
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	725a      	strb	r2, [r3, #9]
		Maze1.row[1] = 1;
 8001bb4:	4b74      	ldr	r3, [pc, #464]	; (8001d88 <colomnScanMaze1+0x24c>)
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	705a      	strb	r2, [r3, #1]
		Maze1.row[3] = 1;
 8001bba:	4b73      	ldr	r3, [pc, #460]	; (8001d88 <colomnScanMaze1+0x24c>)
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	70da      	strb	r2, [r3, #3]
		Maze1.row[5] = 1;
 8001bc0:	4b71      	ldr	r3, [pc, #452]	; (8001d88 <colomnScanMaze1+0x24c>)
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	715a      	strb	r2, [r3, #5]
		Maze1.row[7] = 1;
 8001bc6:	4b70      	ldr	r3, [pc, #448]	; (8001d88 <colomnScanMaze1+0x24c>)
 8001bc8:	2201      	movs	r2, #1
 8001bca:	71da      	strb	r2, [r3, #7]

		if(ball.xpos == flag_8ms){
 8001bcc:	4b6f      	ldr	r3, [pc, #444]	; (8001d8c <colomnScanMaze1+0x250>)
 8001bce:	781a      	ldrb	r2, [r3, #0]
 8001bd0:	4b6c      	ldr	r3, [pc, #432]	; (8001d84 <colomnScanMaze1+0x248>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d101      	bne.n	8001bdc <colomnScanMaze1+0xa0>
			setBall();
 8001bd8:	f000 fc58 	bl	800248c <setBall>
		}
		if(endGoal.xpos == flag_8ms){
 8001bdc:	4b6c      	ldr	r3, [pc, #432]	; (8001d90 <colomnScanMaze1+0x254>)
 8001bde:	781a      	ldrb	r2, [r3, #0]
 8001be0:	4b68      	ldr	r3, [pc, #416]	; (8001d84 <colomnScanMaze1+0x248>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	f040 80be 	bne.w	8001d66 <colomnScanMaze1+0x22a>
			setEndGoal();
 8001bea:	f000 fc6f 	bl	80024cc <setEndGoal>
		}

		break;
 8001bee:	e0ba      	b.n	8001d66 <colomnScanMaze1+0x22a>

	case 2 :resetElements();
 8001bf0:	f7ff fbfc 	bl	80013ec <resetElements>
		Maze1.col[2] = 1;
 8001bf4:	4b64      	ldr	r3, [pc, #400]	; (8001d88 <colomnScanMaze1+0x24c>)
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	729a      	strb	r2, [r3, #10]
		Maze1.row[3] = 1;
 8001bfa:	4b63      	ldr	r3, [pc, #396]	; (8001d88 <colomnScanMaze1+0x24c>)
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	70da      	strb	r2, [r3, #3]

		if(ball.xpos == flag_8ms){
 8001c00:	4b62      	ldr	r3, [pc, #392]	; (8001d8c <colomnScanMaze1+0x250>)
 8001c02:	781a      	ldrb	r2, [r3, #0]
 8001c04:	4b5f      	ldr	r3, [pc, #380]	; (8001d84 <colomnScanMaze1+0x248>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d101      	bne.n	8001c10 <colomnScanMaze1+0xd4>
			setBall();
 8001c0c:	f000 fc3e 	bl	800248c <setBall>
		}
		if(endGoal.xpos == flag_8ms){
 8001c10:	4b5f      	ldr	r3, [pc, #380]	; (8001d90 <colomnScanMaze1+0x254>)
 8001c12:	781a      	ldrb	r2, [r3, #0]
 8001c14:	4b5b      	ldr	r3, [pc, #364]	; (8001d84 <colomnScanMaze1+0x248>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	f040 80a6 	bne.w	8001d6a <colomnScanMaze1+0x22e>
			setEndGoal();
 8001c1e:	f000 fc55 	bl	80024cc <setEndGoal>
		}

		break;
 8001c22:	e0a2      	b.n	8001d6a <colomnScanMaze1+0x22e>


	case 3 :resetElements();
 8001c24:	f7ff fbe2 	bl	80013ec <resetElements>
		Maze1.col[3] = 1;
 8001c28:	4b57      	ldr	r3, [pc, #348]	; (8001d88 <colomnScanMaze1+0x24c>)
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	72da      	strb	r2, [r3, #11]
		Maze1.row[1] = 1;
 8001c2e:	4b56      	ldr	r3, [pc, #344]	; (8001d88 <colomnScanMaze1+0x24c>)
 8001c30:	2201      	movs	r2, #1
 8001c32:	705a      	strb	r2, [r3, #1]
		Maze1.row[3] = 1;
 8001c34:	4b54      	ldr	r3, [pc, #336]	; (8001d88 <colomnScanMaze1+0x24c>)
 8001c36:	2201      	movs	r2, #1
 8001c38:	70da      	strb	r2, [r3, #3]
		Maze1.row[5] = 1;
 8001c3a:	4b53      	ldr	r3, [pc, #332]	; (8001d88 <colomnScanMaze1+0x24c>)
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	715a      	strb	r2, [r3, #5]
		Maze1.row[6] = 1;
 8001c40:	4b51      	ldr	r3, [pc, #324]	; (8001d88 <colomnScanMaze1+0x24c>)
 8001c42:	2201      	movs	r2, #1
 8001c44:	719a      	strb	r2, [r3, #6]

		if(ball.xpos == flag_8ms){
 8001c46:	4b51      	ldr	r3, [pc, #324]	; (8001d8c <colomnScanMaze1+0x250>)
 8001c48:	781a      	ldrb	r2, [r3, #0]
 8001c4a:	4b4e      	ldr	r3, [pc, #312]	; (8001d84 <colomnScanMaze1+0x248>)
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d101      	bne.n	8001c56 <colomnScanMaze1+0x11a>
			setBall();
 8001c52:	f000 fc1b 	bl	800248c <setBall>
		}
		if(endGoal.xpos == flag_8ms){
 8001c56:	4b4e      	ldr	r3, [pc, #312]	; (8001d90 <colomnScanMaze1+0x254>)
 8001c58:	781a      	ldrb	r2, [r3, #0]
 8001c5a:	4b4a      	ldr	r3, [pc, #296]	; (8001d84 <colomnScanMaze1+0x248>)
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	f040 8085 	bne.w	8001d6e <colomnScanMaze1+0x232>
			setEndGoal();
 8001c64:	f000 fc32 	bl	80024cc <setEndGoal>
		}

		break ;
 8001c68:	e081      	b.n	8001d6e <colomnScanMaze1+0x232>

	case 4 :resetElements();
 8001c6a:	f7ff fbbf 	bl	80013ec <resetElements>
		Maze1.col[4] = 1;
 8001c6e:	4b46      	ldr	r3, [pc, #280]	; (8001d88 <colomnScanMaze1+0x24c>)
 8001c70:	2201      	movs	r2, #1
 8001c72:	731a      	strb	r2, [r3, #12]
		Maze1.row[1] = 1;
 8001c74:	4b44      	ldr	r3, [pc, #272]	; (8001d88 <colomnScanMaze1+0x24c>)
 8001c76:	2201      	movs	r2, #1
 8001c78:	705a      	strb	r2, [r3, #1]
		Maze1.row[3] = 1;
 8001c7a:	4b43      	ldr	r3, [pc, #268]	; (8001d88 <colomnScanMaze1+0x24c>)
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	70da      	strb	r2, [r3, #3]
		Maze1.row[4] = 1;
 8001c80:	4b41      	ldr	r3, [pc, #260]	; (8001d88 <colomnScanMaze1+0x24c>)
 8001c82:	2201      	movs	r2, #1
 8001c84:	711a      	strb	r2, [r3, #4]
		Maze1.row[5] = 1;
 8001c86:	4b40      	ldr	r3, [pc, #256]	; (8001d88 <colomnScanMaze1+0x24c>)
 8001c88:	2201      	movs	r2, #1
 8001c8a:	715a      	strb	r2, [r3, #5]

		if(ball.xpos == flag_8ms){
 8001c8c:	4b3f      	ldr	r3, [pc, #252]	; (8001d8c <colomnScanMaze1+0x250>)
 8001c8e:	781a      	ldrb	r2, [r3, #0]
 8001c90:	4b3c      	ldr	r3, [pc, #240]	; (8001d84 <colomnScanMaze1+0x248>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d101      	bne.n	8001c9c <colomnScanMaze1+0x160>
			setBall();
 8001c98:	f000 fbf8 	bl	800248c <setBall>
		}
		if(endGoal.xpos == flag_8ms){
 8001c9c:	4b3c      	ldr	r3, [pc, #240]	; (8001d90 <colomnScanMaze1+0x254>)
 8001c9e:	781a      	ldrb	r2, [r3, #0]
 8001ca0:	4b38      	ldr	r3, [pc, #224]	; (8001d84 <colomnScanMaze1+0x248>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d164      	bne.n	8001d72 <colomnScanMaze1+0x236>
			setEndGoal();
 8001ca8:	f000 fc10 	bl	80024cc <setEndGoal>
		}

		break ;
 8001cac:	e061      	b.n	8001d72 <colomnScanMaze1+0x236>


	case 5 :resetElements();
 8001cae:	f7ff fb9d 	bl	80013ec <resetElements>
		Maze1.col[5] = 1;
 8001cb2:	4b35      	ldr	r3, [pc, #212]	; (8001d88 <colomnScanMaze1+0x24c>)
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	735a      	strb	r2, [r3, #13]
		Maze1.row[3] =1 ;
 8001cb8:	4b33      	ldr	r3, [pc, #204]	; (8001d88 <colomnScanMaze1+0x24c>)
 8001cba:	2201      	movs	r2, #1
 8001cbc:	70da      	strb	r2, [r3, #3]
		Maze1.row[7] =1;
 8001cbe:	4b32      	ldr	r3, [pc, #200]	; (8001d88 <colomnScanMaze1+0x24c>)
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	71da      	strb	r2, [r3, #7]

		if(ball.xpos == flag_8ms){
 8001cc4:	4b31      	ldr	r3, [pc, #196]	; (8001d8c <colomnScanMaze1+0x250>)
 8001cc6:	781a      	ldrb	r2, [r3, #0]
 8001cc8:	4b2e      	ldr	r3, [pc, #184]	; (8001d84 <colomnScanMaze1+0x248>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d101      	bne.n	8001cd4 <colomnScanMaze1+0x198>
			setBall();
 8001cd0:	f000 fbdc 	bl	800248c <setBall>
		}
		if(endGoal.xpos == flag_8ms){
 8001cd4:	4b2e      	ldr	r3, [pc, #184]	; (8001d90 <colomnScanMaze1+0x254>)
 8001cd6:	781a      	ldrb	r2, [r3, #0]
 8001cd8:	4b2a      	ldr	r3, [pc, #168]	; (8001d84 <colomnScanMaze1+0x248>)
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d14a      	bne.n	8001d76 <colomnScanMaze1+0x23a>
			setEndGoal();
 8001ce0:	f000 fbf4 	bl	80024cc <setEndGoal>
		}

		break ;
 8001ce4:	e047      	b.n	8001d76 <colomnScanMaze1+0x23a>



	case 6 :resetElements();
 8001ce6:	f7ff fb81 	bl	80013ec <resetElements>
		Maze1.col[6] = 1;
 8001cea:	4b27      	ldr	r3, [pc, #156]	; (8001d88 <colomnScanMaze1+0x24c>)
 8001cec:	2201      	movs	r2, #1
 8001cee:	739a      	strb	r2, [r3, #14]
		Maze1.row[0] = 1;
 8001cf0:	4b25      	ldr	r3, [pc, #148]	; (8001d88 <colomnScanMaze1+0x24c>)
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	701a      	strb	r2, [r3, #0]
		Maze1.row[2] = 1;
 8001cf6:	4b24      	ldr	r3, [pc, #144]	; (8001d88 <colomnScanMaze1+0x24c>)
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	709a      	strb	r2, [r3, #2]
		Maze1.row[5] = 1;
 8001cfc:	4b22      	ldr	r3, [pc, #136]	; (8001d88 <colomnScanMaze1+0x24c>)
 8001cfe:	2201      	movs	r2, #1
 8001d00:	715a      	strb	r2, [r3, #5]
		Maze1.row[6] = 1;
 8001d02:	4b21      	ldr	r3, [pc, #132]	; (8001d88 <colomnScanMaze1+0x24c>)
 8001d04:	2201      	movs	r2, #1
 8001d06:	719a      	strb	r2, [r3, #6]
		Maze1.row[7] = 1;
 8001d08:	4b1f      	ldr	r3, [pc, #124]	; (8001d88 <colomnScanMaze1+0x24c>)
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	71da      	strb	r2, [r3, #7]

		if(ball.xpos == flag_8ms){
 8001d0e:	4b1f      	ldr	r3, [pc, #124]	; (8001d8c <colomnScanMaze1+0x250>)
 8001d10:	781a      	ldrb	r2, [r3, #0]
 8001d12:	4b1c      	ldr	r3, [pc, #112]	; (8001d84 <colomnScanMaze1+0x248>)
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d101      	bne.n	8001d1e <colomnScanMaze1+0x1e2>
			setBall();
 8001d1a:	f000 fbb7 	bl	800248c <setBall>
		}
		if(endGoal.xpos == flag_8ms){
 8001d1e:	4b1c      	ldr	r3, [pc, #112]	; (8001d90 <colomnScanMaze1+0x254>)
 8001d20:	781a      	ldrb	r2, [r3, #0]
 8001d22:	4b18      	ldr	r3, [pc, #96]	; (8001d84 <colomnScanMaze1+0x248>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d127      	bne.n	8001d7a <colomnScanMaze1+0x23e>
			setEndGoal();
 8001d2a:	f000 fbcf 	bl	80024cc <setEndGoal>
		}

		break ;
 8001d2e:	e024      	b.n	8001d7a <colomnScanMaze1+0x23e>


	case 7 :resetElements();
 8001d30:	f7ff fb5c 	bl	80013ec <resetElements>
		Maze1.col[7] = 1;
 8001d34:	4b14      	ldr	r3, [pc, #80]	; (8001d88 <colomnScanMaze1+0x24c>)
 8001d36:	2201      	movs	r2, #1
 8001d38:	73da      	strb	r2, [r3, #15]
		Maze1.row[3] = 1;
 8001d3a:	4b13      	ldr	r3, [pc, #76]	; (8001d88 <colomnScanMaze1+0x24c>)
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	70da      	strb	r2, [r3, #3]

		if(ball.xpos == flag_8ms){
 8001d40:	4b12      	ldr	r3, [pc, #72]	; (8001d8c <colomnScanMaze1+0x250>)
 8001d42:	781a      	ldrb	r2, [r3, #0]
 8001d44:	4b0f      	ldr	r3, [pc, #60]	; (8001d84 <colomnScanMaze1+0x248>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d101      	bne.n	8001d50 <colomnScanMaze1+0x214>
			setBall();
 8001d4c:	f000 fb9e 	bl	800248c <setBall>
		}
		if(endGoal.xpos == flag_8ms){
 8001d50:	4b0f      	ldr	r3, [pc, #60]	; (8001d90 <colomnScanMaze1+0x254>)
 8001d52:	781a      	ldrb	r2, [r3, #0]
 8001d54:	4b0b      	ldr	r3, [pc, #44]	; (8001d84 <colomnScanMaze1+0x248>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d110      	bne.n	8001d7e <colomnScanMaze1+0x242>
			setEndGoal();
 8001d5c:	f000 fbb6 	bl	80024cc <setEndGoal>
		}

		break ;
 8001d60:	e00d      	b.n	8001d7e <colomnScanMaze1+0x242>
		break;
 8001d62:	bf00      	nop
 8001d64:	e00c      	b.n	8001d80 <colomnScanMaze1+0x244>
		break;
 8001d66:	bf00      	nop
 8001d68:	e00a      	b.n	8001d80 <colomnScanMaze1+0x244>
		break;
 8001d6a:	bf00      	nop
 8001d6c:	e008      	b.n	8001d80 <colomnScanMaze1+0x244>
		break ;
 8001d6e:	bf00      	nop
 8001d70:	e006      	b.n	8001d80 <colomnScanMaze1+0x244>
		break ;
 8001d72:	bf00      	nop
 8001d74:	e004      	b.n	8001d80 <colomnScanMaze1+0x244>
		break ;
 8001d76:	bf00      	nop
 8001d78:	e002      	b.n	8001d80 <colomnScanMaze1+0x244>
		break ;
 8001d7a:	bf00      	nop
 8001d7c:	e000      	b.n	8001d80 <colomnScanMaze1+0x244>
		break ;
 8001d7e:	bf00      	nop
	}
}
 8001d80:	bf00      	nop
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	2000008b 	.word	0x2000008b
 8001d88:	20000194 	.word	0x20000194
 8001d8c:	20000044 	.word	0x20000044
 8001d90:	20000048 	.word	0x20000048

08001d94 <colomnScanMaze2>:

void colomnScanMaze2(){
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0

	switch (flag_8ms)
 8001d98:	4b8c      	ldr	r3, [pc, #560]	; (8001fcc <colomnScanMaze2+0x238>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	2b07      	cmp	r3, #7
 8001d9e:	f200 8112 	bhi.w	8001fc6 <colomnScanMaze2+0x232>
 8001da2:	a201      	add	r2, pc, #4	; (adr r2, 8001da8 <colomnScanMaze2+0x14>)
 8001da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001da8:	08001dc9 	.word	0x08001dc9
 8001dac:	08001dfd 	.word	0x08001dfd
 8001db0:	08001e37 	.word	0x08001e37
 8001db4:	08001e7d 	.word	0x08001e7d
 8001db8:	08001eb7 	.word	0x08001eb7
 8001dbc:	08001ef5 	.word	0x08001ef5
 8001dc0:	08001f33 	.word	0x08001f33
 8001dc4:	08001f77 	.word	0x08001f77
	{
	case 0 :resetElements();
 8001dc8:	f7ff fb10 	bl	80013ec <resetElements>
		Maze1.col[0] = 1;
 8001dcc:	4b80      	ldr	r3, [pc, #512]	; (8001fd0 <colomnScanMaze2+0x23c>)
 8001dce:	2201      	movs	r2, #1
 8001dd0:	721a      	strb	r2, [r3, #8]
		Maze1.row[5] = 1;
 8001dd2:	4b7f      	ldr	r3, [pc, #508]	; (8001fd0 <colomnScanMaze2+0x23c>)
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	715a      	strb	r2, [r3, #5]

		if(ball.xpos == flag_8ms){
 8001dd8:	4b7e      	ldr	r3, [pc, #504]	; (8001fd4 <colomnScanMaze2+0x240>)
 8001dda:	781a      	ldrb	r2, [r3, #0]
 8001ddc:	4b7b      	ldr	r3, [pc, #492]	; (8001fcc <colomnScanMaze2+0x238>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d101      	bne.n	8001de8 <colomnScanMaze2+0x54>
			setBall();
 8001de4:	f000 fb52 	bl	800248c <setBall>

		}
		if(endGoal.xpos == flag_8ms){
 8001de8:	4b7b      	ldr	r3, [pc, #492]	; (8001fd8 <colomnScanMaze2+0x244>)
 8001dea:	781a      	ldrb	r2, [r3, #0]
 8001dec:	4b77      	ldr	r3, [pc, #476]	; (8001fcc <colomnScanMaze2+0x238>)
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	f040 80d9 	bne.w	8001fa8 <colomnScanMaze2+0x214>
			setEndGoal();
 8001df6:	f000 fb69 	bl	80024cc <setEndGoal>
		}
		break;
 8001dfa:	e0d5      	b.n	8001fa8 <colomnScanMaze2+0x214>


	case 1 :resetElements();
 8001dfc:	f7ff faf6 	bl	80013ec <resetElements>
		Maze1.col[1] = 1;
 8001e00:	4b73      	ldr	r3, [pc, #460]	; (8001fd0 <colomnScanMaze2+0x23c>)
 8001e02:	2201      	movs	r2, #1
 8001e04:	725a      	strb	r2, [r3, #9]
		Maze1.row[1] = 1;
 8001e06:	4b72      	ldr	r3, [pc, #456]	; (8001fd0 <colomnScanMaze2+0x23c>)
 8001e08:	2201      	movs	r2, #1
 8001e0a:	705a      	strb	r2, [r3, #1]
		Maze1.row[3] = 1;
 8001e0c:	4b70      	ldr	r3, [pc, #448]	; (8001fd0 <colomnScanMaze2+0x23c>)
 8001e0e:	2201      	movs	r2, #1
 8001e10:	70da      	strb	r2, [r3, #3]


		if(ball.xpos == flag_8ms){
 8001e12:	4b70      	ldr	r3, [pc, #448]	; (8001fd4 <colomnScanMaze2+0x240>)
 8001e14:	781a      	ldrb	r2, [r3, #0]
 8001e16:	4b6d      	ldr	r3, [pc, #436]	; (8001fcc <colomnScanMaze2+0x238>)
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d101      	bne.n	8001e22 <colomnScanMaze2+0x8e>
			setBall();
 8001e1e:	f000 fb35 	bl	800248c <setBall>
		}
		if(endGoal.xpos == flag_8ms){
 8001e22:	4b6d      	ldr	r3, [pc, #436]	; (8001fd8 <colomnScanMaze2+0x244>)
 8001e24:	781a      	ldrb	r2, [r3, #0]
 8001e26:	4b69      	ldr	r3, [pc, #420]	; (8001fcc <colomnScanMaze2+0x238>)
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	f040 80be 	bne.w	8001fac <colomnScanMaze2+0x218>
			setEndGoal();
 8001e30:	f000 fb4c 	bl	80024cc <setEndGoal>
		}

		break;
 8001e34:	e0ba      	b.n	8001fac <colomnScanMaze2+0x218>

	case 2 :resetElements();
 8001e36:	f7ff fad9 	bl	80013ec <resetElements>
		Maze1.col[2] = 1;
 8001e3a:	4b65      	ldr	r3, [pc, #404]	; (8001fd0 <colomnScanMaze2+0x23c>)
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	729a      	strb	r2, [r3, #10]
		Maze1.row[2] = 1;
 8001e40:	4b63      	ldr	r3, [pc, #396]	; (8001fd0 <colomnScanMaze2+0x23c>)
 8001e42:	2201      	movs	r2, #1
 8001e44:	709a      	strb	r2, [r3, #2]
		Maze1.row[4] = 1;
 8001e46:	4b62      	ldr	r3, [pc, #392]	; (8001fd0 <colomnScanMaze2+0x23c>)
 8001e48:	2201      	movs	r2, #1
 8001e4a:	711a      	strb	r2, [r3, #4]
		Maze1.row[5] = 1;
 8001e4c:	4b60      	ldr	r3, [pc, #384]	; (8001fd0 <colomnScanMaze2+0x23c>)
 8001e4e:	2201      	movs	r2, #1
 8001e50:	715a      	strb	r2, [r3, #5]
		Maze1.row[6] = 1;
 8001e52:	4b5f      	ldr	r3, [pc, #380]	; (8001fd0 <colomnScanMaze2+0x23c>)
 8001e54:	2201      	movs	r2, #1
 8001e56:	719a      	strb	r2, [r3, #6]

		if(ball.xpos == flag_8ms){
 8001e58:	4b5e      	ldr	r3, [pc, #376]	; (8001fd4 <colomnScanMaze2+0x240>)
 8001e5a:	781a      	ldrb	r2, [r3, #0]
 8001e5c:	4b5b      	ldr	r3, [pc, #364]	; (8001fcc <colomnScanMaze2+0x238>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d101      	bne.n	8001e68 <colomnScanMaze2+0xd4>
			setBall();
 8001e64:	f000 fb12 	bl	800248c <setBall>
		}
		if(endGoal.xpos == flag_8ms){
 8001e68:	4b5b      	ldr	r3, [pc, #364]	; (8001fd8 <colomnScanMaze2+0x244>)
 8001e6a:	781a      	ldrb	r2, [r3, #0]
 8001e6c:	4b57      	ldr	r3, [pc, #348]	; (8001fcc <colomnScanMaze2+0x238>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	f040 809d 	bne.w	8001fb0 <colomnScanMaze2+0x21c>
			setEndGoal();
 8001e76:	f000 fb29 	bl	80024cc <setEndGoal>
		}

		break;
 8001e7a:	e099      	b.n	8001fb0 <colomnScanMaze2+0x21c>


	case 3 :resetElements();
 8001e7c:	f7ff fab6 	bl	80013ec <resetElements>
		Maze1.col[3] = 1;
 8001e80:	4b53      	ldr	r3, [pc, #332]	; (8001fd0 <colomnScanMaze2+0x23c>)
 8001e82:	2201      	movs	r2, #1
 8001e84:	72da      	strb	r2, [r3, #11]
		Maze1.row[1] = 1;
 8001e86:	4b52      	ldr	r3, [pc, #328]	; (8001fd0 <colomnScanMaze2+0x23c>)
 8001e88:	2201      	movs	r2, #1
 8001e8a:	705a      	strb	r2, [r3, #1]
		Maze1.row[4] = 1;
 8001e8c:	4b50      	ldr	r3, [pc, #320]	; (8001fd0 <colomnScanMaze2+0x23c>)
 8001e8e:	2201      	movs	r2, #1
 8001e90:	711a      	strb	r2, [r3, #4]


		if(ball.xpos == flag_8ms){
 8001e92:	4b50      	ldr	r3, [pc, #320]	; (8001fd4 <colomnScanMaze2+0x240>)
 8001e94:	781a      	ldrb	r2, [r3, #0]
 8001e96:	4b4d      	ldr	r3, [pc, #308]	; (8001fcc <colomnScanMaze2+0x238>)
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d101      	bne.n	8001ea2 <colomnScanMaze2+0x10e>
			setBall();
 8001e9e:	f000 faf5 	bl	800248c <setBall>
		}
		if(endGoal.xpos == flag_8ms){
 8001ea2:	4b4d      	ldr	r3, [pc, #308]	; (8001fd8 <colomnScanMaze2+0x244>)
 8001ea4:	781a      	ldrb	r2, [r3, #0]
 8001ea6:	4b49      	ldr	r3, [pc, #292]	; (8001fcc <colomnScanMaze2+0x238>)
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	f040 8082 	bne.w	8001fb4 <colomnScanMaze2+0x220>
			setEndGoal();
 8001eb0:	f000 fb0c 	bl	80024cc <setEndGoal>
		}

		break ;
 8001eb4:	e07e      	b.n	8001fb4 <colomnScanMaze2+0x220>

	case 4 :resetElements();
 8001eb6:	f7ff fa99 	bl	80013ec <resetElements>
		Maze1.col[4] = 1;
 8001eba:	4b45      	ldr	r3, [pc, #276]	; (8001fd0 <colomnScanMaze2+0x23c>)
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	731a      	strb	r2, [r3, #12]
		Maze1.row[2] = 1;
 8001ec0:	4b43      	ldr	r3, [pc, #268]	; (8001fd0 <colomnScanMaze2+0x23c>)
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	709a      	strb	r2, [r3, #2]
		Maze1.row[4] = 1;
 8001ec6:	4b42      	ldr	r3, [pc, #264]	; (8001fd0 <colomnScanMaze2+0x23c>)
 8001ec8:	2201      	movs	r2, #1
 8001eca:	711a      	strb	r2, [r3, #4]
		Maze1.row[7] = 1;
 8001ecc:	4b40      	ldr	r3, [pc, #256]	; (8001fd0 <colomnScanMaze2+0x23c>)
 8001ece:	2201      	movs	r2, #1
 8001ed0:	71da      	strb	r2, [r3, #7]


		if(ball.xpos == flag_8ms){
 8001ed2:	4b40      	ldr	r3, [pc, #256]	; (8001fd4 <colomnScanMaze2+0x240>)
 8001ed4:	781a      	ldrb	r2, [r3, #0]
 8001ed6:	4b3d      	ldr	r3, [pc, #244]	; (8001fcc <colomnScanMaze2+0x238>)
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d101      	bne.n	8001ee2 <colomnScanMaze2+0x14e>
			setBall();
 8001ede:	f000 fad5 	bl	800248c <setBall>
		}
		if(endGoal.xpos == flag_8ms){
 8001ee2:	4b3d      	ldr	r3, [pc, #244]	; (8001fd8 <colomnScanMaze2+0x244>)
 8001ee4:	781a      	ldrb	r2, [r3, #0]
 8001ee6:	4b39      	ldr	r3, [pc, #228]	; (8001fcc <colomnScanMaze2+0x238>)
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d164      	bne.n	8001fb8 <colomnScanMaze2+0x224>
			setEndGoal();
 8001eee:	f000 faed 	bl	80024cc <setEndGoal>
		}

		break ;
 8001ef2:	e061      	b.n	8001fb8 <colomnScanMaze2+0x224>


	case 5 :resetElements();
 8001ef4:	f7ff fa7a 	bl	80013ec <resetElements>
		Maze1.col[5] = 1;
 8001ef8:	4b35      	ldr	r3, [pc, #212]	; (8001fd0 <colomnScanMaze2+0x23c>)
 8001efa:	2201      	movs	r2, #1
 8001efc:	735a      	strb	r2, [r3, #13]
		Maze1.row[1] =1;
 8001efe:	4b34      	ldr	r3, [pc, #208]	; (8001fd0 <colomnScanMaze2+0x23c>)
 8001f00:	2201      	movs	r2, #1
 8001f02:	705a      	strb	r2, [r3, #1]
		Maze1.row[4] =1;
 8001f04:	4b32      	ldr	r3, [pc, #200]	; (8001fd0 <colomnScanMaze2+0x23c>)
 8001f06:	2201      	movs	r2, #1
 8001f08:	711a      	strb	r2, [r3, #4]
		Maze1.row[5] =1;
 8001f0a:	4b31      	ldr	r3, [pc, #196]	; (8001fd0 <colomnScanMaze2+0x23c>)
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	715a      	strb	r2, [r3, #5]

		if(ball.xpos == flag_8ms){
 8001f10:	4b30      	ldr	r3, [pc, #192]	; (8001fd4 <colomnScanMaze2+0x240>)
 8001f12:	781a      	ldrb	r2, [r3, #0]
 8001f14:	4b2d      	ldr	r3, [pc, #180]	; (8001fcc <colomnScanMaze2+0x238>)
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d101      	bne.n	8001f20 <colomnScanMaze2+0x18c>
			setBall();
 8001f1c:	f000 fab6 	bl	800248c <setBall>
		}
		if(endGoal.xpos == flag_8ms){
 8001f20:	4b2d      	ldr	r3, [pc, #180]	; (8001fd8 <colomnScanMaze2+0x244>)
 8001f22:	781a      	ldrb	r2, [r3, #0]
 8001f24:	4b29      	ldr	r3, [pc, #164]	; (8001fcc <colomnScanMaze2+0x238>)
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d147      	bne.n	8001fbc <colomnScanMaze2+0x228>
			setEndGoal();
 8001f2c:	f000 face 	bl	80024cc <setEndGoal>
		}

		break ;
 8001f30:	e044      	b.n	8001fbc <colomnScanMaze2+0x228>



	case 6 :resetElements();
 8001f32:	f7ff fa5b 	bl	80013ec <resetElements>
		Maze1.col[6] = 1;
 8001f36:	4b26      	ldr	r3, [pc, #152]	; (8001fd0 <colomnScanMaze2+0x23c>)
 8001f38:	2201      	movs	r2, #1
 8001f3a:	739a      	strb	r2, [r3, #14]
		Maze1.row[1] = 1;
 8001f3c:	4b24      	ldr	r3, [pc, #144]	; (8001fd0 <colomnScanMaze2+0x23c>)
 8001f3e:	2201      	movs	r2, #1
 8001f40:	705a      	strb	r2, [r3, #1]
		Maze1.row[3] = 1;
 8001f42:	4b23      	ldr	r3, [pc, #140]	; (8001fd0 <colomnScanMaze2+0x23c>)
 8001f44:	2201      	movs	r2, #1
 8001f46:	70da      	strb	r2, [r3, #3]
		Maze1.row[5] = 1;
 8001f48:	4b21      	ldr	r3, [pc, #132]	; (8001fd0 <colomnScanMaze2+0x23c>)
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	715a      	strb	r2, [r3, #5]
		Maze1.row[6] = 1;
 8001f4e:	4b20      	ldr	r3, [pc, #128]	; (8001fd0 <colomnScanMaze2+0x23c>)
 8001f50:	2201      	movs	r2, #1
 8001f52:	719a      	strb	r2, [r3, #6]

		if(ball.xpos == flag_8ms){
 8001f54:	4b1f      	ldr	r3, [pc, #124]	; (8001fd4 <colomnScanMaze2+0x240>)
 8001f56:	781a      	ldrb	r2, [r3, #0]
 8001f58:	4b1c      	ldr	r3, [pc, #112]	; (8001fcc <colomnScanMaze2+0x238>)
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d101      	bne.n	8001f64 <colomnScanMaze2+0x1d0>
			setBall();
 8001f60:	f000 fa94 	bl	800248c <setBall>
		}
		if(endGoal.xpos == flag_8ms){
 8001f64:	4b1c      	ldr	r3, [pc, #112]	; (8001fd8 <colomnScanMaze2+0x244>)
 8001f66:	781a      	ldrb	r2, [r3, #0]
 8001f68:	4b18      	ldr	r3, [pc, #96]	; (8001fcc <colomnScanMaze2+0x238>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d127      	bne.n	8001fc0 <colomnScanMaze2+0x22c>
			setEndGoal();
 8001f70:	f000 faac 	bl	80024cc <setEndGoal>
		}

		break ;
 8001f74:	e024      	b.n	8001fc0 <colomnScanMaze2+0x22c>


	case 7 :resetElements();
 8001f76:	f7ff fa39 	bl	80013ec <resetElements>
		Maze1.col[7] = 1;
 8001f7a:	4b15      	ldr	r3, [pc, #84]	; (8001fd0 <colomnScanMaze2+0x23c>)
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	73da      	strb	r2, [r3, #15]
		Maze1.row[3] = 1;
 8001f80:	4b13      	ldr	r3, [pc, #76]	; (8001fd0 <colomnScanMaze2+0x23c>)
 8001f82:	2201      	movs	r2, #1
 8001f84:	70da      	strb	r2, [r3, #3]

		if(ball.xpos == flag_8ms){
 8001f86:	4b13      	ldr	r3, [pc, #76]	; (8001fd4 <colomnScanMaze2+0x240>)
 8001f88:	781a      	ldrb	r2, [r3, #0]
 8001f8a:	4b10      	ldr	r3, [pc, #64]	; (8001fcc <colomnScanMaze2+0x238>)
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d101      	bne.n	8001f96 <colomnScanMaze2+0x202>
			setBall();
 8001f92:	f000 fa7b 	bl	800248c <setBall>
		}
		if(endGoal.xpos == flag_8ms){
 8001f96:	4b10      	ldr	r3, [pc, #64]	; (8001fd8 <colomnScanMaze2+0x244>)
 8001f98:	781a      	ldrb	r2, [r3, #0]
 8001f9a:	4b0c      	ldr	r3, [pc, #48]	; (8001fcc <colomnScanMaze2+0x238>)
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d110      	bne.n	8001fc4 <colomnScanMaze2+0x230>
			setEndGoal();
 8001fa2:	f000 fa93 	bl	80024cc <setEndGoal>
		}

		break ;
 8001fa6:	e00d      	b.n	8001fc4 <colomnScanMaze2+0x230>
		break;
 8001fa8:	bf00      	nop
 8001faa:	e00c      	b.n	8001fc6 <colomnScanMaze2+0x232>
		break;
 8001fac:	bf00      	nop
 8001fae:	e00a      	b.n	8001fc6 <colomnScanMaze2+0x232>
		break;
 8001fb0:	bf00      	nop
 8001fb2:	e008      	b.n	8001fc6 <colomnScanMaze2+0x232>
		break ;
 8001fb4:	bf00      	nop
 8001fb6:	e006      	b.n	8001fc6 <colomnScanMaze2+0x232>
		break ;
 8001fb8:	bf00      	nop
 8001fba:	e004      	b.n	8001fc6 <colomnScanMaze2+0x232>
		break ;
 8001fbc:	bf00      	nop
 8001fbe:	e002      	b.n	8001fc6 <colomnScanMaze2+0x232>
		break ;
 8001fc0:	bf00      	nop
 8001fc2:	e000      	b.n	8001fc6 <colomnScanMaze2+0x232>
		break ;
 8001fc4:	bf00      	nop
	}
}
 8001fc6:	bf00      	nop
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	2000008b 	.word	0x2000008b
 8001fd0:	20000194 	.word	0x20000194
 8001fd4:	20000044 	.word	0x20000044
 8001fd8:	20000048 	.word	0x20000048

08001fdc <colomnScanMaze3>:
void colomnScanMaze3(){
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0

	switch (flag_8ms)
 8001fe0:	4b90      	ldr	r3, [pc, #576]	; (8002224 <colomnScanMaze3+0x248>)
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	2b07      	cmp	r3, #7
 8001fe6:	f200 811b 	bhi.w	8002220 <colomnScanMaze3+0x244>
 8001fea:	a201      	add	r2, pc, #4	; (adr r2, 8001ff0 <colomnScanMaze3+0x14>)
 8001fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ff0:	08002011 	.word	0x08002011
 8001ff4:	08002045 	.word	0x08002045
 8001ff8:	08002085 	.word	0x08002085
 8001ffc:	080020c5 	.word	0x080020c5
 8002000:	080020ff 	.word	0x080020ff
 8002004:	08002155 	.word	0x08002155
 8002008:	08002187 	.word	0x08002187
 800200c:	080021d1 	.word	0x080021d1
	{
	case 0 :resetElements();
 8002010:	f7ff f9ec 	bl	80013ec <resetElements>
		Maze1.col[0] = 1;
 8002014:	4b84      	ldr	r3, [pc, #528]	; (8002228 <colomnScanMaze3+0x24c>)
 8002016:	2201      	movs	r2, #1
 8002018:	721a      	strb	r2, [r3, #8]
		Maze1.row[3] = 1;
 800201a:	4b83      	ldr	r3, [pc, #524]	; (8002228 <colomnScanMaze3+0x24c>)
 800201c:	2201      	movs	r2, #1
 800201e:	70da      	strb	r2, [r3, #3]

		if(ball.xpos == flag_8ms){
 8002020:	4b82      	ldr	r3, [pc, #520]	; (800222c <colomnScanMaze3+0x250>)
 8002022:	781a      	ldrb	r2, [r3, #0]
 8002024:	4b7f      	ldr	r3, [pc, #508]	; (8002224 <colomnScanMaze3+0x248>)
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	429a      	cmp	r2, r3
 800202a:	d101      	bne.n	8002030 <colomnScanMaze3+0x54>
			setBall();
 800202c:	f000 fa2e 	bl	800248c <setBall>

		}
		if(endGoal.xpos == flag_8ms){
 8002030:	4b7f      	ldr	r3, [pc, #508]	; (8002230 <colomnScanMaze3+0x254>)
 8002032:	781a      	ldrb	r2, [r3, #0]
 8002034:	4b7b      	ldr	r3, [pc, #492]	; (8002224 <colomnScanMaze3+0x248>)
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	429a      	cmp	r2, r3
 800203a:	f040 80e2 	bne.w	8002202 <colomnScanMaze3+0x226>
			setEndGoal();
 800203e:	f000 fa45 	bl	80024cc <setEndGoal>
		}
		break;
 8002042:	e0de      	b.n	8002202 <colomnScanMaze3+0x226>


	case 1 :resetElements();
 8002044:	f7ff f9d2 	bl	80013ec <resetElements>
		Maze1.col[1] = 1;
 8002048:	4b77      	ldr	r3, [pc, #476]	; (8002228 <colomnScanMaze3+0x24c>)
 800204a:	2201      	movs	r2, #1
 800204c:	725a      	strb	r2, [r3, #9]
		Maze1.row[1] = 1;
 800204e:	4b76      	ldr	r3, [pc, #472]	; (8002228 <colomnScanMaze3+0x24c>)
 8002050:	2201      	movs	r2, #1
 8002052:	705a      	strb	r2, [r3, #1]
		Maze1.row[5] = 1;
 8002054:	4b74      	ldr	r3, [pc, #464]	; (8002228 <colomnScanMaze3+0x24c>)
 8002056:	2201      	movs	r2, #1
 8002058:	715a      	strb	r2, [r3, #5]
		Maze1.row[6] = 1;
 800205a:	4b73      	ldr	r3, [pc, #460]	; (8002228 <colomnScanMaze3+0x24c>)
 800205c:	2201      	movs	r2, #1
 800205e:	719a      	strb	r2, [r3, #6]

		if(ball.xpos == flag_8ms){
 8002060:	4b72      	ldr	r3, [pc, #456]	; (800222c <colomnScanMaze3+0x250>)
 8002062:	781a      	ldrb	r2, [r3, #0]
 8002064:	4b6f      	ldr	r3, [pc, #444]	; (8002224 <colomnScanMaze3+0x248>)
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	429a      	cmp	r2, r3
 800206a:	d101      	bne.n	8002070 <colomnScanMaze3+0x94>
			setBall();
 800206c:	f000 fa0e 	bl	800248c <setBall>
		}
		if(endGoal.xpos == flag_8ms){
 8002070:	4b6f      	ldr	r3, [pc, #444]	; (8002230 <colomnScanMaze3+0x254>)
 8002072:	781a      	ldrb	r2, [r3, #0]
 8002074:	4b6b      	ldr	r3, [pc, #428]	; (8002224 <colomnScanMaze3+0x248>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	429a      	cmp	r2, r3
 800207a:	f040 80c4 	bne.w	8002206 <colomnScanMaze3+0x22a>
			setEndGoal();
 800207e:	f000 fa25 	bl	80024cc <setEndGoal>
		}

		break;
 8002082:	e0c0      	b.n	8002206 <colomnScanMaze3+0x22a>

	case 2 :resetElements();
 8002084:	f7ff f9b2 	bl	80013ec <resetElements>
		Maze1.col[2] = 1;
 8002088:	4b67      	ldr	r3, [pc, #412]	; (8002228 <colomnScanMaze3+0x24c>)
 800208a:	2201      	movs	r2, #1
 800208c:	729a      	strb	r2, [r3, #10]
		Maze1.row[2] = 1;
 800208e:	4b66      	ldr	r3, [pc, #408]	; (8002228 <colomnScanMaze3+0x24c>)
 8002090:	2201      	movs	r2, #1
 8002092:	709a      	strb	r2, [r3, #2]
		Maze1.row[3] = 1;
 8002094:	4b64      	ldr	r3, [pc, #400]	; (8002228 <colomnScanMaze3+0x24c>)
 8002096:	2201      	movs	r2, #1
 8002098:	70da      	strb	r2, [r3, #3]
		Maze1.row[4] = 1;
 800209a:	4b63      	ldr	r3, [pc, #396]	; (8002228 <colomnScanMaze3+0x24c>)
 800209c:	2201      	movs	r2, #1
 800209e:	711a      	strb	r2, [r3, #4]

		if(ball.xpos == flag_8ms){
 80020a0:	4b62      	ldr	r3, [pc, #392]	; (800222c <colomnScanMaze3+0x250>)
 80020a2:	781a      	ldrb	r2, [r3, #0]
 80020a4:	4b5f      	ldr	r3, [pc, #380]	; (8002224 <colomnScanMaze3+0x248>)
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d101      	bne.n	80020b0 <colomnScanMaze3+0xd4>
			setBall();
 80020ac:	f000 f9ee 	bl	800248c <setBall>
		}
		if(endGoal.xpos == flag_8ms){
 80020b0:	4b5f      	ldr	r3, [pc, #380]	; (8002230 <colomnScanMaze3+0x254>)
 80020b2:	781a      	ldrb	r2, [r3, #0]
 80020b4:	4b5b      	ldr	r3, [pc, #364]	; (8002224 <colomnScanMaze3+0x248>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	f040 80a6 	bne.w	800220a <colomnScanMaze3+0x22e>
			setEndGoal();
 80020be:	f000 fa05 	bl	80024cc <setEndGoal>
		}

		break;
 80020c2:	e0a2      	b.n	800220a <colomnScanMaze3+0x22e>


	case 3 :resetElements();
 80020c4:	f7ff f992 	bl	80013ec <resetElements>
		Maze1.col[3] = 1;
 80020c8:	4b57      	ldr	r3, [pc, #348]	; (8002228 <colomnScanMaze3+0x24c>)
 80020ca:	2201      	movs	r2, #1
 80020cc:	72da      	strb	r2, [r3, #11]
		Maze1.row[0] = 1;
 80020ce:	4b56      	ldr	r3, [pc, #344]	; (8002228 <colomnScanMaze3+0x24c>)
 80020d0:	2201      	movs	r2, #1
 80020d2:	701a      	strb	r2, [r3, #0]
		Maze1.row[6] = 1;
 80020d4:	4b54      	ldr	r3, [pc, #336]	; (8002228 <colomnScanMaze3+0x24c>)
 80020d6:	2201      	movs	r2, #1
 80020d8:	719a      	strb	r2, [r3, #6]


		if(ball.xpos == flag_8ms){
 80020da:	4b54      	ldr	r3, [pc, #336]	; (800222c <colomnScanMaze3+0x250>)
 80020dc:	781a      	ldrb	r2, [r3, #0]
 80020de:	4b51      	ldr	r3, [pc, #324]	; (8002224 <colomnScanMaze3+0x248>)
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d101      	bne.n	80020ea <colomnScanMaze3+0x10e>
			setBall();
 80020e6:	f000 f9d1 	bl	800248c <setBall>
		}
		if(endGoal.xpos == flag_8ms){
 80020ea:	4b51      	ldr	r3, [pc, #324]	; (8002230 <colomnScanMaze3+0x254>)
 80020ec:	781a      	ldrb	r2, [r3, #0]
 80020ee:	4b4d      	ldr	r3, [pc, #308]	; (8002224 <colomnScanMaze3+0x248>)
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	f040 808b 	bne.w	800220e <colomnScanMaze3+0x232>
			setEndGoal();
 80020f8:	f000 f9e8 	bl	80024cc <setEndGoal>
		}

		break ;
 80020fc:	e087      	b.n	800220e <colomnScanMaze3+0x232>

	case 4 :resetElements();
 80020fe:	f7ff f975 	bl	80013ec <resetElements>
		Maze1.col[4] = 1;
 8002102:	4b49      	ldr	r3, [pc, #292]	; (8002228 <colomnScanMaze3+0x24c>)
 8002104:	2201      	movs	r2, #1
 8002106:	731a      	strb	r2, [r3, #12]
		Maze1.row[0] = 1;
 8002108:	4b47      	ldr	r3, [pc, #284]	; (8002228 <colomnScanMaze3+0x24c>)
 800210a:	2201      	movs	r2, #1
 800210c:	701a      	strb	r2, [r3, #0]
		Maze1.row[1] = 1;
 800210e:	4b46      	ldr	r3, [pc, #280]	; (8002228 <colomnScanMaze3+0x24c>)
 8002110:	2201      	movs	r2, #1
 8002112:	705a      	strb	r2, [r3, #1]
		Maze1.row[2] = 1;
 8002114:	4b44      	ldr	r3, [pc, #272]	; (8002228 <colomnScanMaze3+0x24c>)
 8002116:	2201      	movs	r2, #1
 8002118:	709a      	strb	r2, [r3, #2]
		Maze1.row[4] = 1;
 800211a:	4b43      	ldr	r3, [pc, #268]	; (8002228 <colomnScanMaze3+0x24c>)
 800211c:	2201      	movs	r2, #1
 800211e:	711a      	strb	r2, [r3, #4]
		Maze1.row[5] = 1;
 8002120:	4b41      	ldr	r3, [pc, #260]	; (8002228 <colomnScanMaze3+0x24c>)
 8002122:	2201      	movs	r2, #1
 8002124:	715a      	strb	r2, [r3, #5]
		Maze1.row[6] = 1;
 8002126:	4b40      	ldr	r3, [pc, #256]	; (8002228 <colomnScanMaze3+0x24c>)
 8002128:	2201      	movs	r2, #1
 800212a:	719a      	strb	r2, [r3, #6]
		Maze1.row[7] = 1;
 800212c:	4b3e      	ldr	r3, [pc, #248]	; (8002228 <colomnScanMaze3+0x24c>)
 800212e:	2201      	movs	r2, #1
 8002130:	71da      	strb	r2, [r3, #7]

		if(ball.xpos == flag_8ms){
 8002132:	4b3e      	ldr	r3, [pc, #248]	; (800222c <colomnScanMaze3+0x250>)
 8002134:	781a      	ldrb	r2, [r3, #0]
 8002136:	4b3b      	ldr	r3, [pc, #236]	; (8002224 <colomnScanMaze3+0x248>)
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	429a      	cmp	r2, r3
 800213c:	d101      	bne.n	8002142 <colomnScanMaze3+0x166>
			setBall();
 800213e:	f000 f9a5 	bl	800248c <setBall>
		}
		if(endGoal.xpos == flag_8ms){
 8002142:	4b3b      	ldr	r3, [pc, #236]	; (8002230 <colomnScanMaze3+0x254>)
 8002144:	781a      	ldrb	r2, [r3, #0]
 8002146:	4b37      	ldr	r3, [pc, #220]	; (8002224 <colomnScanMaze3+0x248>)
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	429a      	cmp	r2, r3
 800214c:	d161      	bne.n	8002212 <colomnScanMaze3+0x236>
			setEndGoal();
 800214e:	f000 f9bd 	bl	80024cc <setEndGoal>
		}

		break ;
 8002152:	e05e      	b.n	8002212 <colomnScanMaze3+0x236>


	case 5 :resetElements();
 8002154:	f7ff f94a 	bl	80013ec <resetElements>
		Maze1.col[5] = 1;
 8002158:	4b33      	ldr	r3, [pc, #204]	; (8002228 <colomnScanMaze3+0x24c>)
 800215a:	2201      	movs	r2, #1
 800215c:	735a      	strb	r2, [r3, #13]
		Maze1.row[4] = 1;
 800215e:	4b32      	ldr	r3, [pc, #200]	; (8002228 <colomnScanMaze3+0x24c>)
 8002160:	2201      	movs	r2, #1
 8002162:	711a      	strb	r2, [r3, #4]

		if(ball.xpos == flag_8ms){
 8002164:	4b31      	ldr	r3, [pc, #196]	; (800222c <colomnScanMaze3+0x250>)
 8002166:	781a      	ldrb	r2, [r3, #0]
 8002168:	4b2e      	ldr	r3, [pc, #184]	; (8002224 <colomnScanMaze3+0x248>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	429a      	cmp	r2, r3
 800216e:	d101      	bne.n	8002174 <colomnScanMaze3+0x198>
			setBall();
 8002170:	f000 f98c 	bl	800248c <setBall>
		}
		if(endGoal.xpos == flag_8ms){
 8002174:	4b2e      	ldr	r3, [pc, #184]	; (8002230 <colomnScanMaze3+0x254>)
 8002176:	781a      	ldrb	r2, [r3, #0]
 8002178:	4b2a      	ldr	r3, [pc, #168]	; (8002224 <colomnScanMaze3+0x248>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	429a      	cmp	r2, r3
 800217e:	d14a      	bne.n	8002216 <colomnScanMaze3+0x23a>
			setEndGoal();
 8002180:	f000 f9a4 	bl	80024cc <setEndGoal>
		}

		break ;
 8002184:	e047      	b.n	8002216 <colomnScanMaze3+0x23a>



	case 6 :resetElements();
 8002186:	f7ff f931 	bl	80013ec <resetElements>
		Maze1.col[6] = 1;
 800218a:	4b27      	ldr	r3, [pc, #156]	; (8002228 <colomnScanMaze3+0x24c>)
 800218c:	2201      	movs	r2, #1
 800218e:	739a      	strb	r2, [r3, #14]
		Maze1.row[1] = 1;
 8002190:	4b25      	ldr	r3, [pc, #148]	; (8002228 <colomnScanMaze3+0x24c>)
 8002192:	2201      	movs	r2, #1
 8002194:	705a      	strb	r2, [r3, #1]
		Maze1.row[2] = 1;
 8002196:	4b24      	ldr	r3, [pc, #144]	; (8002228 <colomnScanMaze3+0x24c>)
 8002198:	2201      	movs	r2, #1
 800219a:	709a      	strb	r2, [r3, #2]
		Maze1.row[3] = 1;
 800219c:	4b22      	ldr	r3, [pc, #136]	; (8002228 <colomnScanMaze3+0x24c>)
 800219e:	2201      	movs	r2, #1
 80021a0:	70da      	strb	r2, [r3, #3]
		Maze1.row[4] = 1;
 80021a2:	4b21      	ldr	r3, [pc, #132]	; (8002228 <colomnScanMaze3+0x24c>)
 80021a4:	2201      	movs	r2, #1
 80021a6:	711a      	strb	r2, [r3, #4]
		Maze1.row[6] = 1;
 80021a8:	4b1f      	ldr	r3, [pc, #124]	; (8002228 <colomnScanMaze3+0x24c>)
 80021aa:	2201      	movs	r2, #1
 80021ac:	719a      	strb	r2, [r3, #6]

		if(ball.xpos == flag_8ms){
 80021ae:	4b1f      	ldr	r3, [pc, #124]	; (800222c <colomnScanMaze3+0x250>)
 80021b0:	781a      	ldrb	r2, [r3, #0]
 80021b2:	4b1c      	ldr	r3, [pc, #112]	; (8002224 <colomnScanMaze3+0x248>)
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d101      	bne.n	80021be <colomnScanMaze3+0x1e2>
			setBall();
 80021ba:	f000 f967 	bl	800248c <setBall>
		}
		if(endGoal.xpos == flag_8ms){
 80021be:	4b1c      	ldr	r3, [pc, #112]	; (8002230 <colomnScanMaze3+0x254>)
 80021c0:	781a      	ldrb	r2, [r3, #0]
 80021c2:	4b18      	ldr	r3, [pc, #96]	; (8002224 <colomnScanMaze3+0x248>)
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d127      	bne.n	800221a <colomnScanMaze3+0x23e>
			setEndGoal();
 80021ca:	f000 f97f 	bl	80024cc <setEndGoal>
		}

		break ;
 80021ce:	e024      	b.n	800221a <colomnScanMaze3+0x23e>


	case 7 :resetElements();
 80021d0:	f7ff f90c 	bl	80013ec <resetElements>
		Maze1.col[7] = 1;
 80021d4:	4b14      	ldr	r3, [pc, #80]	; (8002228 <colomnScanMaze3+0x24c>)
 80021d6:	2201      	movs	r2, #1
 80021d8:	73da      	strb	r2, [r3, #15]
		Maze1.row[6] = 1;
 80021da:	4b13      	ldr	r3, [pc, #76]	; (8002228 <colomnScanMaze3+0x24c>)
 80021dc:	2201      	movs	r2, #1
 80021de:	719a      	strb	r2, [r3, #6]

		if(ball.xpos == flag_8ms){
 80021e0:	4b12      	ldr	r3, [pc, #72]	; (800222c <colomnScanMaze3+0x250>)
 80021e2:	781a      	ldrb	r2, [r3, #0]
 80021e4:	4b0f      	ldr	r3, [pc, #60]	; (8002224 <colomnScanMaze3+0x248>)
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d101      	bne.n	80021f0 <colomnScanMaze3+0x214>
			setBall();
 80021ec:	f000 f94e 	bl	800248c <setBall>
		}
		if(endGoal.xpos == flag_8ms){
 80021f0:	4b0f      	ldr	r3, [pc, #60]	; (8002230 <colomnScanMaze3+0x254>)
 80021f2:	781a      	ldrb	r2, [r3, #0]
 80021f4:	4b0b      	ldr	r3, [pc, #44]	; (8002224 <colomnScanMaze3+0x248>)
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d110      	bne.n	800221e <colomnScanMaze3+0x242>
			setEndGoal();
 80021fc:	f000 f966 	bl	80024cc <setEndGoal>
		}

		break ;
 8002200:	e00d      	b.n	800221e <colomnScanMaze3+0x242>
		break;
 8002202:	bf00      	nop
 8002204:	e00c      	b.n	8002220 <colomnScanMaze3+0x244>
		break;
 8002206:	bf00      	nop
 8002208:	e00a      	b.n	8002220 <colomnScanMaze3+0x244>
		break;
 800220a:	bf00      	nop
 800220c:	e008      	b.n	8002220 <colomnScanMaze3+0x244>
		break ;
 800220e:	bf00      	nop
 8002210:	e006      	b.n	8002220 <colomnScanMaze3+0x244>
		break ;
 8002212:	bf00      	nop
 8002214:	e004      	b.n	8002220 <colomnScanMaze3+0x244>
		break ;
 8002216:	bf00      	nop
 8002218:	e002      	b.n	8002220 <colomnScanMaze3+0x244>
		break ;
 800221a:	bf00      	nop
 800221c:	e000      	b.n	8002220 <colomnScanMaze3+0x244>
		break ;
 800221e:	bf00      	nop
	}
}
 8002220:	bf00      	nop
 8002222:	bd80      	pop	{r7, pc}
 8002224:	2000008b 	.word	0x2000008b
 8002228:	20000194 	.word	0x20000194
 800222c:	20000044 	.word	0x20000044
 8002230:	20000048 	.word	0x20000048

08002234 <colomnScanMaze4>:
void colomnScanMaze4(){
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0

	switch (flag_8ms)
 8002238:	4b90      	ldr	r3, [pc, #576]	; (800247c <colomnScanMaze4+0x248>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	2b07      	cmp	r3, #7
 800223e:	f200 811a 	bhi.w	8002476 <colomnScanMaze4+0x242>
 8002242:	a201      	add	r2, pc, #4	; (adr r2, 8002248 <colomnScanMaze4+0x14>)
 8002244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002248:	08002269 	.word	0x08002269
 800224c:	0800229d 	.word	0x0800229d
 8002250:	080022ef 	.word	0x080022ef
 8002254:	08002329 	.word	0x08002329
 8002258:	0800236d 	.word	0x0800236d
 800225c:	080023ab 	.word	0x080023ab
 8002260:	080023e9 	.word	0x080023e9
 8002264:	08002427 	.word	0x08002427
	{
	case 0 :resetElements();
 8002268:	f7ff f8c0 	bl	80013ec <resetElements>
		Maze1.col[0] = 1;
 800226c:	4b84      	ldr	r3, [pc, #528]	; (8002480 <colomnScanMaze4+0x24c>)
 800226e:	2201      	movs	r2, #1
 8002270:	721a      	strb	r2, [r3, #8]
		Maze1.row[6] = 1;
 8002272:	4b83      	ldr	r3, [pc, #524]	; (8002480 <colomnScanMaze4+0x24c>)
 8002274:	2201      	movs	r2, #1
 8002276:	719a      	strb	r2, [r3, #6]

		if(ball.xpos == flag_8ms){
 8002278:	4b82      	ldr	r3, [pc, #520]	; (8002484 <colomnScanMaze4+0x250>)
 800227a:	781a      	ldrb	r2, [r3, #0]
 800227c:	4b7f      	ldr	r3, [pc, #508]	; (800247c <colomnScanMaze4+0x248>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	429a      	cmp	r2, r3
 8002282:	d101      	bne.n	8002288 <colomnScanMaze4+0x54>
			setBall();
 8002284:	f000 f902 	bl	800248c <setBall>

		}
		if(endGoal.xpos == flag_8ms){
 8002288:	4b7f      	ldr	r3, [pc, #508]	; (8002488 <colomnScanMaze4+0x254>)
 800228a:	781a      	ldrb	r2, [r3, #0]
 800228c:	4b7b      	ldr	r3, [pc, #492]	; (800247c <colomnScanMaze4+0x248>)
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	429a      	cmp	r2, r3
 8002292:	f040 80e1 	bne.w	8002458 <colomnScanMaze4+0x224>
			setEndGoal();
 8002296:	f000 f919 	bl	80024cc <setEndGoal>
		}
		break;
 800229a:	e0dd      	b.n	8002458 <colomnScanMaze4+0x224>


	case 1 :resetElements();
 800229c:	f7ff f8a6 	bl	80013ec <resetElements>
		Maze1.col[1] = 1;
 80022a0:	4b77      	ldr	r3, [pc, #476]	; (8002480 <colomnScanMaze4+0x24c>)
 80022a2:	2201      	movs	r2, #1
 80022a4:	725a      	strb	r2, [r3, #9]
		Maze1.row[0] = 1;
 80022a6:	4b76      	ldr	r3, [pc, #472]	; (8002480 <colomnScanMaze4+0x24c>)
 80022a8:	2201      	movs	r2, #1
 80022aa:	701a      	strb	r2, [r3, #0]
		Maze1.row[1] = 1;
 80022ac:	4b74      	ldr	r3, [pc, #464]	; (8002480 <colomnScanMaze4+0x24c>)
 80022ae:	2201      	movs	r2, #1
 80022b0:	705a      	strb	r2, [r3, #1]
		Maze1.row[2] = 1;
 80022b2:	4b73      	ldr	r3, [pc, #460]	; (8002480 <colomnScanMaze4+0x24c>)
 80022b4:	2201      	movs	r2, #1
 80022b6:	709a      	strb	r2, [r3, #2]
		Maze1.row[3] = 1;
 80022b8:	4b71      	ldr	r3, [pc, #452]	; (8002480 <colomnScanMaze4+0x24c>)
 80022ba:	2201      	movs	r2, #1
 80022bc:	70da      	strb	r2, [r3, #3]
		Maze1.row[4] = 1;
 80022be:	4b70      	ldr	r3, [pc, #448]	; (8002480 <colomnScanMaze4+0x24c>)
 80022c0:	2201      	movs	r2, #1
 80022c2:	711a      	strb	r2, [r3, #4]
		Maze1.row[6] = 1;
 80022c4:	4b6e      	ldr	r3, [pc, #440]	; (8002480 <colomnScanMaze4+0x24c>)
 80022c6:	2201      	movs	r2, #1
 80022c8:	719a      	strb	r2, [r3, #6]

		if(ball.xpos == flag_8ms){
 80022ca:	4b6e      	ldr	r3, [pc, #440]	; (8002484 <colomnScanMaze4+0x250>)
 80022cc:	781a      	ldrb	r2, [r3, #0]
 80022ce:	4b6b      	ldr	r3, [pc, #428]	; (800247c <colomnScanMaze4+0x248>)
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d101      	bne.n	80022da <colomnScanMaze4+0xa6>
			setBall();
 80022d6:	f000 f8d9 	bl	800248c <setBall>
		}
		if(endGoal.xpos == flag_8ms){
 80022da:	4b6b      	ldr	r3, [pc, #428]	; (8002488 <colomnScanMaze4+0x254>)
 80022dc:	781a      	ldrb	r2, [r3, #0]
 80022de:	4b67      	ldr	r3, [pc, #412]	; (800247c <colomnScanMaze4+0x248>)
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	f040 80ba 	bne.w	800245c <colomnScanMaze4+0x228>
			setEndGoal();
 80022e8:	f000 f8f0 	bl	80024cc <setEndGoal>
		}

		break;
 80022ec:	e0b6      	b.n	800245c <colomnScanMaze4+0x228>

	case 2 :resetElements();
 80022ee:	f7ff f87d 	bl	80013ec <resetElements>
		Maze1.col[2] = 1;
 80022f2:	4b63      	ldr	r3, [pc, #396]	; (8002480 <colomnScanMaze4+0x24c>)
 80022f4:	2201      	movs	r2, #1
 80022f6:	729a      	strb	r2, [r3, #10]
		Maze1.row[2] = 1;
 80022f8:	4b61      	ldr	r3, [pc, #388]	; (8002480 <colomnScanMaze4+0x24c>)
 80022fa:	2201      	movs	r2, #1
 80022fc:	709a      	strb	r2, [r3, #2]
		Maze1.row[6] = 1;
 80022fe:	4b60      	ldr	r3, [pc, #384]	; (8002480 <colomnScanMaze4+0x24c>)
 8002300:	2201      	movs	r2, #1
 8002302:	719a      	strb	r2, [r3, #6]

		if(ball.xpos == flag_8ms){
 8002304:	4b5f      	ldr	r3, [pc, #380]	; (8002484 <colomnScanMaze4+0x250>)
 8002306:	781a      	ldrb	r2, [r3, #0]
 8002308:	4b5c      	ldr	r3, [pc, #368]	; (800247c <colomnScanMaze4+0x248>)
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	429a      	cmp	r2, r3
 800230e:	d101      	bne.n	8002314 <colomnScanMaze4+0xe0>
			setBall();
 8002310:	f000 f8bc 	bl	800248c <setBall>
		}
		if(endGoal.xpos == flag_8ms){
 8002314:	4b5c      	ldr	r3, [pc, #368]	; (8002488 <colomnScanMaze4+0x254>)
 8002316:	781a      	ldrb	r2, [r3, #0]
 8002318:	4b58      	ldr	r3, [pc, #352]	; (800247c <colomnScanMaze4+0x248>)
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	429a      	cmp	r2, r3
 800231e:	f040 809f 	bne.w	8002460 <colomnScanMaze4+0x22c>
			setEndGoal();
 8002322:	f000 f8d3 	bl	80024cc <setEndGoal>
		}

		break;
 8002326:	e09b      	b.n	8002460 <colomnScanMaze4+0x22c>


	case 3 :resetElements();
 8002328:	f7ff f860 	bl	80013ec <resetElements>
		Maze1.col[3] = 1;
 800232c:	4b54      	ldr	r3, [pc, #336]	; (8002480 <colomnScanMaze4+0x24c>)
 800232e:	2201      	movs	r2, #1
 8002330:	72da      	strb	r2, [r3, #11]
		Maze1.row[0] = 1;
 8002332:	4b53      	ldr	r3, [pc, #332]	; (8002480 <colomnScanMaze4+0x24c>)
 8002334:	2201      	movs	r2, #1
 8002336:	701a      	strb	r2, [r3, #0]
		Maze1.row[2] = 1;
 8002338:	4b51      	ldr	r3, [pc, #324]	; (8002480 <colomnScanMaze4+0x24c>)
 800233a:	2201      	movs	r2, #1
 800233c:	709a      	strb	r2, [r3, #2]
		Maze1.row[4] = 1;
 800233e:	4b50      	ldr	r3, [pc, #320]	; (8002480 <colomnScanMaze4+0x24c>)
 8002340:	2201      	movs	r2, #1
 8002342:	711a      	strb	r2, [r3, #4]
		Maze1.row[6] = 1;
 8002344:	4b4e      	ldr	r3, [pc, #312]	; (8002480 <colomnScanMaze4+0x24c>)
 8002346:	2201      	movs	r2, #1
 8002348:	719a      	strb	r2, [r3, #6]

		if(ball.xpos == flag_8ms){
 800234a:	4b4e      	ldr	r3, [pc, #312]	; (8002484 <colomnScanMaze4+0x250>)
 800234c:	781a      	ldrb	r2, [r3, #0]
 800234e:	4b4b      	ldr	r3, [pc, #300]	; (800247c <colomnScanMaze4+0x248>)
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	429a      	cmp	r2, r3
 8002354:	d101      	bne.n	800235a <colomnScanMaze4+0x126>
			setBall();
 8002356:	f000 f899 	bl	800248c <setBall>
		}
		if(endGoal.xpos == flag_8ms){
 800235a:	4b4b      	ldr	r3, [pc, #300]	; (8002488 <colomnScanMaze4+0x254>)
 800235c:	781a      	ldrb	r2, [r3, #0]
 800235e:	4b47      	ldr	r3, [pc, #284]	; (800247c <colomnScanMaze4+0x248>)
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	429a      	cmp	r2, r3
 8002364:	d17e      	bne.n	8002464 <colomnScanMaze4+0x230>
			setEndGoal();
 8002366:	f000 f8b1 	bl	80024cc <setEndGoal>
		}

		break ;
 800236a:	e07b      	b.n	8002464 <colomnScanMaze4+0x230>

	case 4 :resetElements();
 800236c:	f7ff f83e 	bl	80013ec <resetElements>
		Maze1.col[4] = 1;
 8002370:	4b43      	ldr	r3, [pc, #268]	; (8002480 <colomnScanMaze4+0x24c>)
 8002372:	2201      	movs	r2, #1
 8002374:	731a      	strb	r2, [r3, #12]
		Maze1.row[2] = 1;
 8002376:	4b42      	ldr	r3, [pc, #264]	; (8002480 <colomnScanMaze4+0x24c>)
 8002378:	2201      	movs	r2, #1
 800237a:	709a      	strb	r2, [r3, #2]
		Maze1.row[3] = 1;
 800237c:	4b40      	ldr	r3, [pc, #256]	; (8002480 <colomnScanMaze4+0x24c>)
 800237e:	2201      	movs	r2, #1
 8002380:	70da      	strb	r2, [r3, #3]
		Maze1.row[6] = 1;
 8002382:	4b3f      	ldr	r3, [pc, #252]	; (8002480 <colomnScanMaze4+0x24c>)
 8002384:	2201      	movs	r2, #1
 8002386:	719a      	strb	r2, [r3, #6]

		if(ball.xpos == flag_8ms){
 8002388:	4b3e      	ldr	r3, [pc, #248]	; (8002484 <colomnScanMaze4+0x250>)
 800238a:	781a      	ldrb	r2, [r3, #0]
 800238c:	4b3b      	ldr	r3, [pc, #236]	; (800247c <colomnScanMaze4+0x248>)
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	429a      	cmp	r2, r3
 8002392:	d101      	bne.n	8002398 <colomnScanMaze4+0x164>
			setBall();
 8002394:	f000 f87a 	bl	800248c <setBall>
		}
		if(endGoal.xpos == flag_8ms){
 8002398:	4b3b      	ldr	r3, [pc, #236]	; (8002488 <colomnScanMaze4+0x254>)
 800239a:	781a      	ldrb	r2, [r3, #0]
 800239c:	4b37      	ldr	r3, [pc, #220]	; (800247c <colomnScanMaze4+0x248>)
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d161      	bne.n	8002468 <colomnScanMaze4+0x234>
			setEndGoal();
 80023a4:	f000 f892 	bl	80024cc <setEndGoal>
		}

		break ;
 80023a8:	e05e      	b.n	8002468 <colomnScanMaze4+0x234>


	case 5 :resetElements();
 80023aa:	f7ff f81f 	bl	80013ec <resetElements>
		Maze1.col[5] = 1;
 80023ae:	4b34      	ldr	r3, [pc, #208]	; (8002480 <colomnScanMaze4+0x24c>)
 80023b0:	2201      	movs	r2, #1
 80023b2:	735a      	strb	r2, [r3, #13]
		Maze1.row[1] =1;
 80023b4:	4b32      	ldr	r3, [pc, #200]	; (8002480 <colomnScanMaze4+0x24c>)
 80023b6:	2201      	movs	r2, #1
 80023b8:	705a      	strb	r2, [r3, #1]
		Maze1.row[5] =1;
 80023ba:	4b31      	ldr	r3, [pc, #196]	; (8002480 <colomnScanMaze4+0x24c>)
 80023bc:	2201      	movs	r2, #1
 80023be:	715a      	strb	r2, [r3, #5]
		Maze1.row[6] =1;
 80023c0:	4b2f      	ldr	r3, [pc, #188]	; (8002480 <colomnScanMaze4+0x24c>)
 80023c2:	2201      	movs	r2, #1
 80023c4:	719a      	strb	r2, [r3, #6]

		if(ball.xpos == flag_8ms){
 80023c6:	4b2f      	ldr	r3, [pc, #188]	; (8002484 <colomnScanMaze4+0x250>)
 80023c8:	781a      	ldrb	r2, [r3, #0]
 80023ca:	4b2c      	ldr	r3, [pc, #176]	; (800247c <colomnScanMaze4+0x248>)
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d101      	bne.n	80023d6 <colomnScanMaze4+0x1a2>
			setBall();
 80023d2:	f000 f85b 	bl	800248c <setBall>
		}
		if(endGoal.xpos == flag_8ms){
 80023d6:	4b2c      	ldr	r3, [pc, #176]	; (8002488 <colomnScanMaze4+0x254>)
 80023d8:	781a      	ldrb	r2, [r3, #0]
 80023da:	4b28      	ldr	r3, [pc, #160]	; (800247c <colomnScanMaze4+0x248>)
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	429a      	cmp	r2, r3
 80023e0:	d144      	bne.n	800246c <colomnScanMaze4+0x238>
			setEndGoal();
 80023e2:	f000 f873 	bl	80024cc <setEndGoal>
		}

		break ;
 80023e6:	e041      	b.n	800246c <colomnScanMaze4+0x238>

	case 6 :resetElements();
 80023e8:	f7ff f800 	bl	80013ec <resetElements>
		Maze1.col[6] = 1;
 80023ec:	4b24      	ldr	r3, [pc, #144]	; (8002480 <colomnScanMaze4+0x24c>)
 80023ee:	2201      	movs	r2, #1
 80023f0:	739a      	strb	r2, [r3, #14]
		Maze1.row[1] = 1;
 80023f2:	4b23      	ldr	r3, [pc, #140]	; (8002480 <colomnScanMaze4+0x24c>)
 80023f4:	2201      	movs	r2, #1
 80023f6:	705a      	strb	r2, [r3, #1]
		Maze1.row[3] = 1;
 80023f8:	4b21      	ldr	r3, [pc, #132]	; (8002480 <colomnScanMaze4+0x24c>)
 80023fa:	2201      	movs	r2, #1
 80023fc:	70da      	strb	r2, [r3, #3]
		Maze1.row[4] = 1;
 80023fe:	4b20      	ldr	r3, [pc, #128]	; (8002480 <colomnScanMaze4+0x24c>)
 8002400:	2201      	movs	r2, #1
 8002402:	711a      	strb	r2, [r3, #4]

		if(ball.xpos == flag_8ms){
 8002404:	4b1f      	ldr	r3, [pc, #124]	; (8002484 <colomnScanMaze4+0x250>)
 8002406:	781a      	ldrb	r2, [r3, #0]
 8002408:	4b1c      	ldr	r3, [pc, #112]	; (800247c <colomnScanMaze4+0x248>)
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	429a      	cmp	r2, r3
 800240e:	d101      	bne.n	8002414 <colomnScanMaze4+0x1e0>
			setBall();
 8002410:	f000 f83c 	bl	800248c <setBall>
		}
		if(endGoal.xpos == flag_8ms){
 8002414:	4b1c      	ldr	r3, [pc, #112]	; (8002488 <colomnScanMaze4+0x254>)
 8002416:	781a      	ldrb	r2, [r3, #0]
 8002418:	4b18      	ldr	r3, [pc, #96]	; (800247c <colomnScanMaze4+0x248>)
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	429a      	cmp	r2, r3
 800241e:	d127      	bne.n	8002470 <colomnScanMaze4+0x23c>
			setEndGoal();
 8002420:	f000 f854 	bl	80024cc <setEndGoal>
		}

		break ;
 8002424:	e024      	b.n	8002470 <colomnScanMaze4+0x23c>


	case 7 :resetElements();
 8002426:	f7fe ffe1 	bl	80013ec <resetElements>
		Maze1.col[7] = 1;
 800242a:	4b15      	ldr	r3, [pc, #84]	; (8002480 <colomnScanMaze4+0x24c>)
 800242c:	2201      	movs	r2, #1
 800242e:	73da      	strb	r2, [r3, #15]
		Maze1.row[6] = 1;
 8002430:	4b13      	ldr	r3, [pc, #76]	; (8002480 <colomnScanMaze4+0x24c>)
 8002432:	2201      	movs	r2, #1
 8002434:	719a      	strb	r2, [r3, #6]

		if(ball.xpos == flag_8ms){
 8002436:	4b13      	ldr	r3, [pc, #76]	; (8002484 <colomnScanMaze4+0x250>)
 8002438:	781a      	ldrb	r2, [r3, #0]
 800243a:	4b10      	ldr	r3, [pc, #64]	; (800247c <colomnScanMaze4+0x248>)
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	429a      	cmp	r2, r3
 8002440:	d101      	bne.n	8002446 <colomnScanMaze4+0x212>
			setBall();
 8002442:	f000 f823 	bl	800248c <setBall>
		}
		if(endGoal.xpos == flag_8ms){
 8002446:	4b10      	ldr	r3, [pc, #64]	; (8002488 <colomnScanMaze4+0x254>)
 8002448:	781a      	ldrb	r2, [r3, #0]
 800244a:	4b0c      	ldr	r3, [pc, #48]	; (800247c <colomnScanMaze4+0x248>)
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	429a      	cmp	r2, r3
 8002450:	d110      	bne.n	8002474 <colomnScanMaze4+0x240>
			setEndGoal();
 8002452:	f000 f83b 	bl	80024cc <setEndGoal>
		}
		break ;
 8002456:	e00d      	b.n	8002474 <colomnScanMaze4+0x240>
		break;
 8002458:	bf00      	nop
 800245a:	e00c      	b.n	8002476 <colomnScanMaze4+0x242>
		break;
 800245c:	bf00      	nop
 800245e:	e00a      	b.n	8002476 <colomnScanMaze4+0x242>
		break;
 8002460:	bf00      	nop
 8002462:	e008      	b.n	8002476 <colomnScanMaze4+0x242>
		break ;
 8002464:	bf00      	nop
 8002466:	e006      	b.n	8002476 <colomnScanMaze4+0x242>
		break ;
 8002468:	bf00      	nop
 800246a:	e004      	b.n	8002476 <colomnScanMaze4+0x242>
		break ;
 800246c:	bf00      	nop
 800246e:	e002      	b.n	8002476 <colomnScanMaze4+0x242>
		break ;
 8002470:	bf00      	nop
 8002472:	e000      	b.n	8002476 <colomnScanMaze4+0x242>
		break ;
 8002474:	bf00      	nop
	}
}
 8002476:	bf00      	nop
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	2000008b 	.word	0x2000008b
 8002480:	20000194 	.word	0x20000194
 8002484:	20000044 	.word	0x20000044
 8002488:	20000048 	.word	0x20000048

0800248c <setBall>:
void setBall(){
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
	if(ball.state == 1){
 8002490:	4b0c      	ldr	r3, [pc, #48]	; (80024c4 <setBall+0x38>)
 8002492:	789b      	ldrb	r3, [r3, #2]
 8002494:	2b01      	cmp	r3, #1
 8002496:	d106      	bne.n	80024a6 <setBall+0x1a>
		Maze1.row[ball.ypos] = 1;
 8002498:	4b0a      	ldr	r3, [pc, #40]	; (80024c4 <setBall+0x38>)
 800249a:	785b      	ldrb	r3, [r3, #1]
 800249c:	461a      	mov	r2, r3
 800249e:	4b0a      	ldr	r3, [pc, #40]	; (80024c8 <setBall+0x3c>)
 80024a0:	2101      	movs	r1, #1
 80024a2:	5499      	strb	r1, [r3, r2]
	}else if(ball.state == 0){
		Maze1.row[ball.ypos] = 0;
	}
}
 80024a4:	e009      	b.n	80024ba <setBall+0x2e>
	}else if(ball.state == 0){
 80024a6:	4b07      	ldr	r3, [pc, #28]	; (80024c4 <setBall+0x38>)
 80024a8:	789b      	ldrb	r3, [r3, #2]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d105      	bne.n	80024ba <setBall+0x2e>
		Maze1.row[ball.ypos] = 0;
 80024ae:	4b05      	ldr	r3, [pc, #20]	; (80024c4 <setBall+0x38>)
 80024b0:	785b      	ldrb	r3, [r3, #1]
 80024b2:	461a      	mov	r2, r3
 80024b4:	4b04      	ldr	r3, [pc, #16]	; (80024c8 <setBall+0x3c>)
 80024b6:	2100      	movs	r1, #0
 80024b8:	5499      	strb	r1, [r3, r2]
}
 80024ba:	bf00      	nop
 80024bc:	46bd      	mov	sp, r7
 80024be:	bc80      	pop	{r7}
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	20000044 	.word	0x20000044
 80024c8:	20000194 	.word	0x20000194

080024cc <setEndGoal>:
void setEndGoal(){
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
	if(endGoal.state == 1){
 80024d0:	4b0c      	ldr	r3, [pc, #48]	; (8002504 <setEndGoal+0x38>)
 80024d2:	789b      	ldrb	r3, [r3, #2]
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d106      	bne.n	80024e6 <setEndGoal+0x1a>
			Maze1.row[endGoal.ypos] = 1;
 80024d8:	4b0a      	ldr	r3, [pc, #40]	; (8002504 <setEndGoal+0x38>)
 80024da:	785b      	ldrb	r3, [r3, #1]
 80024dc:	461a      	mov	r2, r3
 80024de:	4b0a      	ldr	r3, [pc, #40]	; (8002508 <setEndGoal+0x3c>)
 80024e0:	2101      	movs	r1, #1
 80024e2:	5499      	strb	r1, [r3, r2]
		}else if(endGoal.state == 0){
			Maze1.row[endGoal.ypos] = 0;
		}
}
 80024e4:	e009      	b.n	80024fa <setEndGoal+0x2e>
		}else if(endGoal.state == 0){
 80024e6:	4b07      	ldr	r3, [pc, #28]	; (8002504 <setEndGoal+0x38>)
 80024e8:	789b      	ldrb	r3, [r3, #2]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d105      	bne.n	80024fa <setEndGoal+0x2e>
			Maze1.row[endGoal.ypos] = 0;
 80024ee:	4b05      	ldr	r3, [pc, #20]	; (8002504 <setEndGoal+0x38>)
 80024f0:	785b      	ldrb	r3, [r3, #1]
 80024f2:	461a      	mov	r2, r3
 80024f4:	4b04      	ldr	r3, [pc, #16]	; (8002508 <setEndGoal+0x3c>)
 80024f6:	2100      	movs	r1, #0
 80024f8:	5499      	strb	r1, [r3, r2]
}
 80024fa:	bf00      	nop
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bc80      	pop	{r7}
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	20000048 	.word	0x20000048
 8002508:	20000194 	.word	0x20000194

0800250c <mazeSelect>:
extern uint8_t counter_300ms ;

extern uint8_t inMazeGameFlag;


void mazeSelect(){
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0

	clearScreen();
 8002510:	f7fe ffd6 	bl	80014c0 <clearScreen>
	updateScreen();
 8002514:	f7fd ff04 	bl	8000320 <updateScreen>

	if (ButtonU.needsAction){
 8002518:	4b52      	ldr	r3, [pc, #328]	; (8002664 <mazeSelect+0x158>)
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d00c      	beq.n	800253a <mazeSelect+0x2e>
		if (mazeNumber<4){
 8002520:	4b51      	ldr	r3, [pc, #324]	; (8002668 <mazeSelect+0x15c>)
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	2b03      	cmp	r3, #3
 8002526:	d805      	bhi.n	8002534 <mazeSelect+0x28>
			mazeNumber ++;
 8002528:	4b4f      	ldr	r3, [pc, #316]	; (8002668 <mazeSelect+0x15c>)
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	3301      	adds	r3, #1
 800252e:	b2da      	uxtb	r2, r3
 8002530:	4b4d      	ldr	r3, [pc, #308]	; (8002668 <mazeSelect+0x15c>)
 8002532:	701a      	strb	r2, [r3, #0]
		}
		ButtonU.needsAction=0;
 8002534:	4b4b      	ldr	r3, [pc, #300]	; (8002664 <mazeSelect+0x158>)
 8002536:	2200      	movs	r2, #0
 8002538:	701a      	strb	r2, [r3, #0]

	}
	if (ButtonD.needsAction){
 800253a:	4b4c      	ldr	r3, [pc, #304]	; (800266c <mazeSelect+0x160>)
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d00c      	beq.n	800255c <mazeSelect+0x50>
		if (mazeNumber>=2){
 8002542:	4b49      	ldr	r3, [pc, #292]	; (8002668 <mazeSelect+0x15c>)
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	2b01      	cmp	r3, #1
 8002548:	d905      	bls.n	8002556 <mazeSelect+0x4a>
		mazeNumber --;
 800254a:	4b47      	ldr	r3, [pc, #284]	; (8002668 <mazeSelect+0x15c>)
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	3b01      	subs	r3, #1
 8002550:	b2da      	uxtb	r2, r3
 8002552:	4b45      	ldr	r3, [pc, #276]	; (8002668 <mazeSelect+0x15c>)
 8002554:	701a      	strb	r2, [r3, #0]
		}
		ButtonD.needsAction=0;
 8002556:	4b45      	ldr	r3, [pc, #276]	; (800266c <mazeSelect+0x160>)
 8002558:	2200      	movs	r2, #0
 800255a:	701a      	strb	r2, [r3, #0]
	}
	if (ButtonM.needsAction){
 800255c:	4b44      	ldr	r3, [pc, #272]	; (8002670 <mazeSelect+0x164>)
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d005      	beq.n	8002570 <mazeSelect+0x64>
		enterMazeFlag=1;
 8002564:	4b43      	ldr	r3, [pc, #268]	; (8002674 <mazeSelect+0x168>)
 8002566:	2201      	movs	r2, #1
 8002568:	701a      	strb	r2, [r3, #0]
		ButtonM.needsAction=0;
 800256a:	4b41      	ldr	r3, [pc, #260]	; (8002670 <mazeSelect+0x164>)
 800256c:	2200      	movs	r2, #0
 800256e:	701a      	strb	r2, [r3, #0]
	}
	switch (mazeNumber) {
 8002570:	4b3d      	ldr	r3, [pc, #244]	; (8002668 <mazeSelect+0x15c>)
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	3b01      	subs	r3, #1
 8002576:	2b03      	cmp	r3, #3
 8002578:	d86e      	bhi.n	8002658 <mazeSelect+0x14c>
 800257a:	a201      	add	r2, pc, #4	; (adr r2, 8002580 <mazeSelect+0x74>)
 800257c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002580:	08002591 	.word	0x08002591
 8002584:	080025c3 	.word	0x080025c3
 8002588:	080025f5 	.word	0x080025f5
 800258c:	08002627 	.word	0x08002627

	case 1:
		colomnScanNum1();
 8002590:	f000 f878 	bl	8002684 <colomnScanNum1>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET); //debug 1
 8002594:	2201      	movs	r2, #1
 8002596:	f44f 7100 	mov.w	r1, #512	; 0x200
 800259a:	4837      	ldr	r0, [pc, #220]	; (8002678 <mazeSelect+0x16c>)
 800259c:	f001 fd99 	bl	80040d2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET); //debug 2
 80025a0:	2200      	movs	r2, #0
 80025a2:	2140      	movs	r1, #64	; 0x40
 80025a4:	4835      	ldr	r0, [pc, #212]	; (800267c <mazeSelect+0x170>)
 80025a6:	f001 fd94 	bl	80040d2 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET); //debug 3
 80025aa:	2200      	movs	r2, #0
 80025ac:	2180      	movs	r1, #128	; 0x80
 80025ae:	4834      	ldr	r0, [pc, #208]	; (8002680 <mazeSelect+0x174>)
 80025b0:	f001 fd8f 	bl	80040d2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET); //debug 4
 80025b4:	2200      	movs	r2, #0
 80025b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025ba:	4830      	ldr	r0, [pc, #192]	; (800267c <mazeSelect+0x170>)
 80025bc:	f001 fd89 	bl	80040d2 <HAL_GPIO_WritePin>
			break ;
 80025c0:	e04a      	b.n	8002658 <mazeSelect+0x14c>
	case 2:
		colomnScanNum2();
 80025c2:	f000 f8c1 	bl	8002748 <colomnScanNum2>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET); //debug 1
 80025c6:	2200      	movs	r2, #0
 80025c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025cc:	482a      	ldr	r0, [pc, #168]	; (8002678 <mazeSelect+0x16c>)
 80025ce:	f001 fd80 	bl	80040d2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET); //debug 2
 80025d2:	2201      	movs	r2, #1
 80025d4:	2140      	movs	r1, #64	; 0x40
 80025d6:	4829      	ldr	r0, [pc, #164]	; (800267c <mazeSelect+0x170>)
 80025d8:	f001 fd7b 	bl	80040d2 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET); //debug 3
 80025dc:	2200      	movs	r2, #0
 80025de:	2180      	movs	r1, #128	; 0x80
 80025e0:	4827      	ldr	r0, [pc, #156]	; (8002680 <mazeSelect+0x174>)
 80025e2:	f001 fd76 	bl	80040d2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET); //debug 4
 80025e6:	2200      	movs	r2, #0
 80025e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025ec:	4823      	ldr	r0, [pc, #140]	; (800267c <mazeSelect+0x170>)
 80025ee:	f001 fd70 	bl	80040d2 <HAL_GPIO_WritePin>
			break ;
 80025f2:	e031      	b.n	8002658 <mazeSelect+0x14c>
	case 3:
		colomnScanNum3();
 80025f4:	f000 f91a 	bl	800282c <colomnScanNum3>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET); //debug 1
 80025f8:	2200      	movs	r2, #0
 80025fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025fe:	481e      	ldr	r0, [pc, #120]	; (8002678 <mazeSelect+0x16c>)
 8002600:	f001 fd67 	bl	80040d2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET); //debug 2
 8002604:	2200      	movs	r2, #0
 8002606:	2140      	movs	r1, #64	; 0x40
 8002608:	481c      	ldr	r0, [pc, #112]	; (800267c <mazeSelect+0x170>)
 800260a:	f001 fd62 	bl	80040d2 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET); //debug 3
 800260e:	2201      	movs	r2, #1
 8002610:	2180      	movs	r1, #128	; 0x80
 8002612:	481b      	ldr	r0, [pc, #108]	; (8002680 <mazeSelect+0x174>)
 8002614:	f001 fd5d 	bl	80040d2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET); //debug 4
 8002618:	2200      	movs	r2, #0
 800261a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800261e:	4817      	ldr	r0, [pc, #92]	; (800267c <mazeSelect+0x170>)
 8002620:	f001 fd57 	bl	80040d2 <HAL_GPIO_WritePin>
			break ;
 8002624:	e018      	b.n	8002658 <mazeSelect+0x14c>
	case 4:
		colomnScanNum4();
 8002626:	f000 f96d 	bl	8002904 <colomnScanNum4>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET); //debug 1
 800262a:	2200      	movs	r2, #0
 800262c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002630:	4811      	ldr	r0, [pc, #68]	; (8002678 <mazeSelect+0x16c>)
 8002632:	f001 fd4e 	bl	80040d2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET); //debug 2
 8002636:	2200      	movs	r2, #0
 8002638:	2140      	movs	r1, #64	; 0x40
 800263a:	4810      	ldr	r0, [pc, #64]	; (800267c <mazeSelect+0x170>)
 800263c:	f001 fd49 	bl	80040d2 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET); //debug 3
 8002640:	2200      	movs	r2, #0
 8002642:	2180      	movs	r1, #128	; 0x80
 8002644:	480e      	ldr	r0, [pc, #56]	; (8002680 <mazeSelect+0x174>)
 8002646:	f001 fd44 	bl	80040d2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET); //debug 4
 800264a:	2201      	movs	r2, #1
 800264c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002650:	480a      	ldr	r0, [pc, #40]	; (800267c <mazeSelect+0x170>)
 8002652:	f001 fd3e 	bl	80040d2 <HAL_GPIO_WritePin>
			break ;
 8002656:	bf00      	nop

	}
	writeMazeToArray();
 8002658:	f7fe fefe 	bl	8001458 <writeMazeToArray>
	updateScreen();
 800265c:	f7fd fe60 	bl	8000320 <updateScreen>
}
 8002660:	bf00      	nop
 8002662:	bd80      	pop	{r7, pc}
 8002664:	20000038 	.word	0x20000038
 8002668:	2000004b 	.word	0x2000004b
 800266c:	2000002c 	.word	0x2000002c
 8002670:	20000008 	.word	0x20000008
 8002674:	200000b4 	.word	0x200000b4
 8002678:	40010c00 	.word	0x40010c00
 800267c:	40010800 	.word	0x40010800
 8002680:	40011000 	.word	0x40011000

08002684 <colomnScanNum1>:

void colomnScanNum1(){
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0

	switch (flag_8ms)
 8002688:	4b2d      	ldr	r3, [pc, #180]	; (8002740 <colomnScanNum1+0xbc>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	2b07      	cmp	r3, #7
 800268e:	d855      	bhi.n	800273c <colomnScanNum1+0xb8>
 8002690:	a201      	add	r2, pc, #4	; (adr r2, 8002698 <colomnScanNum1+0x14>)
 8002692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002696:	bf00      	nop
 8002698:	080026b9 	.word	0x080026b9
 800269c:	080026c5 	.word	0x080026c5
 80026a0:	080026d1 	.word	0x080026d1
 80026a4:	080026dd 	.word	0x080026dd
 80026a8:	0800270d 	.word	0x0800270d
 80026ac:	08002719 	.word	0x08002719
 80026b0:	08002725 	.word	0x08002725
 80026b4:	08002731 	.word	0x08002731
	{
	case 0 :resetElements();
 80026b8:	f7fe fe98 	bl	80013ec <resetElements>
		Maze1.col[0] = 0;
 80026bc:	4b21      	ldr	r3, [pc, #132]	; (8002744 <colomnScanNum1+0xc0>)
 80026be:	2200      	movs	r2, #0
 80026c0:	721a      	strb	r2, [r3, #8]
		break;
 80026c2:	e03b      	b.n	800273c <colomnScanNum1+0xb8>


	case 1 :resetElements();
 80026c4:	f7fe fe92 	bl	80013ec <resetElements>
		Maze1.col[1] = 0;
 80026c8:	4b1e      	ldr	r3, [pc, #120]	; (8002744 <colomnScanNum1+0xc0>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	725a      	strb	r2, [r3, #9]
		break;
 80026ce:	e035      	b.n	800273c <colomnScanNum1+0xb8>

	case 2 :resetElements();
 80026d0:	f7fe fe8c 	bl	80013ec <resetElements>
		Maze1.col[2] = 0;
 80026d4:	4b1b      	ldr	r3, [pc, #108]	; (8002744 <colomnScanNum1+0xc0>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	729a      	strb	r2, [r3, #10]
		break;
 80026da:	e02f      	b.n	800273c <colomnScanNum1+0xb8>


	case 3 :resetElements();
 80026dc:	f7fe fe86 	bl	80013ec <resetElements>
		Maze1.col[3] = 1;
 80026e0:	4b18      	ldr	r3, [pc, #96]	; (8002744 <colomnScanNum1+0xc0>)
 80026e2:	2201      	movs	r2, #1
 80026e4:	72da      	strb	r2, [r3, #11]
		Maze1.row[1] = 1;
 80026e6:	4b17      	ldr	r3, [pc, #92]	; (8002744 <colomnScanNum1+0xc0>)
 80026e8:	2201      	movs	r2, #1
 80026ea:	705a      	strb	r2, [r3, #1]
		Maze1.row[2] = 1;
 80026ec:	4b15      	ldr	r3, [pc, #84]	; (8002744 <colomnScanNum1+0xc0>)
 80026ee:	2201      	movs	r2, #1
 80026f0:	709a      	strb	r2, [r3, #2]
		Maze1.row[3] = 1;
 80026f2:	4b14      	ldr	r3, [pc, #80]	; (8002744 <colomnScanNum1+0xc0>)
 80026f4:	2201      	movs	r2, #1
 80026f6:	70da      	strb	r2, [r3, #3]
		Maze1.row[4] = 1;
 80026f8:	4b12      	ldr	r3, [pc, #72]	; (8002744 <colomnScanNum1+0xc0>)
 80026fa:	2201      	movs	r2, #1
 80026fc:	711a      	strb	r2, [r3, #4]
		Maze1.row[5] = 1;
 80026fe:	4b11      	ldr	r3, [pc, #68]	; (8002744 <colomnScanNum1+0xc0>)
 8002700:	2201      	movs	r2, #1
 8002702:	715a      	strb	r2, [r3, #5]
		Maze1.row[6] = 1;
 8002704:	4b0f      	ldr	r3, [pc, #60]	; (8002744 <colomnScanNum1+0xc0>)
 8002706:	2201      	movs	r2, #1
 8002708:	719a      	strb	r2, [r3, #6]
		break ;
 800270a:	e017      	b.n	800273c <colomnScanNum1+0xb8>

	case 4 :resetElements();
 800270c:	f7fe fe6e 	bl	80013ec <resetElements>
		Maze1.col[4] = 0;
 8002710:	4b0c      	ldr	r3, [pc, #48]	; (8002744 <colomnScanNum1+0xc0>)
 8002712:	2200      	movs	r2, #0
 8002714:	731a      	strb	r2, [r3, #12]
		break ;
 8002716:	e011      	b.n	800273c <colomnScanNum1+0xb8>


	case 5 :resetElements();
 8002718:	f7fe fe68 	bl	80013ec <resetElements>
		Maze1.col[5] = 0;
 800271c:	4b09      	ldr	r3, [pc, #36]	; (8002744 <colomnScanNum1+0xc0>)
 800271e:	2200      	movs	r2, #0
 8002720:	735a      	strb	r2, [r3, #13]
		break ;
 8002722:	e00b      	b.n	800273c <colomnScanNum1+0xb8>

	case 6 :resetElements();
 8002724:	f7fe fe62 	bl	80013ec <resetElements>
		Maze1.col[6] = 0;
 8002728:	4b06      	ldr	r3, [pc, #24]	; (8002744 <colomnScanNum1+0xc0>)
 800272a:	2200      	movs	r2, #0
 800272c:	739a      	strb	r2, [r3, #14]
		break ;
 800272e:	e005      	b.n	800273c <colomnScanNum1+0xb8>

	case 7 :resetElements();
 8002730:	f7fe fe5c 	bl	80013ec <resetElements>
		Maze1.col[7] = 0;
 8002734:	4b03      	ldr	r3, [pc, #12]	; (8002744 <colomnScanNum1+0xc0>)
 8002736:	2200      	movs	r2, #0
 8002738:	73da      	strb	r2, [r3, #15]
		break ;
 800273a:	bf00      	nop
	}
}
 800273c:	bf00      	nop
 800273e:	bd80      	pop	{r7, pc}
 8002740:	2000008b 	.word	0x2000008b
 8002744:	20000194 	.word	0x20000194

08002748 <colomnScanNum2>:
void colomnScanNum2(){
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0

	switch (flag_8ms)
 800274c:	4b35      	ldr	r3, [pc, #212]	; (8002824 <colomnScanNum2+0xdc>)
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	2b07      	cmp	r3, #7
 8002752:	d864      	bhi.n	800281e <colomnScanNum2+0xd6>
 8002754:	a201      	add	r2, pc, #4	; (adr r2, 800275c <colomnScanNum2+0x14>)
 8002756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800275a:	bf00      	nop
 800275c:	0800277d 	.word	0x0800277d
 8002760:	08002789 	.word	0x08002789
 8002764:	08002795 	.word	0x08002795
 8002768:	080027ad 	.word	0x080027ad
 800276c:	080027cb 	.word	0x080027cb
 8002770:	080027e9 	.word	0x080027e9
 8002774:	08002807 	.word	0x08002807
 8002778:	08002813 	.word	0x08002813
	{
	case 0 :resetElements();
 800277c:	f7fe fe36 	bl	80013ec <resetElements>
		Maze1.col[0] = 0;
 8002780:	4b29      	ldr	r3, [pc, #164]	; (8002828 <colomnScanNum2+0xe0>)
 8002782:	2200      	movs	r2, #0
 8002784:	721a      	strb	r2, [r3, #8]
		break;
 8002786:	e04a      	b.n	800281e <colomnScanNum2+0xd6>


	case 1 :resetElements();
 8002788:	f7fe fe30 	bl	80013ec <resetElements>
		Maze1.col[1] = 0;
 800278c:	4b26      	ldr	r3, [pc, #152]	; (8002828 <colomnScanNum2+0xe0>)
 800278e:	2200      	movs	r2, #0
 8002790:	725a      	strb	r2, [r3, #9]
		break;
 8002792:	e044      	b.n	800281e <colomnScanNum2+0xd6>

	case 2 :resetElements();
 8002794:	f7fe fe2a 	bl	80013ec <resetElements>
		Maze1.col[2] = 1;
 8002798:	4b23      	ldr	r3, [pc, #140]	; (8002828 <colomnScanNum2+0xe0>)
 800279a:	2201      	movs	r2, #1
 800279c:	729a      	strb	r2, [r3, #10]
		Maze1.row[2] = 1;
 800279e:	4b22      	ldr	r3, [pc, #136]	; (8002828 <colomnScanNum2+0xe0>)
 80027a0:	2201      	movs	r2, #1
 80027a2:	709a      	strb	r2, [r3, #2]
		Maze1.row[6] = 1;
 80027a4:	4b20      	ldr	r3, [pc, #128]	; (8002828 <colomnScanNum2+0xe0>)
 80027a6:	2201      	movs	r2, #1
 80027a8:	719a      	strb	r2, [r3, #6]
		break;
 80027aa:	e038      	b.n	800281e <colomnScanNum2+0xd6>


	case 3 :resetElements();
 80027ac:	f7fe fe1e 	bl	80013ec <resetElements>
		Maze1.col[3] = 1;
 80027b0:	4b1d      	ldr	r3, [pc, #116]	; (8002828 <colomnScanNum2+0xe0>)
 80027b2:	2201      	movs	r2, #1
 80027b4:	72da      	strb	r2, [r3, #11]
		Maze1.row[1] = 1;
 80027b6:	4b1c      	ldr	r3, [pc, #112]	; (8002828 <colomnScanNum2+0xe0>)
 80027b8:	2201      	movs	r2, #1
 80027ba:	705a      	strb	r2, [r3, #1]
		Maze1.row[5] = 1;
 80027bc:	4b1a      	ldr	r3, [pc, #104]	; (8002828 <colomnScanNum2+0xe0>)
 80027be:	2201      	movs	r2, #1
 80027c0:	715a      	strb	r2, [r3, #5]
		Maze1.row[6] = 1;
 80027c2:	4b19      	ldr	r3, [pc, #100]	; (8002828 <colomnScanNum2+0xe0>)
 80027c4:	2201      	movs	r2, #1
 80027c6:	719a      	strb	r2, [r3, #6]
		break ;
 80027c8:	e029      	b.n	800281e <colomnScanNum2+0xd6>

	case 4 :resetElements();
 80027ca:	f7fe fe0f 	bl	80013ec <resetElements>
		Maze1.col[4] = 1;
 80027ce:	4b16      	ldr	r3, [pc, #88]	; (8002828 <colomnScanNum2+0xe0>)
 80027d0:	2201      	movs	r2, #1
 80027d2:	731a      	strb	r2, [r3, #12]
		Maze1.row[1] = 1;
 80027d4:	4b14      	ldr	r3, [pc, #80]	; (8002828 <colomnScanNum2+0xe0>)
 80027d6:	2201      	movs	r2, #1
 80027d8:	705a      	strb	r2, [r3, #1]
		Maze1.row[4] = 1;
 80027da:	4b13      	ldr	r3, [pc, #76]	; (8002828 <colomnScanNum2+0xe0>)
 80027dc:	2201      	movs	r2, #1
 80027de:	711a      	strb	r2, [r3, #4]
		Maze1.row[6] = 1;
 80027e0:	4b11      	ldr	r3, [pc, #68]	; (8002828 <colomnScanNum2+0xe0>)
 80027e2:	2201      	movs	r2, #1
 80027e4:	719a      	strb	r2, [r3, #6]
		break ;
 80027e6:	e01a      	b.n	800281e <colomnScanNum2+0xd6>


	case 5 :resetElements();
 80027e8:	f7fe fe00 	bl	80013ec <resetElements>
		Maze1.col[5] = 1;
 80027ec:	4b0e      	ldr	r3, [pc, #56]	; (8002828 <colomnScanNum2+0xe0>)
 80027ee:	2201      	movs	r2, #1
 80027f0:	735a      	strb	r2, [r3, #13]
		Maze1.row[2] = 1;
 80027f2:	4b0d      	ldr	r3, [pc, #52]	; (8002828 <colomnScanNum2+0xe0>)
 80027f4:	2201      	movs	r2, #1
 80027f6:	709a      	strb	r2, [r3, #2]
		Maze1.row[3] = 1;
 80027f8:	4b0b      	ldr	r3, [pc, #44]	; (8002828 <colomnScanNum2+0xe0>)
 80027fa:	2201      	movs	r2, #1
 80027fc:	70da      	strb	r2, [r3, #3]
		Maze1.row[6] = 1;
 80027fe:	4b0a      	ldr	r3, [pc, #40]	; (8002828 <colomnScanNum2+0xe0>)
 8002800:	2201      	movs	r2, #1
 8002802:	719a      	strb	r2, [r3, #6]
		break ;
 8002804:	e00b      	b.n	800281e <colomnScanNum2+0xd6>

	case 6 :resetElements();
 8002806:	f7fe fdf1 	bl	80013ec <resetElements>
		Maze1.col[6] = 0;
 800280a:	4b07      	ldr	r3, [pc, #28]	; (8002828 <colomnScanNum2+0xe0>)
 800280c:	2200      	movs	r2, #0
 800280e:	739a      	strb	r2, [r3, #14]
		break ;
 8002810:	e005      	b.n	800281e <colomnScanNum2+0xd6>

	case 7 :resetElements();
 8002812:	f7fe fdeb 	bl	80013ec <resetElements>
		Maze1.col[7] = 0;
 8002816:	4b04      	ldr	r3, [pc, #16]	; (8002828 <colomnScanNum2+0xe0>)
 8002818:	2200      	movs	r2, #0
 800281a:	73da      	strb	r2, [r3, #15]
		break ;
 800281c:	bf00      	nop
	}
}
 800281e:	bf00      	nop
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	2000008b 	.word	0x2000008b
 8002828:	20000194 	.word	0x20000194

0800282c <colomnScanNum3>:
void colomnScanNum3(){
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0

	switch (flag_8ms)
 8002830:	4b32      	ldr	r3, [pc, #200]	; (80028fc <colomnScanNum3+0xd0>)
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	2b07      	cmp	r3, #7
 8002836:	d85e      	bhi.n	80028f6 <colomnScanNum3+0xca>
 8002838:	a201      	add	r2, pc, #4	; (adr r2, 8002840 <colomnScanNum3+0x14>)
 800283a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800283e:	bf00      	nop
 8002840:	08002861 	.word	0x08002861
 8002844:	0800286d 	.word	0x0800286d
 8002848:	08002879 	.word	0x08002879
 800284c:	08002897 	.word	0x08002897
 8002850:	080028b5 	.word	0x080028b5
 8002854:	080028d3 	.word	0x080028d3
 8002858:	080028df 	.word	0x080028df
 800285c:	080028eb 	.word	0x080028eb
	{
	case 0 :resetElements();
 8002860:	f7fe fdc4 	bl	80013ec <resetElements>
		Maze1.col[0] = 0;
 8002864:	4b26      	ldr	r3, [pc, #152]	; (8002900 <colomnScanNum3+0xd4>)
 8002866:	2200      	movs	r2, #0
 8002868:	721a      	strb	r2, [r3, #8]
		break;
 800286a:	e044      	b.n	80028f6 <colomnScanNum3+0xca>


	case 1 :resetElements();
 800286c:	f7fe fdbe 	bl	80013ec <resetElements>
		Maze1.col[1] = 0;
 8002870:	4b23      	ldr	r3, [pc, #140]	; (8002900 <colomnScanNum3+0xd4>)
 8002872:	2200      	movs	r2, #0
 8002874:	725a      	strb	r2, [r3, #9]
		break;
 8002876:	e03e      	b.n	80028f6 <colomnScanNum3+0xca>

	case 2 :resetElements();
 8002878:	f7fe fdb8 	bl	80013ec <resetElements>
		Maze1.col[2] = 1;
 800287c:	4b20      	ldr	r3, [pc, #128]	; (8002900 <colomnScanNum3+0xd4>)
 800287e:	2201      	movs	r2, #1
 8002880:	729a      	strb	r2, [r3, #10]
		Maze1.row[1] = 1;
 8002882:	4b1f      	ldr	r3, [pc, #124]	; (8002900 <colomnScanNum3+0xd4>)
 8002884:	2201      	movs	r2, #1
 8002886:	705a      	strb	r2, [r3, #1]
		Maze1.row[3] = 1;
 8002888:	4b1d      	ldr	r3, [pc, #116]	; (8002900 <colomnScanNum3+0xd4>)
 800288a:	2201      	movs	r2, #1
 800288c:	70da      	strb	r2, [r3, #3]
		Maze1.row[6] = 1;
 800288e:	4b1c      	ldr	r3, [pc, #112]	; (8002900 <colomnScanNum3+0xd4>)
 8002890:	2201      	movs	r2, #1
 8002892:	719a      	strb	r2, [r3, #6]
		break;
 8002894:	e02f      	b.n	80028f6 <colomnScanNum3+0xca>


	case 3 :resetElements();
 8002896:	f7fe fda9 	bl	80013ec <resetElements>
		Maze1.col[3] = 1;
 800289a:	4b19      	ldr	r3, [pc, #100]	; (8002900 <colomnScanNum3+0xd4>)
 800289c:	2201      	movs	r2, #1
 800289e:	72da      	strb	r2, [r3, #11]
		Maze1.row[1] = 1;
 80028a0:	4b17      	ldr	r3, [pc, #92]	; (8002900 <colomnScanNum3+0xd4>)
 80028a2:	2201      	movs	r2, #1
 80028a4:	705a      	strb	r2, [r3, #1]
		Maze1.row[3] = 1;
 80028a6:	4b16      	ldr	r3, [pc, #88]	; (8002900 <colomnScanNum3+0xd4>)
 80028a8:	2201      	movs	r2, #1
 80028aa:	70da      	strb	r2, [r3, #3]
		Maze1.row[6] = 1;
 80028ac:	4b14      	ldr	r3, [pc, #80]	; (8002900 <colomnScanNum3+0xd4>)
 80028ae:	2201      	movs	r2, #1
 80028b0:	719a      	strb	r2, [r3, #6]
		break ;
 80028b2:	e020      	b.n	80028f6 <colomnScanNum3+0xca>

	case 4 :resetElements();
 80028b4:	f7fe fd9a 	bl	80013ec <resetElements>
		Maze1.col[4] = 1;
 80028b8:	4b11      	ldr	r3, [pc, #68]	; (8002900 <colomnScanNum3+0xd4>)
 80028ba:	2201      	movs	r2, #1
 80028bc:	731a      	strb	r2, [r3, #12]
		Maze1.row[2] = 1;
 80028be:	4b10      	ldr	r3, [pc, #64]	; (8002900 <colomnScanNum3+0xd4>)
 80028c0:	2201      	movs	r2, #1
 80028c2:	709a      	strb	r2, [r3, #2]
		Maze1.row[4] = 1;
 80028c4:	4b0e      	ldr	r3, [pc, #56]	; (8002900 <colomnScanNum3+0xd4>)
 80028c6:	2201      	movs	r2, #1
 80028c8:	711a      	strb	r2, [r3, #4]
		Maze1.row[5] = 1;
 80028ca:	4b0d      	ldr	r3, [pc, #52]	; (8002900 <colomnScanNum3+0xd4>)
 80028cc:	2201      	movs	r2, #1
 80028ce:	715a      	strb	r2, [r3, #5]
		break ;
 80028d0:	e011      	b.n	80028f6 <colomnScanNum3+0xca>


	case 5 :resetElements();
 80028d2:	f7fe fd8b 	bl	80013ec <resetElements>
		Maze1.col[5] = 0;
 80028d6:	4b0a      	ldr	r3, [pc, #40]	; (8002900 <colomnScanNum3+0xd4>)
 80028d8:	2200      	movs	r2, #0
 80028da:	735a      	strb	r2, [r3, #13]
		break ;
 80028dc:	e00b      	b.n	80028f6 <colomnScanNum3+0xca>

	case 6 :resetElements();
 80028de:	f7fe fd85 	bl	80013ec <resetElements>
		Maze1.col[6] = 0;
 80028e2:	4b07      	ldr	r3, [pc, #28]	; (8002900 <colomnScanNum3+0xd4>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	739a      	strb	r2, [r3, #14]
		break ;
 80028e8:	e005      	b.n	80028f6 <colomnScanNum3+0xca>

	case 7 :resetElements();
 80028ea:	f7fe fd7f 	bl	80013ec <resetElements>
		Maze1.col[7] = 0;
 80028ee:	4b04      	ldr	r3, [pc, #16]	; (8002900 <colomnScanNum3+0xd4>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	73da      	strb	r2, [r3, #15]
		break ;
 80028f4:	bf00      	nop
	}
}
 80028f6:	bf00      	nop
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	2000008b 	.word	0x2000008b
 8002900:	20000194 	.word	0x20000194

08002904 <colomnScanNum4>:
void colomnScanNum4(){
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0

	switch (flag_8ms)
 8002908:	4b35      	ldr	r3, [pc, #212]	; (80029e0 <colomnScanNum4+0xdc>)
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	2b07      	cmp	r3, #7
 800290e:	d864      	bhi.n	80029da <colomnScanNum4+0xd6>
 8002910:	a201      	add	r2, pc, #4	; (adr r2, 8002918 <colomnScanNum4+0x14>)
 8002912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002916:	bf00      	nop
 8002918:	08002939 	.word	0x08002939
 800291c:	08002945 	.word	0x08002945
 8002920:	08002951 	.word	0x08002951
 8002924:	08002963 	.word	0x08002963
 8002928:	0800297b 	.word	0x0800297b
 800292c:	08002993 	.word	0x08002993
 8002930:	080029b7 	.word	0x080029b7
 8002934:	080029cf 	.word	0x080029cf
	{
	case 0 :resetElements();
 8002938:	f7fe fd58 	bl	80013ec <resetElements>
		Maze1.col[0] = 0;
 800293c:	4b29      	ldr	r3, [pc, #164]	; (80029e4 <colomnScanNum4+0xe0>)
 800293e:	2200      	movs	r2, #0
 8002940:	721a      	strb	r2, [r3, #8]
		break;
 8002942:	e04a      	b.n	80029da <colomnScanNum4+0xd6>


	case 1 :resetElements();
 8002944:	f7fe fd52 	bl	80013ec <resetElements>
		Maze1.col[1] = 0;
 8002948:	4b26      	ldr	r3, [pc, #152]	; (80029e4 <colomnScanNum4+0xe0>)
 800294a:	2200      	movs	r2, #0
 800294c:	725a      	strb	r2, [r3, #9]
		break;
 800294e:	e044      	b.n	80029da <colomnScanNum4+0xd6>

	case 2 :resetElements();
 8002950:	f7fe fd4c 	bl	80013ec <resetElements>
		Maze1.col[2] = 1;
 8002954:	4b23      	ldr	r3, [pc, #140]	; (80029e4 <colomnScanNum4+0xe0>)
 8002956:	2201      	movs	r2, #1
 8002958:	729a      	strb	r2, [r3, #10]
		Maze1.row[5] = 1;
 800295a:	4b22      	ldr	r3, [pc, #136]	; (80029e4 <colomnScanNum4+0xe0>)
 800295c:	2201      	movs	r2, #1
 800295e:	715a      	strb	r2, [r3, #5]
		break;
 8002960:	e03b      	b.n	80029da <colomnScanNum4+0xd6>


	case 3 :resetElements();
 8002962:	f7fe fd43 	bl	80013ec <resetElements>
		Maze1.col[3] = 1;
 8002966:	4b1f      	ldr	r3, [pc, #124]	; (80029e4 <colomnScanNum4+0xe0>)
 8002968:	2201      	movs	r2, #1
 800296a:	72da      	strb	r2, [r3, #11]
		Maze1.row[4] = 1;
 800296c:	4b1d      	ldr	r3, [pc, #116]	; (80029e4 <colomnScanNum4+0xe0>)
 800296e:	2201      	movs	r2, #1
 8002970:	711a      	strb	r2, [r3, #4]
		Maze1.row[5] = 1;
 8002972:	4b1c      	ldr	r3, [pc, #112]	; (80029e4 <colomnScanNum4+0xe0>)
 8002974:	2201      	movs	r2, #1
 8002976:	715a      	strb	r2, [r3, #5]
		break ;
 8002978:	e02f      	b.n	80029da <colomnScanNum4+0xd6>

	case 4 :resetElements();
 800297a:	f7fe fd37 	bl	80013ec <resetElements>
		Maze1.col[4] = 1;
 800297e:	4b19      	ldr	r3, [pc, #100]	; (80029e4 <colomnScanNum4+0xe0>)
 8002980:	2201      	movs	r2, #1
 8002982:	731a      	strb	r2, [r3, #12]
		Maze1.row[3] = 1;
 8002984:	4b17      	ldr	r3, [pc, #92]	; (80029e4 <colomnScanNum4+0xe0>)
 8002986:	2201      	movs	r2, #1
 8002988:	70da      	strb	r2, [r3, #3]
		Maze1.row[5] = 1;
 800298a:	4b16      	ldr	r3, [pc, #88]	; (80029e4 <colomnScanNum4+0xe0>)
 800298c:	2201      	movs	r2, #1
 800298e:	715a      	strb	r2, [r3, #5]
		break ;
 8002990:	e023      	b.n	80029da <colomnScanNum4+0xd6>


	case 5 :resetElements();
 8002992:	f7fe fd2b 	bl	80013ec <resetElements>
		Maze1.col[5] = 1;
 8002996:	4b13      	ldr	r3, [pc, #76]	; (80029e4 <colomnScanNum4+0xe0>)
 8002998:	2201      	movs	r2, #1
 800299a:	735a      	strb	r2, [r3, #13]
		Maze1.row[2] = 1;
 800299c:	4b11      	ldr	r3, [pc, #68]	; (80029e4 <colomnScanNum4+0xe0>)
 800299e:	2201      	movs	r2, #1
 80029a0:	709a      	strb	r2, [r3, #2]
		Maze1.row[4] = 1;
 80029a2:	4b10      	ldr	r3, [pc, #64]	; (80029e4 <colomnScanNum4+0xe0>)
 80029a4:	2201      	movs	r2, #1
 80029a6:	711a      	strb	r2, [r3, #4]
		Maze1.row[5] = 1;
 80029a8:	4b0e      	ldr	r3, [pc, #56]	; (80029e4 <colomnScanNum4+0xe0>)
 80029aa:	2201      	movs	r2, #1
 80029ac:	715a      	strb	r2, [r3, #5]
		Maze1.row[6] = 1;
 80029ae:	4b0d      	ldr	r3, [pc, #52]	; (80029e4 <colomnScanNum4+0xe0>)
 80029b0:	2201      	movs	r2, #1
 80029b2:	719a      	strb	r2, [r3, #6]
		break ;
 80029b4:	e011      	b.n	80029da <colomnScanNum4+0xd6>

	case 6 :resetElements();
 80029b6:	f7fe fd19 	bl	80013ec <resetElements>
		Maze1.col[6] = 1;
 80029ba:	4b0a      	ldr	r3, [pc, #40]	; (80029e4 <colomnScanNum4+0xe0>)
 80029bc:	2201      	movs	r2, #1
 80029be:	739a      	strb	r2, [r3, #14]
		Maze1.row[1] = 1;
 80029c0:	4b08      	ldr	r3, [pc, #32]	; (80029e4 <colomnScanNum4+0xe0>)
 80029c2:	2201      	movs	r2, #1
 80029c4:	705a      	strb	r2, [r3, #1]
		Maze1.row[5] = 1;
 80029c6:	4b07      	ldr	r3, [pc, #28]	; (80029e4 <colomnScanNum4+0xe0>)
 80029c8:	2201      	movs	r2, #1
 80029ca:	715a      	strb	r2, [r3, #5]
		break ;
 80029cc:	e005      	b.n	80029da <colomnScanNum4+0xd6>

	case 7 :resetElements();
 80029ce:	f7fe fd0d 	bl	80013ec <resetElements>
		Maze1.col[7] = 0;
 80029d2:	4b04      	ldr	r3, [pc, #16]	; (80029e4 <colomnScanNum4+0xe0>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	73da      	strb	r2, [r3, #15]
		break ;
 80029d8:	bf00      	nop
	}
}
 80029da:	bf00      	nop
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	2000008b 	.word	0x2000008b
 80029e4:	20000194 	.word	0x20000194

080029e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80029ee:	4b15      	ldr	r3, [pc, #84]	; (8002a44 <HAL_MspInit+0x5c>)
 80029f0:	699b      	ldr	r3, [r3, #24]
 80029f2:	4a14      	ldr	r2, [pc, #80]	; (8002a44 <HAL_MspInit+0x5c>)
 80029f4:	f043 0301 	orr.w	r3, r3, #1
 80029f8:	6193      	str	r3, [r2, #24]
 80029fa:	4b12      	ldr	r3, [pc, #72]	; (8002a44 <HAL_MspInit+0x5c>)
 80029fc:	699b      	ldr	r3, [r3, #24]
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	60bb      	str	r3, [r7, #8]
 8002a04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a06:	4b0f      	ldr	r3, [pc, #60]	; (8002a44 <HAL_MspInit+0x5c>)
 8002a08:	69db      	ldr	r3, [r3, #28]
 8002a0a:	4a0e      	ldr	r2, [pc, #56]	; (8002a44 <HAL_MspInit+0x5c>)
 8002a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a10:	61d3      	str	r3, [r2, #28]
 8002a12:	4b0c      	ldr	r3, [pc, #48]	; (8002a44 <HAL_MspInit+0x5c>)
 8002a14:	69db      	ldr	r3, [r3, #28]
 8002a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a1a:	607b      	str	r3, [r7, #4]
 8002a1c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002a1e:	4b0a      	ldr	r3, [pc, #40]	; (8002a48 <HAL_MspInit+0x60>)
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	60fb      	str	r3, [r7, #12]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002a2a:	60fb      	str	r3, [r7, #12]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a32:	60fb      	str	r3, [r7, #12]
 8002a34:	4a04      	ldr	r2, [pc, #16]	; (8002a48 <HAL_MspInit+0x60>)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a3a:	bf00      	nop
 8002a3c:	3714      	adds	r7, #20
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bc80      	pop	{r7}
 8002a42:	4770      	bx	lr
 8002a44:	40021000 	.word	0x40021000
 8002a48:	40010000 	.word	0x40010000

08002a4c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b088      	sub	sp, #32
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a54:	f107 0310 	add.w	r3, r7, #16
 8002a58:	2200      	movs	r2, #0
 8002a5a:	601a      	str	r2, [r3, #0]
 8002a5c:	605a      	str	r2, [r3, #4]
 8002a5e:	609a      	str	r2, [r3, #8]
 8002a60:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a14      	ldr	r2, [pc, #80]	; (8002ab8 <HAL_ADC_MspInit+0x6c>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d121      	bne.n	8002ab0 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002a6c:	4b13      	ldr	r3, [pc, #76]	; (8002abc <HAL_ADC_MspInit+0x70>)
 8002a6e:	699b      	ldr	r3, [r3, #24]
 8002a70:	4a12      	ldr	r2, [pc, #72]	; (8002abc <HAL_ADC_MspInit+0x70>)
 8002a72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a76:	6193      	str	r3, [r2, #24]
 8002a78:	4b10      	ldr	r3, [pc, #64]	; (8002abc <HAL_ADC_MspInit+0x70>)
 8002a7a:	699b      	ldr	r3, [r3, #24]
 8002a7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a80:	60fb      	str	r3, [r7, #12]
 8002a82:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a84:	4b0d      	ldr	r3, [pc, #52]	; (8002abc <HAL_ADC_MspInit+0x70>)
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	4a0c      	ldr	r2, [pc, #48]	; (8002abc <HAL_ADC_MspInit+0x70>)
 8002a8a:	f043 0310 	orr.w	r3, r3, #16
 8002a8e:	6193      	str	r3, [r2, #24]
 8002a90:	4b0a      	ldr	r3, [pc, #40]	; (8002abc <HAL_ADC_MspInit+0x70>)
 8002a92:	699b      	ldr	r3, [r3, #24]
 8002a94:	f003 0310 	and.w	r3, r3, #16
 8002a98:	60bb      	str	r3, [r7, #8]
 8002a9a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PC1     ------> ADC1_IN11 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002aa4:	f107 0310 	add.w	r3, r7, #16
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	4805      	ldr	r0, [pc, #20]	; (8002ac0 <HAL_ADC_MspInit+0x74>)
 8002aac:	f001 f9a0 	bl	8003df0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002ab0:	bf00      	nop
 8002ab2:	3720      	adds	r7, #32
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	40012400 	.word	0x40012400
 8002abc:	40021000 	.word	0x40021000
 8002ac0:	40011000 	.word	0x40011000

08002ac4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b088      	sub	sp, #32
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002acc:	f107 0310 	add.w	r3, r7, #16
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	601a      	str	r2, [r3, #0]
 8002ad4:	605a      	str	r2, [r3, #4]
 8002ad6:	609a      	str	r2, [r3, #8]
 8002ad8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a15      	ldr	r2, [pc, #84]	; (8002b34 <HAL_I2C_MspInit+0x70>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d123      	bne.n	8002b2c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ae4:	4b14      	ldr	r3, [pc, #80]	; (8002b38 <HAL_I2C_MspInit+0x74>)
 8002ae6:	699b      	ldr	r3, [r3, #24]
 8002ae8:	4a13      	ldr	r2, [pc, #76]	; (8002b38 <HAL_I2C_MspInit+0x74>)
 8002aea:	f043 0308 	orr.w	r3, r3, #8
 8002aee:	6193      	str	r3, [r2, #24]
 8002af0:	4b11      	ldr	r3, [pc, #68]	; (8002b38 <HAL_I2C_MspInit+0x74>)
 8002af2:	699b      	ldr	r3, [r3, #24]
 8002af4:	f003 0308 	and.w	r3, r3, #8
 8002af8:	60fb      	str	r3, [r7, #12]
 8002afa:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002afc:	23c0      	movs	r3, #192	; 0xc0
 8002afe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b00:	2312      	movs	r3, #18
 8002b02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b04:	2303      	movs	r3, #3
 8002b06:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b08:	f107 0310 	add.w	r3, r7, #16
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	480b      	ldr	r0, [pc, #44]	; (8002b3c <HAL_I2C_MspInit+0x78>)
 8002b10:	f001 f96e 	bl	8003df0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b14:	4b08      	ldr	r3, [pc, #32]	; (8002b38 <HAL_I2C_MspInit+0x74>)
 8002b16:	69db      	ldr	r3, [r3, #28]
 8002b18:	4a07      	ldr	r2, [pc, #28]	; (8002b38 <HAL_I2C_MspInit+0x74>)
 8002b1a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b1e:	61d3      	str	r3, [r2, #28]
 8002b20:	4b05      	ldr	r3, [pc, #20]	; (8002b38 <HAL_I2C_MspInit+0x74>)
 8002b22:	69db      	ldr	r3, [r3, #28]
 8002b24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b28:	60bb      	str	r3, [r7, #8]
 8002b2a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002b2c:	bf00      	nop
 8002b2e:	3720      	adds	r7, #32
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	40005400 	.word	0x40005400
 8002b38:	40021000 	.word	0x40021000
 8002b3c:	40010c00 	.word	0x40010c00

08002b40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b088      	sub	sp, #32
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b48:	f107 0310 	add.w	r3, r7, #16
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	601a      	str	r2, [r3, #0]
 8002b50:	605a      	str	r2, [r3, #4]
 8002b52:	609a      	str	r2, [r3, #8]
 8002b54:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a1b      	ldr	r2, [pc, #108]	; (8002bc8 <HAL_UART_MspInit+0x88>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d12f      	bne.n	8002bc0 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b60:	4b1a      	ldr	r3, [pc, #104]	; (8002bcc <HAL_UART_MspInit+0x8c>)
 8002b62:	69db      	ldr	r3, [r3, #28]
 8002b64:	4a19      	ldr	r2, [pc, #100]	; (8002bcc <HAL_UART_MspInit+0x8c>)
 8002b66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b6a:	61d3      	str	r3, [r2, #28]
 8002b6c:	4b17      	ldr	r3, [pc, #92]	; (8002bcc <HAL_UART_MspInit+0x8c>)
 8002b6e:	69db      	ldr	r3, [r3, #28]
 8002b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b74:	60fb      	str	r3, [r7, #12]
 8002b76:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b78:	4b14      	ldr	r3, [pc, #80]	; (8002bcc <HAL_UART_MspInit+0x8c>)
 8002b7a:	699b      	ldr	r3, [r3, #24]
 8002b7c:	4a13      	ldr	r2, [pc, #76]	; (8002bcc <HAL_UART_MspInit+0x8c>)
 8002b7e:	f043 0304 	orr.w	r3, r3, #4
 8002b82:	6193      	str	r3, [r2, #24]
 8002b84:	4b11      	ldr	r3, [pc, #68]	; (8002bcc <HAL_UART_MspInit+0x8c>)
 8002b86:	699b      	ldr	r3, [r3, #24]
 8002b88:	f003 0304 	and.w	r3, r3, #4
 8002b8c:	60bb      	str	r3, [r7, #8]
 8002b8e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002b90:	2304      	movs	r3, #4
 8002b92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b94:	2302      	movs	r3, #2
 8002b96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b9c:	f107 0310 	add.w	r3, r7, #16
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	480b      	ldr	r0, [pc, #44]	; (8002bd0 <HAL_UART_MspInit+0x90>)
 8002ba4:	f001 f924 	bl	8003df0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002ba8:	2308      	movs	r3, #8
 8002baa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bac:	2300      	movs	r3, #0
 8002bae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bb4:	f107 0310 	add.w	r3, r7, #16
 8002bb8:	4619      	mov	r1, r3
 8002bba:	4805      	ldr	r0, [pc, #20]	; (8002bd0 <HAL_UART_MspInit+0x90>)
 8002bbc:	f001 f918 	bl	8003df0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002bc0:	bf00      	nop
 8002bc2:	3720      	adds	r7, #32
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	40004400 	.word	0x40004400
 8002bcc:	40021000 	.word	0x40021000
 8002bd0:	40010800 	.word	0x40010800

08002bd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002bd8:	bf00      	nop
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bc80      	pop	{r7}
 8002bde:	4770      	bx	lr

08002be0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002be4:	e7fe      	b.n	8002be4 <HardFault_Handler+0x4>

08002be6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002be6:	b480      	push	{r7}
 8002be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bea:	e7fe      	b.n	8002bea <MemManage_Handler+0x4>

08002bec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bec:	b480      	push	{r7}
 8002bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bf0:	e7fe      	b.n	8002bf0 <BusFault_Handler+0x4>

08002bf2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bf6:	e7fe      	b.n	8002bf6 <UsageFault_Handler+0x4>

08002bf8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002bfc:	bf00      	nop
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bc80      	pop	{r7}
 8002c02:	4770      	bx	lr

08002c04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c08:	bf00      	nop
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bc80      	pop	{r7}
 8002c0e:	4770      	bx	lr

08002c10 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c14:	bf00      	nop
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bc80      	pop	{r7}
 8002c1a:	4770      	bx	lr

08002c1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c20:	f000 fdba 	bl	8003798 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
HAL_SYSTICK_Callback();
 8002c24:	f7fd fc08 	bl	8000438 <HAL_SYSTICK_Callback>
  /* USER CODE END SysTick_IRQn 1 */
}
 8002c28:	bf00      	nop
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c30:	bf00      	nop
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bc80      	pop	{r7}
 8002c36:	4770      	bx	lr

08002c38 <tennisGameLoop>:
			{0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0},
			{0,0,0,0,0,0,0,0}
	};

void tennisGameLoop(){
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0



	//clearScreen();

	if (initilizeTennisGameFlag){
 8002c3c:	4b12      	ldr	r3, [pc, #72]	; (8002c88 <tennisGameLoop+0x50>)
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d004      	beq.n	8002c4e <tennisGameLoop+0x16>
		//once off
		initilize();
 8002c44:	f000 fb04 	bl	8003250 <initilize>
		initilizeTennisGameFlag=0;
 8002c48:	4b0f      	ldr	r3, [pc, #60]	; (8002c88 <tennisGameLoop+0x50>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	701a      	strb	r2, [r3, #0]
	}




	sendTennisUART();
 8002c4e:	f000 f9af 	bl	8002fb0 <sendTennisUART>
	//sampleSlider(); //gets bat position not needed for demo 4

	//looping every 1 ms

	//updateCourt();
	colomnScanCourt();
 8002c52:	f000 fbc9 	bl	80033e8 <colomnScanCourt>

	writeCourtToArray();
 8002c56:	f000 fcff 	bl	8003658 <writeCourtToArray>
	updateScreen();
 8002c5a:	f7fd fb61 	bl	8000320 <updateScreen>
	checkBounds();
 8002c5e:	f000 fa1d 	bl	800309c <checkBounds>

	updateBallSpeed();
 8002c62:	f000 f913 	bl	8002e8c <updateBallSpeed>
	updateBallPosition();
 8002c66:	f000 fb27 	bl	80032b8 <updateBallPosition>


	//exit the tennis game
	if (ButtonM.needsAction){
 8002c6a:	4b08      	ldr	r3, [pc, #32]	; (8002c8c <tennisGameLoop+0x54>)
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d007      	beq.n	8002c82 <tennisGameLoop+0x4a>
		inTennisGameFlag =0;
 8002c72:	4b07      	ldr	r3, [pc, #28]	; (8002c90 <tennisGameLoop+0x58>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	701a      	strb	r2, [r3, #0]
		clearScreen();
 8002c78:	f7fe fc22 	bl	80014c0 <clearScreen>
		ButtonM.needsAction=0;
 8002c7c:	4b03      	ldr	r3, [pc, #12]	; (8002c8c <tennisGameLoop+0x54>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	701a      	strb	r2, [r3, #0]
	}
}
 8002c82:	bf00      	nop
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	20000098 	.word	0x20000098
 8002c8c:	20000008 	.word	0x20000008
 8002c90:	200000b2 	.word	0x200000b2

08002c94 <MoveBatIMU>:
void MoveBatIMU(){
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af02      	add	r7, sp, #8
	i2c_transferData[0] = outxl_reg;
 8002c9a:	4b2e      	ldr	r3, [pc, #184]	; (8002d54 <MoveBatIMU+0xc0>)
 8002c9c:	781a      	ldrb	r2, [r3, #0]
 8002c9e:	4b2e      	ldr	r3, [pc, #184]	; (8002d58 <MoveBatIMU+0xc4>)
 8002ca0:	701a      	strb	r2, [r3, #0]
	accRes = HAL_I2C_Master_Transmit(&hi2c1, i2cAddress, i2c_transferData,1,1);
 8002ca2:	4b2e      	ldr	r3, [pc, #184]	; (8002d5c <MoveBatIMU+0xc8>)
 8002ca4:	8819      	ldrh	r1, [r3, #0]
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	9300      	str	r3, [sp, #0]
 8002caa:	2301      	movs	r3, #1
 8002cac:	4a2a      	ldr	r2, [pc, #168]	; (8002d58 <MoveBatIMU+0xc4>)
 8002cae:	482c      	ldr	r0, [pc, #176]	; (8002d60 <MoveBatIMU+0xcc>)
 8002cb0:	f001 fb60 	bl	8004374 <HAL_I2C_Master_Transmit>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	4b2a      	ldr	r3, [pc, #168]	; (8002d64 <MoveBatIMU+0xd0>)
 8002cba:	701a      	strb	r2, [r3, #0]
	accRes2 = HAL_I2C_Master_Receive(&hi2c1,i2cAddress, i2c_accData, 6, 1);
 8002cbc:	4b27      	ldr	r3, [pc, #156]	; (8002d5c <MoveBatIMU+0xc8>)
 8002cbe:	8819      	ldrh	r1, [r3, #0]
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	9300      	str	r3, [sp, #0]
 8002cc4:	2306      	movs	r3, #6
 8002cc6:	4a28      	ldr	r2, [pc, #160]	; (8002d68 <MoveBatIMU+0xd4>)
 8002cc8:	4825      	ldr	r0, [pc, #148]	; (8002d60 <MoveBatIMU+0xcc>)
 8002cca:	f001 fc51 	bl	8004570 <HAL_I2C_Master_Receive>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	4b26      	ldr	r3, [pc, #152]	; (8002d6c <MoveBatIMU+0xd8>)
 8002cd4:	701a      	strb	r2, [r3, #0]

	accz = (int16_t)((int8_t)i2c_accData[5]);
 8002cd6:	4b24      	ldr	r3, [pc, #144]	; (8002d68 <MoveBatIMU+0xd4>)
 8002cd8:	795b      	ldrb	r3, [r3, #5]
 8002cda:	b25b      	sxtb	r3, r3
 8002cdc:	b21a      	sxth	r2, r3
 8002cde:	4b24      	ldr	r3, [pc, #144]	; (8002d70 <MoveBatIMU+0xdc>)
 8002ce0:	801a      	strh	r2, [r3, #0]
	accy = (int16_t)((int8_t)i2c_accData[3]);
 8002ce2:	4b21      	ldr	r3, [pc, #132]	; (8002d68 <MoveBatIMU+0xd4>)
 8002ce4:	78db      	ldrb	r3, [r3, #3]
 8002ce6:	b25b      	sxtb	r3, r3
 8002ce8:	b21a      	sxth	r2, r3
 8002cea:	4b22      	ldr	r3, [pc, #136]	; (8002d74 <MoveBatIMU+0xe0>)
 8002cec:	801a      	strh	r2, [r3, #0]
	accx = (int16_t)((int8_t)i2c_accData[1]);
 8002cee:	4b1e      	ldr	r3, [pc, #120]	; (8002d68 <MoveBatIMU+0xd4>)
 8002cf0:	785b      	ldrb	r3, [r3, #1]
 8002cf2:	b25b      	sxtb	r3, r3
 8002cf4:	b21a      	sxth	r2, r3
 8002cf6:	4b20      	ldr	r3, [pc, #128]	; (8002d78 <MoveBatIMU+0xe4>)
 8002cf8:	801a      	strh	r2, [r3, #0]

	if (accx>31){
 8002cfa:	4b1f      	ldr	r3, [pc, #124]	; (8002d78 <MoveBatIMU+0xe4>)
 8002cfc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d00:	2b1f      	cmp	r3, #31
 8002d02:	dd03      	ble.n	8002d0c <MoveBatIMU+0x78>
		IMUDirectionT = 2; //left
 8002d04:	4b1d      	ldr	r3, [pc, #116]	; (8002d7c <MoveBatIMU+0xe8>)
 8002d06:	2202      	movs	r2, #2
 8002d08:	701a      	strb	r2, [r3, #0]
	}else
	{
		IMUDirectionT=0; //no dirction
	}

}
 8002d0a:	e01f      	b.n	8002d4c <MoveBatIMU+0xb8>
	if (accx<-31){
 8002d0c:	4b1a      	ldr	r3, [pc, #104]	; (8002d78 <MoveBatIMU+0xe4>)
 8002d0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d12:	f113 0f1f 	cmn.w	r3, #31
 8002d16:	da03      	bge.n	8002d20 <MoveBatIMU+0x8c>
		IMUDirectionT =1 ;//right
 8002d18:	4b18      	ldr	r3, [pc, #96]	; (8002d7c <MoveBatIMU+0xe8>)
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	701a      	strb	r2, [r3, #0]
}
 8002d1e:	e015      	b.n	8002d4c <MoveBatIMU+0xb8>
	if (accy<-31){
 8002d20:	4b14      	ldr	r3, [pc, #80]	; (8002d74 <MoveBatIMU+0xe0>)
 8002d22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d26:	f113 0f1f 	cmn.w	r3, #31
 8002d2a:	da03      	bge.n	8002d34 <MoveBatIMU+0xa0>
		IMUDirectionT=3; //up
 8002d2c:	4b13      	ldr	r3, [pc, #76]	; (8002d7c <MoveBatIMU+0xe8>)
 8002d2e:	2203      	movs	r2, #3
 8002d30:	701a      	strb	r2, [r3, #0]
}
 8002d32:	e00b      	b.n	8002d4c <MoveBatIMU+0xb8>
	if (accy>31){
 8002d34:	4b0f      	ldr	r3, [pc, #60]	; (8002d74 <MoveBatIMU+0xe0>)
 8002d36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d3a:	2b1f      	cmp	r3, #31
 8002d3c:	dd03      	ble.n	8002d46 <MoveBatIMU+0xb2>
		IMUDirectionT = 4; //down
 8002d3e:	4b0f      	ldr	r3, [pc, #60]	; (8002d7c <MoveBatIMU+0xe8>)
 8002d40:	2204      	movs	r2, #4
 8002d42:	701a      	strb	r2, [r3, #0]
}
 8002d44:	e002      	b.n	8002d4c <MoveBatIMU+0xb8>
		IMUDirectionT=0; //no dirction
 8002d46:	4b0d      	ldr	r3, [pc, #52]	; (8002d7c <MoveBatIMU+0xe8>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	701a      	strb	r2, [r3, #0]
}
 8002d4c:	bf00      	nop
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	20000006 	.word	0x20000006
 8002d58:	2000009c 	.word	0x2000009c
 8002d5c:	20000002 	.word	0x20000002
 8002d60:	200000c0 	.word	0x200000c0
 8002d64:	200000bc 	.word	0x200000bc
 8002d68:	200000a4 	.word	0x200000a4
 8002d6c:	200000bd 	.word	0x200000bd
 8002d70:	200000b0 	.word	0x200000b0
 8002d74:	200000ae 	.word	0x200000ae
 8002d78:	200000ac 	.word	0x200000ac
 8002d7c:	200000b5 	.word	0x200000b5

08002d80 <moveBat>:

void moveBat(){
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
	if ( ((ButtonU.needsAction) ||(accy<-31)) && (bat.upperBatPos>=1) ){
 8002d84:	4b3a      	ldr	r3, [pc, #232]	; (8002e70 <moveBat+0xf0>)
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d105      	bne.n	8002d98 <moveBat+0x18>
 8002d8c:	4b39      	ldr	r3, [pc, #228]	; (8002e74 <moveBat+0xf4>)
 8002d8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d92:	f113 0f1f 	cmn.w	r3, #31
 8002d96:	da12      	bge.n	8002dbe <moveBat+0x3e>
 8002d98:	4b37      	ldr	r3, [pc, #220]	; (8002e78 <moveBat+0xf8>)
 8002d9a:	789b      	ldrb	r3, [r3, #2]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d00e      	beq.n	8002dbe <moveBat+0x3e>
		bat.upperBatPos --;
 8002da0:	4b35      	ldr	r3, [pc, #212]	; (8002e78 <moveBat+0xf8>)
 8002da2:	789b      	ldrb	r3, [r3, #2]
 8002da4:	3b01      	subs	r3, #1
 8002da6:	b2da      	uxtb	r2, r3
 8002da8:	4b33      	ldr	r3, [pc, #204]	; (8002e78 <moveBat+0xf8>)
 8002daa:	709a      	strb	r2, [r3, #2]
		bat.lowerBatPos = bat.upperBatPos +1;
 8002dac:	4b32      	ldr	r3, [pc, #200]	; (8002e78 <moveBat+0xf8>)
 8002dae:	789b      	ldrb	r3, [r3, #2]
 8002db0:	3301      	adds	r3, #1
 8002db2:	b2da      	uxtb	r2, r3
 8002db4:	4b30      	ldr	r3, [pc, #192]	; (8002e78 <moveBat+0xf8>)
 8002db6:	70da      	strb	r2, [r3, #3]
		ButtonU.needsAction=0;
 8002db8:	4b2d      	ldr	r3, [pc, #180]	; (8002e70 <moveBat+0xf0>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	701a      	strb	r2, [r3, #0]
	}
	if (((ButtonD.needsAction) ||(accy>31)) && (bat.upperBatPos<=5)){
 8002dbe:	4b2f      	ldr	r3, [pc, #188]	; (8002e7c <moveBat+0xfc>)
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d104      	bne.n	8002dd0 <moveBat+0x50>
 8002dc6:	4b2b      	ldr	r3, [pc, #172]	; (8002e74 <moveBat+0xf4>)
 8002dc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002dcc:	2b1f      	cmp	r3, #31
 8002dce:	dd12      	ble.n	8002df6 <moveBat+0x76>
 8002dd0:	4b29      	ldr	r3, [pc, #164]	; (8002e78 <moveBat+0xf8>)
 8002dd2:	789b      	ldrb	r3, [r3, #2]
 8002dd4:	2b05      	cmp	r3, #5
 8002dd6:	d80e      	bhi.n	8002df6 <moveBat+0x76>
			bat.upperBatPos ++;
 8002dd8:	4b27      	ldr	r3, [pc, #156]	; (8002e78 <moveBat+0xf8>)
 8002dda:	789b      	ldrb	r3, [r3, #2]
 8002ddc:	3301      	adds	r3, #1
 8002dde:	b2da      	uxtb	r2, r3
 8002de0:	4b25      	ldr	r3, [pc, #148]	; (8002e78 <moveBat+0xf8>)
 8002de2:	709a      	strb	r2, [r3, #2]
			bat.lowerBatPos = bat.upperBatPos +1;
 8002de4:	4b24      	ldr	r3, [pc, #144]	; (8002e78 <moveBat+0xf8>)
 8002de6:	789b      	ldrb	r3, [r3, #2]
 8002de8:	3301      	adds	r3, #1
 8002dea:	b2da      	uxtb	r2, r3
 8002dec:	4b22      	ldr	r3, [pc, #136]	; (8002e78 <moveBat+0xf8>)
 8002dee:	70da      	strb	r2, [r3, #3]
			ButtonD.needsAction=0;
 8002df0:	4b22      	ldr	r3, [pc, #136]	; (8002e7c <moveBat+0xfc>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	701a      	strb	r2, [r3, #0]
		}

	if (((ButtonL.needsAction) ||(accx >31)) && (bat.xpos >=1)){
 8002df6:	4b22      	ldr	r3, [pc, #136]	; (8002e80 <moveBat+0x100>)
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d104      	bne.n	8002e08 <moveBat+0x88>
 8002dfe:	4b21      	ldr	r3, [pc, #132]	; (8002e84 <moveBat+0x104>)
 8002e00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e04:	2b1f      	cmp	r3, #31
 8002e06:	dd12      	ble.n	8002e2e <moveBat+0xae>
 8002e08:	4b1b      	ldr	r3, [pc, #108]	; (8002e78 <moveBat+0xf8>)
 8002e0a:	785b      	ldrb	r3, [r3, #1]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d00e      	beq.n	8002e2e <moveBat+0xae>
			bat.xpos -- ;
 8002e10:	4b19      	ldr	r3, [pc, #100]	; (8002e78 <moveBat+0xf8>)
 8002e12:	785b      	ldrb	r3, [r3, #1]
 8002e14:	3b01      	subs	r3, #1
 8002e16:	b2da      	uxtb	r2, r3
 8002e18:	4b17      	ldr	r3, [pc, #92]	; (8002e78 <moveBat+0xf8>)
 8002e1a:	705a      	strb	r2, [r3, #1]
			bat.lowerBatPos = bat.upperBatPos +1;
 8002e1c:	4b16      	ldr	r3, [pc, #88]	; (8002e78 <moveBat+0xf8>)
 8002e1e:	789b      	ldrb	r3, [r3, #2]
 8002e20:	3301      	adds	r3, #1
 8002e22:	b2da      	uxtb	r2, r3
 8002e24:	4b14      	ldr	r3, [pc, #80]	; (8002e78 <moveBat+0xf8>)
 8002e26:	70da      	strb	r2, [r3, #3]
			ButtonL.needsAction=0;
 8002e28:	4b15      	ldr	r3, [pc, #84]	; (8002e80 <moveBat+0x100>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	701a      	strb	r2, [r3, #0]
		}
	if (((ButtonR.needsAction) || (accx <-31)) && (bat.xpos<=6)){
 8002e2e:	4b16      	ldr	r3, [pc, #88]	; (8002e88 <moveBat+0x108>)
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d105      	bne.n	8002e42 <moveBat+0xc2>
 8002e36:	4b13      	ldr	r3, [pc, #76]	; (8002e84 <moveBat+0x104>)
 8002e38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e3c:	f113 0f1f 	cmn.w	r3, #31
 8002e40:	da12      	bge.n	8002e68 <moveBat+0xe8>
 8002e42:	4b0d      	ldr	r3, [pc, #52]	; (8002e78 <moveBat+0xf8>)
 8002e44:	785b      	ldrb	r3, [r3, #1]
 8002e46:	2b06      	cmp	r3, #6
 8002e48:	d80e      	bhi.n	8002e68 <moveBat+0xe8>
			bat.xpos ++;
 8002e4a:	4b0b      	ldr	r3, [pc, #44]	; (8002e78 <moveBat+0xf8>)
 8002e4c:	785b      	ldrb	r3, [r3, #1]
 8002e4e:	3301      	adds	r3, #1
 8002e50:	b2da      	uxtb	r2, r3
 8002e52:	4b09      	ldr	r3, [pc, #36]	; (8002e78 <moveBat+0xf8>)
 8002e54:	705a      	strb	r2, [r3, #1]
			bat.lowerBatPos = bat.upperBatPos +1;
 8002e56:	4b08      	ldr	r3, [pc, #32]	; (8002e78 <moveBat+0xf8>)
 8002e58:	789b      	ldrb	r3, [r3, #2]
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	b2da      	uxtb	r2, r3
 8002e5e:	4b06      	ldr	r3, [pc, #24]	; (8002e78 <moveBat+0xf8>)
 8002e60:	70da      	strb	r2, [r3, #3]
			ButtonR.needsAction=0;
 8002e62:	4b09      	ldr	r3, [pc, #36]	; (8002e88 <moveBat+0x108>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	701a      	strb	r2, [r3, #0]
		}
}
 8002e68:	bf00      	nop
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bc80      	pop	{r7}
 8002e6e:	4770      	bx	lr
 8002e70:	20000038 	.word	0x20000038
 8002e74:	200000ae 	.word	0x200000ae
 8002e78:	20000050 	.word	0x20000050
 8002e7c:	2000002c 	.word	0x2000002c
 8002e80:	20000014 	.word	0x20000014
 8002e84:	200000ac 	.word	0x200000ac
 8002e88:	20000020 	.word	0x20000020

08002e8c <updateBallSpeed>:
void updateBallSpeed(){
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0

	if (tBall.hitBatCounter <3){
 8002e90:	4b45      	ldr	r3, [pc, #276]	; (8002fa8 <updateBallSpeed+0x11c>)
 8002e92:	78db      	ldrb	r3, [r3, #3]
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d807      	bhi.n	8002ea8 <updateBallSpeed+0x1c>
		ballUpdateTime = 700;
 8002e98:	4b44      	ldr	r3, [pc, #272]	; (8002fac <updateBallSpeed+0x120>)
 8002e9a:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8002e9e:	801a      	strh	r2, [r3, #0]
		tBall.velocity =1;
 8002ea0:	4b41      	ldr	r3, [pc, #260]	; (8002fa8 <updateBallSpeed+0x11c>)
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	711a      	strb	r2, [r3, #4]
		ballUpdateTime = 300;
		tBall.velocity =9;
	}


}
 8002ea6:	e07b      	b.n	8002fa0 <updateBallSpeed+0x114>
	if ((tBall.hitBatCounter>=3) && (tBall.hitBatCounter<6)){
 8002ea8:	4b3f      	ldr	r3, [pc, #252]	; (8002fa8 <updateBallSpeed+0x11c>)
 8002eaa:	78db      	ldrb	r3, [r3, #3]
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d90b      	bls.n	8002ec8 <updateBallSpeed+0x3c>
 8002eb0:	4b3d      	ldr	r3, [pc, #244]	; (8002fa8 <updateBallSpeed+0x11c>)
 8002eb2:	78db      	ldrb	r3, [r3, #3]
 8002eb4:	2b05      	cmp	r3, #5
 8002eb6:	d807      	bhi.n	8002ec8 <updateBallSpeed+0x3c>
		ballUpdateTime = 650;
 8002eb8:	4b3c      	ldr	r3, [pc, #240]	; (8002fac <updateBallSpeed+0x120>)
 8002eba:	f240 228a 	movw	r2, #650	; 0x28a
 8002ebe:	801a      	strh	r2, [r3, #0]
		tBall.velocity =2;
 8002ec0:	4b39      	ldr	r3, [pc, #228]	; (8002fa8 <updateBallSpeed+0x11c>)
 8002ec2:	2202      	movs	r2, #2
 8002ec4:	711a      	strb	r2, [r3, #4]
 8002ec6:	e06b      	b.n	8002fa0 <updateBallSpeed+0x114>
	if ((tBall.hitBatCounter>=6) && (tBall.hitBatCounter<9)){
 8002ec8:	4b37      	ldr	r3, [pc, #220]	; (8002fa8 <updateBallSpeed+0x11c>)
 8002eca:	78db      	ldrb	r3, [r3, #3]
 8002ecc:	2b05      	cmp	r3, #5
 8002ece:	d90b      	bls.n	8002ee8 <updateBallSpeed+0x5c>
 8002ed0:	4b35      	ldr	r3, [pc, #212]	; (8002fa8 <updateBallSpeed+0x11c>)
 8002ed2:	78db      	ldrb	r3, [r3, #3]
 8002ed4:	2b08      	cmp	r3, #8
 8002ed6:	d807      	bhi.n	8002ee8 <updateBallSpeed+0x5c>
		ballUpdateTime = 600;
 8002ed8:	4b34      	ldr	r3, [pc, #208]	; (8002fac <updateBallSpeed+0x120>)
 8002eda:	f44f 7216 	mov.w	r2, #600	; 0x258
 8002ede:	801a      	strh	r2, [r3, #0]
		tBall.velocity =3;
 8002ee0:	4b31      	ldr	r3, [pc, #196]	; (8002fa8 <updateBallSpeed+0x11c>)
 8002ee2:	2203      	movs	r2, #3
 8002ee4:	711a      	strb	r2, [r3, #4]
 8002ee6:	e05b      	b.n	8002fa0 <updateBallSpeed+0x114>
	if ((tBall.hitBatCounter>=9) && (tBall.hitBatCounter<12)){
 8002ee8:	4b2f      	ldr	r3, [pc, #188]	; (8002fa8 <updateBallSpeed+0x11c>)
 8002eea:	78db      	ldrb	r3, [r3, #3]
 8002eec:	2b08      	cmp	r3, #8
 8002eee:	d90b      	bls.n	8002f08 <updateBallSpeed+0x7c>
 8002ef0:	4b2d      	ldr	r3, [pc, #180]	; (8002fa8 <updateBallSpeed+0x11c>)
 8002ef2:	78db      	ldrb	r3, [r3, #3]
 8002ef4:	2b0b      	cmp	r3, #11
 8002ef6:	d807      	bhi.n	8002f08 <updateBallSpeed+0x7c>
		ballUpdateTime = 550;
 8002ef8:	4b2c      	ldr	r3, [pc, #176]	; (8002fac <updateBallSpeed+0x120>)
 8002efa:	f240 2226 	movw	r2, #550	; 0x226
 8002efe:	801a      	strh	r2, [r3, #0]
		tBall.velocity =4;
 8002f00:	4b29      	ldr	r3, [pc, #164]	; (8002fa8 <updateBallSpeed+0x11c>)
 8002f02:	2204      	movs	r2, #4
 8002f04:	711a      	strb	r2, [r3, #4]
 8002f06:	e04b      	b.n	8002fa0 <updateBallSpeed+0x114>
	if ((tBall.hitBatCounter>=12) && (tBall.hitBatCounter<15)){
 8002f08:	4b27      	ldr	r3, [pc, #156]	; (8002fa8 <updateBallSpeed+0x11c>)
 8002f0a:	78db      	ldrb	r3, [r3, #3]
 8002f0c:	2b0b      	cmp	r3, #11
 8002f0e:	d90b      	bls.n	8002f28 <updateBallSpeed+0x9c>
 8002f10:	4b25      	ldr	r3, [pc, #148]	; (8002fa8 <updateBallSpeed+0x11c>)
 8002f12:	78db      	ldrb	r3, [r3, #3]
 8002f14:	2b0e      	cmp	r3, #14
 8002f16:	d807      	bhi.n	8002f28 <updateBallSpeed+0x9c>
		ballUpdateTime = 500;
 8002f18:	4b24      	ldr	r3, [pc, #144]	; (8002fac <updateBallSpeed+0x120>)
 8002f1a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002f1e:	801a      	strh	r2, [r3, #0]
		tBall.velocity =5;
 8002f20:	4b21      	ldr	r3, [pc, #132]	; (8002fa8 <updateBallSpeed+0x11c>)
 8002f22:	2205      	movs	r2, #5
 8002f24:	711a      	strb	r2, [r3, #4]
 8002f26:	e03b      	b.n	8002fa0 <updateBallSpeed+0x114>
	if ((tBall.hitBatCounter>=15) && (tBall.hitBatCounter<18)){
 8002f28:	4b1f      	ldr	r3, [pc, #124]	; (8002fa8 <updateBallSpeed+0x11c>)
 8002f2a:	78db      	ldrb	r3, [r3, #3]
 8002f2c:	2b0e      	cmp	r3, #14
 8002f2e:	d90b      	bls.n	8002f48 <updateBallSpeed+0xbc>
 8002f30:	4b1d      	ldr	r3, [pc, #116]	; (8002fa8 <updateBallSpeed+0x11c>)
 8002f32:	78db      	ldrb	r3, [r3, #3]
 8002f34:	2b11      	cmp	r3, #17
 8002f36:	d807      	bhi.n	8002f48 <updateBallSpeed+0xbc>
		ballUpdateTime = 450;
 8002f38:	4b1c      	ldr	r3, [pc, #112]	; (8002fac <updateBallSpeed+0x120>)
 8002f3a:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8002f3e:	801a      	strh	r2, [r3, #0]
		tBall.velocity =6;
 8002f40:	4b19      	ldr	r3, [pc, #100]	; (8002fa8 <updateBallSpeed+0x11c>)
 8002f42:	2206      	movs	r2, #6
 8002f44:	711a      	strb	r2, [r3, #4]
 8002f46:	e02b      	b.n	8002fa0 <updateBallSpeed+0x114>
	if ((tBall.hitBatCounter>=18) && (tBall.hitBatCounter<21)){
 8002f48:	4b17      	ldr	r3, [pc, #92]	; (8002fa8 <updateBallSpeed+0x11c>)
 8002f4a:	78db      	ldrb	r3, [r3, #3]
 8002f4c:	2b11      	cmp	r3, #17
 8002f4e:	d90b      	bls.n	8002f68 <updateBallSpeed+0xdc>
 8002f50:	4b15      	ldr	r3, [pc, #84]	; (8002fa8 <updateBallSpeed+0x11c>)
 8002f52:	78db      	ldrb	r3, [r3, #3]
 8002f54:	2b14      	cmp	r3, #20
 8002f56:	d807      	bhi.n	8002f68 <updateBallSpeed+0xdc>
		ballUpdateTime = 400;
 8002f58:	4b14      	ldr	r3, [pc, #80]	; (8002fac <updateBallSpeed+0x120>)
 8002f5a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002f5e:	801a      	strh	r2, [r3, #0]
		tBall.velocity =7;
 8002f60:	4b11      	ldr	r3, [pc, #68]	; (8002fa8 <updateBallSpeed+0x11c>)
 8002f62:	2207      	movs	r2, #7
 8002f64:	711a      	strb	r2, [r3, #4]
 8002f66:	e01b      	b.n	8002fa0 <updateBallSpeed+0x114>
	if ((tBall.hitBatCounter>=21) && (tBall.hitBatCounter<24)){
 8002f68:	4b0f      	ldr	r3, [pc, #60]	; (8002fa8 <updateBallSpeed+0x11c>)
 8002f6a:	78db      	ldrb	r3, [r3, #3]
 8002f6c:	2b14      	cmp	r3, #20
 8002f6e:	d90b      	bls.n	8002f88 <updateBallSpeed+0xfc>
 8002f70:	4b0d      	ldr	r3, [pc, #52]	; (8002fa8 <updateBallSpeed+0x11c>)
 8002f72:	78db      	ldrb	r3, [r3, #3]
 8002f74:	2b17      	cmp	r3, #23
 8002f76:	d807      	bhi.n	8002f88 <updateBallSpeed+0xfc>
		ballUpdateTime = 350;
 8002f78:	4b0c      	ldr	r3, [pc, #48]	; (8002fac <updateBallSpeed+0x120>)
 8002f7a:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8002f7e:	801a      	strh	r2, [r3, #0]
		tBall.velocity =8;
 8002f80:	4b09      	ldr	r3, [pc, #36]	; (8002fa8 <updateBallSpeed+0x11c>)
 8002f82:	2208      	movs	r2, #8
 8002f84:	711a      	strb	r2, [r3, #4]
 8002f86:	e00b      	b.n	8002fa0 <updateBallSpeed+0x114>
	if (tBall.hitBatCounter > 24){
 8002f88:	4b07      	ldr	r3, [pc, #28]	; (8002fa8 <updateBallSpeed+0x11c>)
 8002f8a:	78db      	ldrb	r3, [r3, #3]
 8002f8c:	2b18      	cmp	r3, #24
 8002f8e:	d907      	bls.n	8002fa0 <updateBallSpeed+0x114>
		ballUpdateTime = 300;
 8002f90:	4b06      	ldr	r3, [pc, #24]	; (8002fac <updateBallSpeed+0x120>)
 8002f92:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f96:	801a      	strh	r2, [r3, #0]
		tBall.velocity =9;
 8002f98:	4b03      	ldr	r3, [pc, #12]	; (8002fa8 <updateBallSpeed+0x11c>)
 8002f9a:	2209      	movs	r2, #9
 8002f9c:	711a      	strb	r2, [r3, #4]
}
 8002f9e:	e7ff      	b.n	8002fa0 <updateBallSpeed+0x114>
 8002fa0:	bf00      	nop
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bc80      	pop	{r7}
 8002fa6:	4770      	bx	lr
 8002fa8:	200001c4 	.word	0x200001c4
 8002fac:	20000000 	.word	0x20000000

08002fb0 <sendTennisUART>:
void sendTennisUART(){
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0

	if (counterTennisUART >= 100){
 8002fb6:	4b32      	ldr	r3, [pc, #200]	; (8003080 <sendTennisUART+0xd0>)
 8002fb8:	881b      	ldrh	r3, [r3, #0]
 8002fba:	2b63      	cmp	r3, #99	; 0x63
 8002fbc:	d95b      	bls.n	8003076 <sendTennisUART+0xc6>
		MoveBatIMU();
 8002fbe:	f7ff fe69 	bl	8002c94 <MoveBatIMU>
		moveBat();
 8002fc2:	f7ff fedd 	bl	8002d80 <moveBat>
		uint8_t positionMsg[] = "$2xxxxxxx\n";
 8002fc6:	4a2f      	ldr	r2, [pc, #188]	; (8003084 <sendTennisUART+0xd4>)
 8002fc8:	1d3b      	adds	r3, r7, #4
 8002fca:	ca07      	ldmia	r2, {r0, r1, r2}
 8002fcc:	c303      	stmia	r3!, {r0, r1}
 8002fce:	801a      	strh	r2, [r3, #0]
 8002fd0:	3302      	adds	r3, #2
 8002fd2:	0c12      	lsrs	r2, r2, #16
 8002fd4:	701a      	strb	r2, [r3, #0]

			positionMsg[2] = tBall.xpos 		+ 48;
 8002fd6:	4b2c      	ldr	r3, [pc, #176]	; (8003088 <sendTennisUART+0xd8>)
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	3330      	adds	r3, #48	; 0x30
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	71bb      	strb	r3, [r7, #6]
			positionMsg[3] = tBall.ypos 		+ 48;
 8002fe0:	4b29      	ldr	r3, [pc, #164]	; (8003088 <sendTennisUART+0xd8>)
 8002fe2:	785b      	ldrb	r3, [r3, #1]
 8002fe4:	3330      	adds	r3, #48	; 0x30
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	71fb      	strb	r3, [r7, #7]
			positionMsg[4] = tBall.velocity 	+ 48;
 8002fea:	4b27      	ldr	r3, [pc, #156]	; (8003088 <sendTennisUART+0xd8>)
 8002fec:	791b      	ldrb	r3, [r3, #4]
 8002fee:	3330      	adds	r3, #48	; 0x30
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	723b      	strb	r3, [r7, #8]
			positionMsg[5] = tBall.direction	+ 48;
 8002ff4:	4b24      	ldr	r3, [pc, #144]	; (8003088 <sendTennisUART+0xd8>)
 8002ff6:	789b      	ldrb	r3, [r3, #2]
 8002ff8:	3330      	adds	r3, #48	; 0x30
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	727b      	strb	r3, [r7, #9]
			positionMsg[6] = bat.xpos			+ 48;
 8002ffe:	4b23      	ldr	r3, [pc, #140]	; (800308c <sendTennisUART+0xdc>)
 8003000:	785b      	ldrb	r3, [r3, #1]
 8003002:	3330      	adds	r3, #48	; 0x30
 8003004:	b2db      	uxtb	r3, r3
 8003006:	72bb      	strb	r3, [r7, #10]
			positionMsg[7] = bat.upperBatPos 	+ 48;
 8003008:	4b20      	ldr	r3, [pc, #128]	; (800308c <sendTennisUART+0xdc>)
 800300a:	789b      	ldrb	r3, [r3, #2]
 800300c:	3330      	adds	r3, #48	; 0x30
 800300e:	b2db      	uxtb	r3, r3
 8003010:	72fb      	strb	r3, [r7, #11]

			if (IMUDirectionT==0){
 8003012:	4b1f      	ldr	r3, [pc, #124]	; (8003090 <sendTennisUART+0xe0>)
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d102      	bne.n	8003020 <sendTennisUART+0x70>
				positionMsg[8] = 'N';
 800301a:	234e      	movs	r3, #78	; 0x4e
 800301c:	733b      	strb	r3, [r7, #12]
 800301e:	e01a      	b.n	8003056 <sendTennisUART+0xa6>
			}else
			if (IMUDirectionT==1){
 8003020:	4b1b      	ldr	r3, [pc, #108]	; (8003090 <sendTennisUART+0xe0>)
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	2b01      	cmp	r3, #1
 8003026:	d102      	bne.n	800302e <sendTennisUART+0x7e>
				positionMsg[8] = 'R';
 8003028:	2352      	movs	r3, #82	; 0x52
 800302a:	733b      	strb	r3, [r7, #12]
 800302c:	e013      	b.n	8003056 <sendTennisUART+0xa6>
			}else
			if (IMUDirectionT==2){
 800302e:	4b18      	ldr	r3, [pc, #96]	; (8003090 <sendTennisUART+0xe0>)
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	2b02      	cmp	r3, #2
 8003034:	d102      	bne.n	800303c <sendTennisUART+0x8c>
				positionMsg[8] = 'L';
 8003036:	234c      	movs	r3, #76	; 0x4c
 8003038:	733b      	strb	r3, [r7, #12]
 800303a:	e00c      	b.n	8003056 <sendTennisUART+0xa6>
			}else
			if (IMUDirectionT==3){
 800303c:	4b14      	ldr	r3, [pc, #80]	; (8003090 <sendTennisUART+0xe0>)
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	2b03      	cmp	r3, #3
 8003042:	d102      	bne.n	800304a <sendTennisUART+0x9a>
				positionMsg[8] = 'U';
 8003044:	2355      	movs	r3, #85	; 0x55
 8003046:	733b      	strb	r3, [r7, #12]
 8003048:	e005      	b.n	8003056 <sendTennisUART+0xa6>
			}else
			if (IMUDirectionT==4){
 800304a:	4b11      	ldr	r3, [pc, #68]	; (8003090 <sendTennisUART+0xe0>)
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	2b04      	cmp	r3, #4
 8003050:	d101      	bne.n	8003056 <sendTennisUART+0xa6>
				positionMsg[8] = 'D';
 8003052:	2344      	movs	r3, #68	; 0x44
 8003054:	733b      	strb	r3, [r7, #12]
			}
			HAL_UART_Transmit(&huart2,positionMsg,10,100);
 8003056:	1d39      	adds	r1, r7, #4
 8003058:	2364      	movs	r3, #100	; 0x64
 800305a:	220a      	movs	r2, #10
 800305c:	480d      	ldr	r0, [pc, #52]	; (8003094 <sendTennisUART+0xe4>)
 800305e:	f002 fd2c 	bl	8005aba <HAL_UART_Transmit>

			//reset counterTennisUART
			counterTennisUART = 0;
 8003062:	4b07      	ldr	r3, [pc, #28]	; (8003080 <sendTennisUART+0xd0>)
 8003064:	2200      	movs	r2, #0
 8003066:	801a      	strh	r2, [r3, #0]

			if (tBall.xpos==0){
 8003068:	4b07      	ldr	r3, [pc, #28]	; (8003088 <sendTennisUART+0xd8>)
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d102      	bne.n	8003076 <sendTennisUART+0xc6>
				//exit the game
					inTennisGameFlag=0;
 8003070:	4b09      	ldr	r3, [pc, #36]	; (8003098 <sendTennisUART+0xe8>)
 8003072:	2200      	movs	r2, #0
 8003074:	701a      	strb	r2, [r3, #0]
			}
	}

}
 8003076:	bf00      	nop
 8003078:	3710      	adds	r7, #16
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	2000008e 	.word	0x2000008e
 8003084:	08005e78 	.word	0x08005e78
 8003088:	200001c4 	.word	0x200001c4
 800308c:	20000050 	.word	0x20000050
 8003090:	200000b5 	.word	0x200000b5
 8003094:	20000144 	.word	0x20000144
 8003098:	200000b2 	.word	0x200000b2

0800309c <checkBounds>:
void checkBounds(){
 800309c:	b480      	push	{r7}
 800309e:	af00      	add	r7, sp, #0


	//hit bat checking
	if (((tBall.xpos -1) == bat.xpos) && ((tBall.ypos ==bat.lowerBatPos) || (tBall.ypos==bat.upperBatPos))){
 80030a0:	4b55      	ldr	r3, [pc, #340]	; (80031f8 <checkBounds+0x15c>)
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	3b01      	subs	r3, #1
 80030a6:	4a55      	ldr	r2, [pc, #340]	; (80031fc <checkBounds+0x160>)
 80030a8:	7852      	ldrb	r2, [r2, #1]
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d131      	bne.n	8003112 <checkBounds+0x76>
 80030ae:	4b52      	ldr	r3, [pc, #328]	; (80031f8 <checkBounds+0x15c>)
 80030b0:	785a      	ldrb	r2, [r3, #1]
 80030b2:	4b52      	ldr	r3, [pc, #328]	; (80031fc <checkBounds+0x160>)
 80030b4:	78db      	ldrb	r3, [r3, #3]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d005      	beq.n	80030c6 <checkBounds+0x2a>
 80030ba:	4b4f      	ldr	r3, [pc, #316]	; (80031f8 <checkBounds+0x15c>)
 80030bc:	785a      	ldrb	r2, [r3, #1]
 80030be:	4b4f      	ldr	r3, [pc, #316]	; (80031fc <checkBounds+0x160>)
 80030c0:	789b      	ldrb	r3, [r3, #2]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d125      	bne.n	8003112 <checkBounds+0x76>

		//update counter for number of times ball has hit the bat


		switch(tBall.direction){
 80030c6:	4b4c      	ldr	r3, [pc, #304]	; (80031f8 <checkBounds+0x15c>)
 80030c8:	789b      	ldrb	r3, [r3, #2]
 80030ca:	2b03      	cmp	r3, #3
 80030cc:	d00d      	beq.n	80030ea <checkBounds+0x4e>
 80030ce:	2b05      	cmp	r3, #5
 80030d0:	d015      	beq.n	80030fe <checkBounds+0x62>
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d11d      	bne.n	8003112 <checkBounds+0x76>
		case 0 :
			tBall.direction = 4;
 80030d6:	4b48      	ldr	r3, [pc, #288]	; (80031f8 <checkBounds+0x15c>)
 80030d8:	2204      	movs	r2, #4
 80030da:	709a      	strb	r2, [r3, #2]
			tBall.hitBatCounter +=1;
 80030dc:	4b46      	ldr	r3, [pc, #280]	; (80031f8 <checkBounds+0x15c>)
 80030de:	78db      	ldrb	r3, [r3, #3]
 80030e0:	3301      	adds	r3, #1
 80030e2:	b2da      	uxtb	r2, r3
 80030e4:	4b44      	ldr	r3, [pc, #272]	; (80031f8 <checkBounds+0x15c>)
 80030e6:	70da      	strb	r2, [r3, #3]
			break ;
 80030e8:	e013      	b.n	8003112 <checkBounds+0x76>
		case 3 :
			tBall.direction = 4;
 80030ea:	4b43      	ldr	r3, [pc, #268]	; (80031f8 <checkBounds+0x15c>)
 80030ec:	2204      	movs	r2, #4
 80030ee:	709a      	strb	r2, [r3, #2]
			tBall.hitBatCounter +=1;
 80030f0:	4b41      	ldr	r3, [pc, #260]	; (80031f8 <checkBounds+0x15c>)
 80030f2:	78db      	ldrb	r3, [r3, #3]
 80030f4:	3301      	adds	r3, #1
 80030f6:	b2da      	uxtb	r2, r3
 80030f8:	4b3f      	ldr	r3, [pc, #252]	; (80031f8 <checkBounds+0x15c>)
 80030fa:	70da      	strb	r2, [r3, #3]
			break ;
 80030fc:	e009      	b.n	8003112 <checkBounds+0x76>
		case 5 :
			tBall.direction = 2;
 80030fe:	4b3e      	ldr	r3, [pc, #248]	; (80031f8 <checkBounds+0x15c>)
 8003100:	2202      	movs	r2, #2
 8003102:	709a      	strb	r2, [r3, #2]
			tBall.hitBatCounter +=1;
 8003104:	4b3c      	ldr	r3, [pc, #240]	; (80031f8 <checkBounds+0x15c>)
 8003106:	78db      	ldrb	r3, [r3, #3]
 8003108:	3301      	adds	r3, #1
 800310a:	b2da      	uxtb	r2, r3
 800310c:	4b3a      	ldr	r3, [pc, #232]	; (80031f8 <checkBounds+0x15c>)
 800310e:	70da      	strb	r2, [r3, #3]
			break;
 8003110:	bf00      	nop
	}

	//2 special cases of when the ball is coming at the bat at the angle and hitting the edge of the bat

		// tBall coming in from top right to hit top bat edge
		if ((tBall.xpos-1 ==bat.xpos) && (tBall.ypos+1 ==bat.upperBatPos) && (tBall.direction==5)){
 8003112:	4b39      	ldr	r3, [pc, #228]	; (80031f8 <checkBounds+0x15c>)
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	3b01      	subs	r3, #1
 8003118:	4a38      	ldr	r2, [pc, #224]	; (80031fc <checkBounds+0x160>)
 800311a:	7852      	ldrb	r2, [r2, #1]
 800311c:	4293      	cmp	r3, r2
 800311e:	d113      	bne.n	8003148 <checkBounds+0xac>
 8003120:	4b35      	ldr	r3, [pc, #212]	; (80031f8 <checkBounds+0x15c>)
 8003122:	785b      	ldrb	r3, [r3, #1]
 8003124:	3301      	adds	r3, #1
 8003126:	4a35      	ldr	r2, [pc, #212]	; (80031fc <checkBounds+0x160>)
 8003128:	7892      	ldrb	r2, [r2, #2]
 800312a:	4293      	cmp	r3, r2
 800312c:	d10c      	bne.n	8003148 <checkBounds+0xac>
 800312e:	4b32      	ldr	r3, [pc, #200]	; (80031f8 <checkBounds+0x15c>)
 8003130:	789b      	ldrb	r3, [r3, #2]
 8003132:	2b05      	cmp	r3, #5
 8003134:	d108      	bne.n	8003148 <checkBounds+0xac>

			tBall.hitBatCounter+=1;
 8003136:	4b30      	ldr	r3, [pc, #192]	; (80031f8 <checkBounds+0x15c>)
 8003138:	78db      	ldrb	r3, [r3, #3]
 800313a:	3301      	adds	r3, #1
 800313c:	b2da      	uxtb	r2, r3
 800313e:	4b2e      	ldr	r3, [pc, #184]	; (80031f8 <checkBounds+0x15c>)
 8003140:	70da      	strb	r2, [r3, #3]
			tBall.direction =4;
 8003142:	4b2d      	ldr	r3, [pc, #180]	; (80031f8 <checkBounds+0x15c>)
 8003144:	2204      	movs	r2, #4
 8003146:	709a      	strb	r2, [r3, #2]
		}

		//tBall coming in from bottom right to hit bottom bat edge
		if ((tBall.xpos-1 == bat.xpos) && (tBall.ypos-1 == bat.lowerBatPos) && (tBall.direction ==3)){
 8003148:	4b2b      	ldr	r3, [pc, #172]	; (80031f8 <checkBounds+0x15c>)
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	3b01      	subs	r3, #1
 800314e:	4a2b      	ldr	r2, [pc, #172]	; (80031fc <checkBounds+0x160>)
 8003150:	7852      	ldrb	r2, [r2, #1]
 8003152:	4293      	cmp	r3, r2
 8003154:	d113      	bne.n	800317e <checkBounds+0xe2>
 8003156:	4b28      	ldr	r3, [pc, #160]	; (80031f8 <checkBounds+0x15c>)
 8003158:	785b      	ldrb	r3, [r3, #1]
 800315a:	3b01      	subs	r3, #1
 800315c:	4a27      	ldr	r2, [pc, #156]	; (80031fc <checkBounds+0x160>)
 800315e:	78d2      	ldrb	r2, [r2, #3]
 8003160:	4293      	cmp	r3, r2
 8003162:	d10c      	bne.n	800317e <checkBounds+0xe2>
 8003164:	4b24      	ldr	r3, [pc, #144]	; (80031f8 <checkBounds+0x15c>)
 8003166:	789b      	ldrb	r3, [r3, #2]
 8003168:	2b03      	cmp	r3, #3
 800316a:	d108      	bne.n	800317e <checkBounds+0xe2>

			tBall.hitBatCounter+=1;
 800316c:	4b22      	ldr	r3, [pc, #136]	; (80031f8 <checkBounds+0x15c>)
 800316e:	78db      	ldrb	r3, [r3, #3]
 8003170:	3301      	adds	r3, #1
 8003172:	b2da      	uxtb	r2, r3
 8003174:	4b20      	ldr	r3, [pc, #128]	; (80031f8 <checkBounds+0x15c>)
 8003176:	70da      	strb	r2, [r3, #3]
			tBall.direction =2;
 8003178:	4b1f      	ldr	r3, [pc, #124]	; (80031f8 <checkBounds+0x15c>)
 800317a:	2202      	movs	r2, #2
 800317c:	709a      	strb	r2, [r3, #2]
		}

		//check edges of the screen

		//Right side (back wall)
		if (tBall.xpos == 7){
 800317e:	4b1e      	ldr	r3, [pc, #120]	; (80031f8 <checkBounds+0x15c>)
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	2b07      	cmp	r3, #7
 8003184:	d10e      	bne.n	80031a4 <checkBounds+0x108>

			switch (tBall.direction){
 8003186:	4b1c      	ldr	r3, [pc, #112]	; (80031f8 <checkBounds+0x15c>)
 8003188:	789b      	ldrb	r3, [r3, #2]
 800318a:	2b02      	cmp	r3, #2
 800318c:	d002      	beq.n	8003194 <checkBounds+0xf8>
 800318e:	2b04      	cmp	r3, #4
 8003190:	d004      	beq.n	800319c <checkBounds+0x100>
 8003192:	e007      	b.n	80031a4 <checkBounds+0x108>
			case 2:
				tBall.direction =5;
 8003194:	4b18      	ldr	r3, [pc, #96]	; (80031f8 <checkBounds+0x15c>)
 8003196:	2205      	movs	r2, #5
 8003198:	709a      	strb	r2, [r3, #2]
				break;
 800319a:	e003      	b.n	80031a4 <checkBounds+0x108>

			case 4 :
				tBall.direction = 3;
 800319c:	4b16      	ldr	r3, [pc, #88]	; (80031f8 <checkBounds+0x15c>)
 800319e:	2203      	movs	r2, #3
 80031a0:	709a      	strb	r2, [r3, #2]
				break;
 80031a2:	bf00      	nop
			}
		}//end (back wall)

		//Top side (top wall)
		if (tBall.ypos == 0){
 80031a4:	4b14      	ldr	r3, [pc, #80]	; (80031f8 <checkBounds+0x15c>)
 80031a6:	785b      	ldrb	r3, [r3, #1]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d10e      	bne.n	80031ca <checkBounds+0x12e>

			switch (tBall.direction){
 80031ac:	4b12      	ldr	r3, [pc, #72]	; (80031f8 <checkBounds+0x15c>)
 80031ae:	789b      	ldrb	r3, [r3, #2]
 80031b0:	2b03      	cmp	r3, #3
 80031b2:	d002      	beq.n	80031ba <checkBounds+0x11e>
 80031b4:	2b04      	cmp	r3, #4
 80031b6:	d004      	beq.n	80031c2 <checkBounds+0x126>
 80031b8:	e007      	b.n	80031ca <checkBounds+0x12e>
				case 3:
					tBall.direction = 5;
 80031ba:	4b0f      	ldr	r3, [pc, #60]	; (80031f8 <checkBounds+0x15c>)
 80031bc:	2205      	movs	r2, #5
 80031be:	709a      	strb	r2, [r3, #2]
					break;
 80031c0:	e003      	b.n	80031ca <checkBounds+0x12e>

				case 4 :
					tBall.direction = 2;
 80031c2:	4b0d      	ldr	r3, [pc, #52]	; (80031f8 <checkBounds+0x15c>)
 80031c4:	2202      	movs	r2, #2
 80031c6:	709a      	strb	r2, [r3, #2]
					break;
 80031c8:	bf00      	nop
				}

		}//end of top side checking

		if (tBall.ypos==7){
 80031ca:	4b0b      	ldr	r3, [pc, #44]	; (80031f8 <checkBounds+0x15c>)
 80031cc:	785b      	ldrb	r3, [r3, #1]
 80031ce:	2b07      	cmp	r3, #7
 80031d0:	d10e      	bne.n	80031f0 <checkBounds+0x154>

			switch (tBall.direction){
 80031d2:	4b09      	ldr	r3, [pc, #36]	; (80031f8 <checkBounds+0x15c>)
 80031d4:	789b      	ldrb	r3, [r3, #2]
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d002      	beq.n	80031e0 <checkBounds+0x144>
 80031da:	2b05      	cmp	r3, #5
 80031dc:	d004      	beq.n	80031e8 <checkBounds+0x14c>
					tBall.direction = 3;
					break;
				}
		}//end of bottom checking

}
 80031de:	e007      	b.n	80031f0 <checkBounds+0x154>
					tBall.direction = 4;
 80031e0:	4b05      	ldr	r3, [pc, #20]	; (80031f8 <checkBounds+0x15c>)
 80031e2:	2204      	movs	r2, #4
 80031e4:	709a      	strb	r2, [r3, #2]
					break;
 80031e6:	e003      	b.n	80031f0 <checkBounds+0x154>
					tBall.direction = 3;
 80031e8:	4b03      	ldr	r3, [pc, #12]	; (80031f8 <checkBounds+0x15c>)
 80031ea:	2203      	movs	r2, #3
 80031ec:	709a      	strb	r2, [r3, #2]
					break;
 80031ee:	bf00      	nop
}
 80031f0:	bf00      	nop
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bc80      	pop	{r7}
 80031f6:	4770      	bx	lr
 80031f8:	200001c4 	.word	0x200001c4
 80031fc:	20000050 	.word	0x20000050

08003200 <resetElementsCourt>:
void resetElementsCourt(){
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
	for (int i=0; i <8; i ++){
 8003206:	2300      	movs	r3, #0
 8003208:	607b      	str	r3, [r7, #4]
 800320a:	e007      	b.n	800321c <resetElementsCourt+0x1c>
		//arrRow[i]= 0;
		court1.row[i]=0;
 800320c:	4a0f      	ldr	r2, [pc, #60]	; (800324c <resetElementsCourt+0x4c>)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4413      	add	r3, r2
 8003212:	2200      	movs	r2, #0
 8003214:	701a      	strb	r2, [r3, #0]
	for (int i=0; i <8; i ++){
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	3301      	adds	r3, #1
 800321a:	607b      	str	r3, [r7, #4]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2b07      	cmp	r3, #7
 8003220:	ddf4      	ble.n	800320c <resetElementsCourt+0xc>
	}
	for (int j=0; j <8; j ++){
 8003222:	2300      	movs	r3, #0
 8003224:	603b      	str	r3, [r7, #0]
 8003226:	e008      	b.n	800323a <resetElementsCourt+0x3a>
			//arrCol[j]= 0;
			court1.col[j]=0;
 8003228:	4a08      	ldr	r2, [pc, #32]	; (800324c <resetElementsCourt+0x4c>)
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	4413      	add	r3, r2
 800322e:	3308      	adds	r3, #8
 8003230:	2200      	movs	r2, #0
 8003232:	701a      	strb	r2, [r3, #0]
	for (int j=0; j <8; j ++){
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	3301      	adds	r3, #1
 8003238:	603b      	str	r3, [r7, #0]
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	2b07      	cmp	r3, #7
 800323e:	ddf3      	ble.n	8003228 <resetElementsCourt+0x28>
		}
}
 8003240:	bf00      	nop
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	bc80      	pop	{r7}
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	200001cc 	.word	0x200001cc

08003250 <initilize>:
void updateCourt(){

	resetElementsCourt();					//clears the court

}
void initilize(){
 8003250:	b480      	push	{r7}
 8003252:	af00      	add	r7, sp, #0

	//initilize bat
	bat.xpos =0;
 8003254:	4b13      	ldr	r3, [pc, #76]	; (80032a4 <initilize+0x54>)
 8003256:	2200      	movs	r2, #0
 8003258:	705a      	strb	r2, [r3, #1]
	bat.upperBatPos = 3;
 800325a:	4b12      	ldr	r3, [pc, #72]	; (80032a4 <initilize+0x54>)
 800325c:	2203      	movs	r2, #3
 800325e:	709a      	strb	r2, [r3, #2]
	bat.lowerBatPos = bat.upperBatPos + 1 ;
 8003260:	4b10      	ldr	r3, [pc, #64]	; (80032a4 <initilize+0x54>)
 8003262:	789b      	ldrb	r3, [r3, #2]
 8003264:	3301      	adds	r3, #1
 8003266:	b2da      	uxtb	r2, r3
 8003268:	4b0e      	ldr	r3, [pc, #56]	; (80032a4 <initilize+0x54>)
 800326a:	70da      	strb	r2, [r3, #3]

	//initilize ball start position
	tBall.xpos = 7;
 800326c:	4b0e      	ldr	r3, [pc, #56]	; (80032a8 <initilize+0x58>)
 800326e:	2207      	movs	r2, #7
 8003270:	701a      	strb	r2, [r3, #0]
	tBall.ypos = 4;
 8003272:	4b0d      	ldr	r3, [pc, #52]	; (80032a8 <initilize+0x58>)
 8003274:	2204      	movs	r2, #4
 8003276:	705a      	strb	r2, [r3, #1]
	tBall.direction = 0;					 //0 = left
 8003278:	4b0b      	ldr	r3, [pc, #44]	; (80032a8 <initilize+0x58>)
 800327a:	2200      	movs	r2, #0
 800327c:	709a      	strb	r2, [r3, #2]
	tBall.hitBatCounter=0;
 800327e:	4b0a      	ldr	r3, [pc, #40]	; (80032a8 <initilize+0x58>)
 8003280:	2200      	movs	r2, #0
 8003282:	70da      	strb	r2, [r3, #3]
	tBall.velocity =1; 						//starting velocity
 8003284:	4b08      	ldr	r3, [pc, #32]	; (80032a8 <initilize+0x58>)
 8003286:	2201      	movs	r2, #1
 8003288:	711a      	strb	r2, [r3, #4]

	counter_BallUpdate = 0;
 800328a:	4b08      	ldr	r3, [pc, #32]	; (80032ac <initilize+0x5c>)
 800328c:	2200      	movs	r2, #0
 800328e:	801a      	strh	r2, [r3, #0]
	flag_BallUpdate =0;
 8003290:	4b07      	ldr	r3, [pc, #28]	; (80032b0 <initilize+0x60>)
 8003292:	2200      	movs	r2, #0
 8003294:	701a      	strb	r2, [r3, #0]

	counterTennisUART=0;
 8003296:	4b07      	ldr	r3, [pc, #28]	; (80032b4 <initilize+0x64>)
 8003298:	2200      	movs	r2, #0
 800329a:	801a      	strh	r2, [r3, #0]
}
 800329c:	bf00      	nop
 800329e:	46bd      	mov	sp, r7
 80032a0:	bc80      	pop	{r7}
 80032a2:	4770      	bx	lr
 80032a4:	20000050 	.word	0x20000050
 80032a8:	200001c4 	.word	0x200001c4
 80032ac:	20000094 	.word	0x20000094
 80032b0:	20000096 	.word	0x20000096
 80032b4:	2000008e 	.word	0x2000008e

080032b8 <updateBallPosition>:
void updateBallPosition(){
 80032b8:	b480      	push	{r7}
 80032ba:	af00      	add	r7, sp, #0

	if (flag_BallUpdate){
 80032bc:	4b47      	ldr	r3, [pc, #284]	; (80033dc <updateBallPosition+0x124>)
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	f000 8086 	beq.w	80033d2 <updateBallPosition+0x11a>

		switch (tBall.direction){
 80032c6:	4b46      	ldr	r3, [pc, #280]	; (80033e0 <updateBallPosition+0x128>)
 80032c8:	789b      	ldrb	r3, [r3, #2]
 80032ca:	2b05      	cmp	r3, #5
 80032cc:	d87b      	bhi.n	80033c6 <updateBallPosition+0x10e>
 80032ce:	a201      	add	r2, pc, #4	; (adr r2, 80032d4 <updateBallPosition+0x1c>)
 80032d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032d4:	080032ed 	.word	0x080032ed
 80032d8:	08003303 	.word	0x08003303
 80032dc:	08003319 	.word	0x08003319
 80032e0:	08003343 	.word	0x08003343
 80032e4:	08003365 	.word	0x08003365
 80032e8:	08003387 	.word	0x08003387
		case 0: //L
			if (tBall.xpos>0){				//not equal to (i think)
 80032ec:	4b3c      	ldr	r3, [pc, #240]	; (80033e0 <updateBallPosition+0x128>)
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d05d      	beq.n	80033b0 <updateBallPosition+0xf8>
				tBall.xpos --;
 80032f4:	4b3a      	ldr	r3, [pc, #232]	; (80033e0 <updateBallPosition+0x128>)
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	3b01      	subs	r3, #1
 80032fa:	b2da      	uxtb	r2, r3
 80032fc:	4b38      	ldr	r3, [pc, #224]	; (80033e0 <updateBallPosition+0x128>)
 80032fe:	701a      	strb	r2, [r3, #0]
			}

			break ;
 8003300:	e056      	b.n	80033b0 <updateBallPosition+0xf8>
		case 1: //R
			if (tBall.xpos<7){
 8003302:	4b37      	ldr	r3, [pc, #220]	; (80033e0 <updateBallPosition+0x128>)
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	2b06      	cmp	r3, #6
 8003308:	d854      	bhi.n	80033b4 <updateBallPosition+0xfc>
				tBall.xpos ++;
 800330a:	4b35      	ldr	r3, [pc, #212]	; (80033e0 <updateBallPosition+0x128>)
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	3301      	adds	r3, #1
 8003310:	b2da      	uxtb	r2, r3
 8003312:	4b33      	ldr	r3, [pc, #204]	; (80033e0 <updateBallPosition+0x128>)
 8003314:	701a      	strb	r2, [r3, #0]
			}

			break ;
 8003316:	e04d      	b.n	80033b4 <updateBallPosition+0xfc>
		case 2: //RD
			if ((tBall.xpos>0) && (tBall.ypos<8)){
 8003318:	4b31      	ldr	r3, [pc, #196]	; (80033e0 <updateBallPosition+0x128>)
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d04b      	beq.n	80033b8 <updateBallPosition+0x100>
 8003320:	4b2f      	ldr	r3, [pc, #188]	; (80033e0 <updateBallPosition+0x128>)
 8003322:	785b      	ldrb	r3, [r3, #1]
 8003324:	2b07      	cmp	r3, #7
 8003326:	d847      	bhi.n	80033b8 <updateBallPosition+0x100>
			tBall.xpos ++;
 8003328:	4b2d      	ldr	r3, [pc, #180]	; (80033e0 <updateBallPosition+0x128>)
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	3301      	adds	r3, #1
 800332e:	b2da      	uxtb	r2, r3
 8003330:	4b2b      	ldr	r3, [pc, #172]	; (80033e0 <updateBallPosition+0x128>)
 8003332:	701a      	strb	r2, [r3, #0]
			tBall.ypos ++;
 8003334:	4b2a      	ldr	r3, [pc, #168]	; (80033e0 <updateBallPosition+0x128>)
 8003336:	785b      	ldrb	r3, [r3, #1]
 8003338:	3301      	adds	r3, #1
 800333a:	b2da      	uxtb	r2, r3
 800333c:	4b28      	ldr	r3, [pc, #160]	; (80033e0 <updateBallPosition+0x128>)
 800333e:	705a      	strb	r2, [r3, #1]
			}

			break ;
 8003340:	e03a      	b.n	80033b8 <updateBallPosition+0x100>
		case 3: //LU
			if ((tBall.xpos>0) && (tBall.ypos>=0)){
 8003342:	4b27      	ldr	r3, [pc, #156]	; (80033e0 <updateBallPosition+0x128>)
 8003344:	781b      	ldrb	r3, [r3, #0]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d038      	beq.n	80033bc <updateBallPosition+0x104>
			tBall.xpos --;
 800334a:	4b25      	ldr	r3, [pc, #148]	; (80033e0 <updateBallPosition+0x128>)
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	3b01      	subs	r3, #1
 8003350:	b2da      	uxtb	r2, r3
 8003352:	4b23      	ldr	r3, [pc, #140]	; (80033e0 <updateBallPosition+0x128>)
 8003354:	701a      	strb	r2, [r3, #0]
			tBall.ypos --;
 8003356:	4b22      	ldr	r3, [pc, #136]	; (80033e0 <updateBallPosition+0x128>)
 8003358:	785b      	ldrb	r3, [r3, #1]
 800335a:	3b01      	subs	r3, #1
 800335c:	b2da      	uxtb	r2, r3
 800335e:	4b20      	ldr	r3, [pc, #128]	; (80033e0 <updateBallPosition+0x128>)
 8003360:	705a      	strb	r2, [r3, #1]
			}
			break ;
 8003362:	e02b      	b.n	80033bc <updateBallPosition+0x104>
		case 4: //RU
			if ((tBall.xpos<8) && (tBall.ypos>=0)){
 8003364:	4b1e      	ldr	r3, [pc, #120]	; (80033e0 <updateBallPosition+0x128>)
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	2b07      	cmp	r3, #7
 800336a:	d829      	bhi.n	80033c0 <updateBallPosition+0x108>
			tBall.xpos ++;
 800336c:	4b1c      	ldr	r3, [pc, #112]	; (80033e0 <updateBallPosition+0x128>)
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	3301      	adds	r3, #1
 8003372:	b2da      	uxtb	r2, r3
 8003374:	4b1a      	ldr	r3, [pc, #104]	; (80033e0 <updateBallPosition+0x128>)
 8003376:	701a      	strb	r2, [r3, #0]
			tBall.ypos --;
 8003378:	4b19      	ldr	r3, [pc, #100]	; (80033e0 <updateBallPosition+0x128>)
 800337a:	785b      	ldrb	r3, [r3, #1]
 800337c:	3b01      	subs	r3, #1
 800337e:	b2da      	uxtb	r2, r3
 8003380:	4b17      	ldr	r3, [pc, #92]	; (80033e0 <updateBallPosition+0x128>)
 8003382:	705a      	strb	r2, [r3, #1]
			}
			break ;
 8003384:	e01c      	b.n	80033c0 <updateBallPosition+0x108>
		case 5: //LD
			if ((tBall.xpos>0) && (tBall.ypos<8)){
 8003386:	4b16      	ldr	r3, [pc, #88]	; (80033e0 <updateBallPosition+0x128>)
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d01a      	beq.n	80033c4 <updateBallPosition+0x10c>
 800338e:	4b14      	ldr	r3, [pc, #80]	; (80033e0 <updateBallPosition+0x128>)
 8003390:	785b      	ldrb	r3, [r3, #1]
 8003392:	2b07      	cmp	r3, #7
 8003394:	d816      	bhi.n	80033c4 <updateBallPosition+0x10c>
				tBall.xpos --;
 8003396:	4b12      	ldr	r3, [pc, #72]	; (80033e0 <updateBallPosition+0x128>)
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	3b01      	subs	r3, #1
 800339c:	b2da      	uxtb	r2, r3
 800339e:	4b10      	ldr	r3, [pc, #64]	; (80033e0 <updateBallPosition+0x128>)
 80033a0:	701a      	strb	r2, [r3, #0]
			tBall.ypos ++;
 80033a2:	4b0f      	ldr	r3, [pc, #60]	; (80033e0 <updateBallPosition+0x128>)
 80033a4:	785b      	ldrb	r3, [r3, #1]
 80033a6:	3301      	adds	r3, #1
 80033a8:	b2da      	uxtb	r2, r3
 80033aa:	4b0d      	ldr	r3, [pc, #52]	; (80033e0 <updateBallPosition+0x128>)
 80033ac:	705a      	strb	r2, [r3, #1]
			}

			break ;
 80033ae:	e009      	b.n	80033c4 <updateBallPosition+0x10c>
			break ;
 80033b0:	bf00      	nop
 80033b2:	e008      	b.n	80033c6 <updateBallPosition+0x10e>
			break ;
 80033b4:	bf00      	nop
 80033b6:	e006      	b.n	80033c6 <updateBallPosition+0x10e>
			break ;
 80033b8:	bf00      	nop
 80033ba:	e004      	b.n	80033c6 <updateBallPosition+0x10e>
			break ;
 80033bc:	bf00      	nop
 80033be:	e002      	b.n	80033c6 <updateBallPosition+0x10e>
			break ;
 80033c0:	bf00      	nop
 80033c2:	e000      	b.n	80033c6 <updateBallPosition+0x10e>
			break ;
 80033c4:	bf00      	nop
		}

		//reset flag for update
		flag_BallUpdate=0;
 80033c6:	4b05      	ldr	r3, [pc, #20]	; (80033dc <updateBallPosition+0x124>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	701a      	strb	r2, [r3, #0]
		counter_BallUpdate=0;
 80033cc:	4b05      	ldr	r3, [pc, #20]	; (80033e4 <updateBallPosition+0x12c>)
 80033ce:	2200      	movs	r2, #0
 80033d0:	801a      	strh	r2, [r3, #0]
	}
}
 80033d2:	bf00      	nop
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bc80      	pop	{r7}
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop
 80033dc:	20000096 	.word	0x20000096
 80033e0:	200001c4 	.word	0x200001c4
 80033e4:	20000094 	.word	0x20000094

080033e8 <colomnScanCourt>:
	if ((sliderInput>3584) && (sliderInput<=4096)){
		bat.upperBatPos= 6; 							//since we dont want it to go to 7 so stays 6
		bat.lowerBatPos= bat.upperBatPos +1;
	}
}
void colomnScanCourt(){
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0

	switch (flag_8ms)
 80033ec:	4b96      	ldr	r3, [pc, #600]	; (8003648 <colomnScanCourt+0x260>)
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	2b07      	cmp	r3, #7
 80033f2:	f200 8127 	bhi.w	8003644 <colomnScanCourt+0x25c>
 80033f6:	a201      	add	r2, pc, #4	; (adr r2, 80033fc <colomnScanCourt+0x14>)
 80033f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033fc:	0800341d 	.word	0x0800341d
 8003400:	08003461 	.word	0x08003461
 8003404:	080034a3 	.word	0x080034a3
 8003408:	080034e5 	.word	0x080034e5
 800340c:	08003527 	.word	0x08003527
 8003410:	08003567 	.word	0x08003567
 8003414:	080035a7 	.word	0x080035a7
 8003418:	080035e7 	.word	0x080035e7
		{
		case 0 :resetElementsCourt();
 800341c:	f7ff fef0 	bl	8003200 <resetElementsCourt>
			court1.col[0]=1;
 8003420:	4b8a      	ldr	r3, [pc, #552]	; (800364c <colomnScanCourt+0x264>)
 8003422:	2201      	movs	r2, #1
 8003424:	721a      	strb	r2, [r3, #8]

			if (bat.xpos==0){
 8003426:	4b8a      	ldr	r3, [pc, #552]	; (8003650 <colomnScanCourt+0x268>)
 8003428:	785b      	ldrb	r3, [r3, #1]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d10b      	bne.n	8003446 <colomnScanCourt+0x5e>
				court1.row[bat.upperBatPos]=1;
 800342e:	4b88      	ldr	r3, [pc, #544]	; (8003650 <colomnScanCourt+0x268>)
 8003430:	789b      	ldrb	r3, [r3, #2]
 8003432:	461a      	mov	r2, r3
 8003434:	4b85      	ldr	r3, [pc, #532]	; (800364c <colomnScanCourt+0x264>)
 8003436:	2101      	movs	r1, #1
 8003438:	5499      	strb	r1, [r3, r2]
				court1.row[bat.lowerBatPos]=1;
 800343a:	4b85      	ldr	r3, [pc, #532]	; (8003650 <colomnScanCourt+0x268>)
 800343c:	78db      	ldrb	r3, [r3, #3]
 800343e:	461a      	mov	r2, r3
 8003440:	4b82      	ldr	r3, [pc, #520]	; (800364c <colomnScanCourt+0x264>)
 8003442:	2101      	movs	r1, #1
 8003444:	5499      	strb	r1, [r3, r2]
			}

			if (tBall.xpos == 0){
 8003446:	4b83      	ldr	r3, [pc, #524]	; (8003654 <colomnScanCourt+0x26c>)
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	2b00      	cmp	r3, #0
 800344c:	f040 80eb 	bne.w	8003626 <colomnScanCourt+0x23e>
				court1.col[tBall.ypos] =1;
 8003450:	4b80      	ldr	r3, [pc, #512]	; (8003654 <colomnScanCourt+0x26c>)
 8003452:	785b      	ldrb	r3, [r3, #1]
 8003454:	461a      	mov	r2, r3
 8003456:	4b7d      	ldr	r3, [pc, #500]	; (800364c <colomnScanCourt+0x264>)
 8003458:	4413      	add	r3, r2
 800345a:	2201      	movs	r2, #1
 800345c:	721a      	strb	r2, [r3, #8]

			}
			break;
 800345e:	e0e2      	b.n	8003626 <colomnScanCourt+0x23e>


		case 1 :resetElementsCourt();
 8003460:	f7ff fece 	bl	8003200 <resetElementsCourt>
			court1.col[1] = 1;
 8003464:	4b79      	ldr	r3, [pc, #484]	; (800364c <colomnScanCourt+0x264>)
 8003466:	2201      	movs	r2, #1
 8003468:	725a      	strb	r2, [r3, #9]

			if (tBall.xpos == 1){
 800346a:	4b7a      	ldr	r3, [pc, #488]	; (8003654 <colomnScanCourt+0x26c>)
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	2b01      	cmp	r3, #1
 8003470:	d105      	bne.n	800347e <colomnScanCourt+0x96>
				court1.row[tBall.ypos] =1;
 8003472:	4b78      	ldr	r3, [pc, #480]	; (8003654 <colomnScanCourt+0x26c>)
 8003474:	785b      	ldrb	r3, [r3, #1]
 8003476:	461a      	mov	r2, r3
 8003478:	4b74      	ldr	r3, [pc, #464]	; (800364c <colomnScanCourt+0x264>)
 800347a:	2101      	movs	r1, #1
 800347c:	5499      	strb	r1, [r3, r2]
			}
			if (bat.xpos==1){
 800347e:	4b74      	ldr	r3, [pc, #464]	; (8003650 <colomnScanCourt+0x268>)
 8003480:	785b      	ldrb	r3, [r3, #1]
 8003482:	2b01      	cmp	r3, #1
 8003484:	f040 80d1 	bne.w	800362a <colomnScanCourt+0x242>
				court1.row[bat.upperBatPos]=1;
 8003488:	4b71      	ldr	r3, [pc, #452]	; (8003650 <colomnScanCourt+0x268>)
 800348a:	789b      	ldrb	r3, [r3, #2]
 800348c:	461a      	mov	r2, r3
 800348e:	4b6f      	ldr	r3, [pc, #444]	; (800364c <colomnScanCourt+0x264>)
 8003490:	2101      	movs	r1, #1
 8003492:	5499      	strb	r1, [r3, r2]
				court1.row[bat.lowerBatPos]=1;
 8003494:	4b6e      	ldr	r3, [pc, #440]	; (8003650 <colomnScanCourt+0x268>)
 8003496:	78db      	ldrb	r3, [r3, #3]
 8003498:	461a      	mov	r2, r3
 800349a:	4b6c      	ldr	r3, [pc, #432]	; (800364c <colomnScanCourt+0x264>)
 800349c:	2101      	movs	r1, #1
 800349e:	5499      	strb	r1, [r3, r2]
			}

			break;
 80034a0:	e0c3      	b.n	800362a <colomnScanCourt+0x242>

		case 2 :resetElementsCourt();
 80034a2:	f7ff fead 	bl	8003200 <resetElementsCourt>
			court1.col[2] = 1;
 80034a6:	4b69      	ldr	r3, [pc, #420]	; (800364c <colomnScanCourt+0x264>)
 80034a8:	2201      	movs	r2, #1
 80034aa:	729a      	strb	r2, [r3, #10]

			if (tBall.xpos == 2){
 80034ac:	4b69      	ldr	r3, [pc, #420]	; (8003654 <colomnScanCourt+0x26c>)
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d105      	bne.n	80034c0 <colomnScanCourt+0xd8>

				court1.row[tBall.ypos] =1;
 80034b4:	4b67      	ldr	r3, [pc, #412]	; (8003654 <colomnScanCourt+0x26c>)
 80034b6:	785b      	ldrb	r3, [r3, #1]
 80034b8:	461a      	mov	r2, r3
 80034ba:	4b64      	ldr	r3, [pc, #400]	; (800364c <colomnScanCourt+0x264>)
 80034bc:	2101      	movs	r1, #1
 80034be:	5499      	strb	r1, [r3, r2]
			}
			if (bat.xpos==2){
 80034c0:	4b63      	ldr	r3, [pc, #396]	; (8003650 <colomnScanCourt+0x268>)
 80034c2:	785b      	ldrb	r3, [r3, #1]
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	f040 80b2 	bne.w	800362e <colomnScanCourt+0x246>
				court1.row[bat.upperBatPos]=1;
 80034ca:	4b61      	ldr	r3, [pc, #388]	; (8003650 <colomnScanCourt+0x268>)
 80034cc:	789b      	ldrb	r3, [r3, #2]
 80034ce:	461a      	mov	r2, r3
 80034d0:	4b5e      	ldr	r3, [pc, #376]	; (800364c <colomnScanCourt+0x264>)
 80034d2:	2101      	movs	r1, #1
 80034d4:	5499      	strb	r1, [r3, r2]
				court1.row[bat.lowerBatPos]=1;
 80034d6:	4b5e      	ldr	r3, [pc, #376]	; (8003650 <colomnScanCourt+0x268>)
 80034d8:	78db      	ldrb	r3, [r3, #3]
 80034da:	461a      	mov	r2, r3
 80034dc:	4b5b      	ldr	r3, [pc, #364]	; (800364c <colomnScanCourt+0x264>)
 80034de:	2101      	movs	r1, #1
 80034e0:	5499      	strb	r1, [r3, r2]
			}
			break;
 80034e2:	e0a4      	b.n	800362e <colomnScanCourt+0x246>


		case 3 :resetElementsCourt();
 80034e4:	f7ff fe8c 	bl	8003200 <resetElementsCourt>
			court1.col[3] = 1;
 80034e8:	4b58      	ldr	r3, [pc, #352]	; (800364c <colomnScanCourt+0x264>)
 80034ea:	2201      	movs	r2, #1
 80034ec:	72da      	strb	r2, [r3, #11]

			if (tBall.xpos == 3){
 80034ee:	4b59      	ldr	r3, [pc, #356]	; (8003654 <colomnScanCourt+0x26c>)
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	2b03      	cmp	r3, #3
 80034f4:	d105      	bne.n	8003502 <colomnScanCourt+0x11a>

				court1.row[tBall.ypos] =1;
 80034f6:	4b57      	ldr	r3, [pc, #348]	; (8003654 <colomnScanCourt+0x26c>)
 80034f8:	785b      	ldrb	r3, [r3, #1]
 80034fa:	461a      	mov	r2, r3
 80034fc:	4b53      	ldr	r3, [pc, #332]	; (800364c <colomnScanCourt+0x264>)
 80034fe:	2101      	movs	r1, #1
 8003500:	5499      	strb	r1, [r3, r2]

			}
			if (bat.xpos==3){
 8003502:	4b53      	ldr	r3, [pc, #332]	; (8003650 <colomnScanCourt+0x268>)
 8003504:	785b      	ldrb	r3, [r3, #1]
 8003506:	2b03      	cmp	r3, #3
 8003508:	f040 8093 	bne.w	8003632 <colomnScanCourt+0x24a>
				court1.row[bat.upperBatPos]=1;
 800350c:	4b50      	ldr	r3, [pc, #320]	; (8003650 <colomnScanCourt+0x268>)
 800350e:	789b      	ldrb	r3, [r3, #2]
 8003510:	461a      	mov	r2, r3
 8003512:	4b4e      	ldr	r3, [pc, #312]	; (800364c <colomnScanCourt+0x264>)
 8003514:	2101      	movs	r1, #1
 8003516:	5499      	strb	r1, [r3, r2]
				court1.row[bat.lowerBatPos]=1;
 8003518:	4b4d      	ldr	r3, [pc, #308]	; (8003650 <colomnScanCourt+0x268>)
 800351a:	78db      	ldrb	r3, [r3, #3]
 800351c:	461a      	mov	r2, r3
 800351e:	4b4b      	ldr	r3, [pc, #300]	; (800364c <colomnScanCourt+0x264>)
 8003520:	2101      	movs	r1, #1
 8003522:	5499      	strb	r1, [r3, r2]
			}
			break ;
 8003524:	e085      	b.n	8003632 <colomnScanCourt+0x24a>

		case 4 :resetElementsCourt();
 8003526:	f7ff fe6b 	bl	8003200 <resetElementsCourt>
			court1.col[4] = 1;
 800352a:	4b48      	ldr	r3, [pc, #288]	; (800364c <colomnScanCourt+0x264>)
 800352c:	2201      	movs	r2, #1
 800352e:	731a      	strb	r2, [r3, #12]

			if (tBall.xpos == 4){
 8003530:	4b48      	ldr	r3, [pc, #288]	; (8003654 <colomnScanCourt+0x26c>)
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	2b04      	cmp	r3, #4
 8003536:	d105      	bne.n	8003544 <colomnScanCourt+0x15c>

				court1.row[tBall.ypos] =1;
 8003538:	4b46      	ldr	r3, [pc, #280]	; (8003654 <colomnScanCourt+0x26c>)
 800353a:	785b      	ldrb	r3, [r3, #1]
 800353c:	461a      	mov	r2, r3
 800353e:	4b43      	ldr	r3, [pc, #268]	; (800364c <colomnScanCourt+0x264>)
 8003540:	2101      	movs	r1, #1
 8003542:	5499      	strb	r1, [r3, r2]

			}
			if (bat.xpos==4){
 8003544:	4b42      	ldr	r3, [pc, #264]	; (8003650 <colomnScanCourt+0x268>)
 8003546:	785b      	ldrb	r3, [r3, #1]
 8003548:	2b04      	cmp	r3, #4
 800354a:	d174      	bne.n	8003636 <colomnScanCourt+0x24e>
				court1.row[bat.upperBatPos]=1;
 800354c:	4b40      	ldr	r3, [pc, #256]	; (8003650 <colomnScanCourt+0x268>)
 800354e:	789b      	ldrb	r3, [r3, #2]
 8003550:	461a      	mov	r2, r3
 8003552:	4b3e      	ldr	r3, [pc, #248]	; (800364c <colomnScanCourt+0x264>)
 8003554:	2101      	movs	r1, #1
 8003556:	5499      	strb	r1, [r3, r2]
				court1.row[bat.lowerBatPos]=1;
 8003558:	4b3d      	ldr	r3, [pc, #244]	; (8003650 <colomnScanCourt+0x268>)
 800355a:	78db      	ldrb	r3, [r3, #3]
 800355c:	461a      	mov	r2, r3
 800355e:	4b3b      	ldr	r3, [pc, #236]	; (800364c <colomnScanCourt+0x264>)
 8003560:	2101      	movs	r1, #1
 8003562:	5499      	strb	r1, [r3, r2]
			}
			break ;
 8003564:	e067      	b.n	8003636 <colomnScanCourt+0x24e>


		case 5 :resetElementsCourt();
 8003566:	f7ff fe4b 	bl	8003200 <resetElementsCourt>
			court1.col[5] = 1;
 800356a:	4b38      	ldr	r3, [pc, #224]	; (800364c <colomnScanCourt+0x264>)
 800356c:	2201      	movs	r2, #1
 800356e:	735a      	strb	r2, [r3, #13]

			if (tBall.xpos == 5){
 8003570:	4b38      	ldr	r3, [pc, #224]	; (8003654 <colomnScanCourt+0x26c>)
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	2b05      	cmp	r3, #5
 8003576:	d105      	bne.n	8003584 <colomnScanCourt+0x19c>

				court1.row[tBall.ypos] =1;
 8003578:	4b36      	ldr	r3, [pc, #216]	; (8003654 <colomnScanCourt+0x26c>)
 800357a:	785b      	ldrb	r3, [r3, #1]
 800357c:	461a      	mov	r2, r3
 800357e:	4b33      	ldr	r3, [pc, #204]	; (800364c <colomnScanCourt+0x264>)
 8003580:	2101      	movs	r1, #1
 8003582:	5499      	strb	r1, [r3, r2]

			}
			if (bat.xpos==5){
 8003584:	4b32      	ldr	r3, [pc, #200]	; (8003650 <colomnScanCourt+0x268>)
 8003586:	785b      	ldrb	r3, [r3, #1]
 8003588:	2b05      	cmp	r3, #5
 800358a:	d156      	bne.n	800363a <colomnScanCourt+0x252>
				court1.row[bat.upperBatPos]=1;
 800358c:	4b30      	ldr	r3, [pc, #192]	; (8003650 <colomnScanCourt+0x268>)
 800358e:	789b      	ldrb	r3, [r3, #2]
 8003590:	461a      	mov	r2, r3
 8003592:	4b2e      	ldr	r3, [pc, #184]	; (800364c <colomnScanCourt+0x264>)
 8003594:	2101      	movs	r1, #1
 8003596:	5499      	strb	r1, [r3, r2]
				court1.row[bat.lowerBatPos]=1;
 8003598:	4b2d      	ldr	r3, [pc, #180]	; (8003650 <colomnScanCourt+0x268>)
 800359a:	78db      	ldrb	r3, [r3, #3]
 800359c:	461a      	mov	r2, r3
 800359e:	4b2b      	ldr	r3, [pc, #172]	; (800364c <colomnScanCourt+0x264>)
 80035a0:	2101      	movs	r1, #1
 80035a2:	5499      	strb	r1, [r3, r2]
			}
			break ;
 80035a4:	e049      	b.n	800363a <colomnScanCourt+0x252>



		case 6 :resetElementsCourt();
 80035a6:	f7ff fe2b 	bl	8003200 <resetElementsCourt>
			court1.col[6] = 1;
 80035aa:	4b28      	ldr	r3, [pc, #160]	; (800364c <colomnScanCourt+0x264>)
 80035ac:	2201      	movs	r2, #1
 80035ae:	739a      	strb	r2, [r3, #14]

			if (tBall.xpos == 6){
 80035b0:	4b28      	ldr	r3, [pc, #160]	; (8003654 <colomnScanCourt+0x26c>)
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	2b06      	cmp	r3, #6
 80035b6:	d105      	bne.n	80035c4 <colomnScanCourt+0x1dc>

				court1.row[tBall.ypos] =1;
 80035b8:	4b26      	ldr	r3, [pc, #152]	; (8003654 <colomnScanCourt+0x26c>)
 80035ba:	785b      	ldrb	r3, [r3, #1]
 80035bc:	461a      	mov	r2, r3
 80035be:	4b23      	ldr	r3, [pc, #140]	; (800364c <colomnScanCourt+0x264>)
 80035c0:	2101      	movs	r1, #1
 80035c2:	5499      	strb	r1, [r3, r2]

			}
			if (bat.xpos==6){
 80035c4:	4b22      	ldr	r3, [pc, #136]	; (8003650 <colomnScanCourt+0x268>)
 80035c6:	785b      	ldrb	r3, [r3, #1]
 80035c8:	2b06      	cmp	r3, #6
 80035ca:	d138      	bne.n	800363e <colomnScanCourt+0x256>
				court1.row[bat.upperBatPos]=1;
 80035cc:	4b20      	ldr	r3, [pc, #128]	; (8003650 <colomnScanCourt+0x268>)
 80035ce:	789b      	ldrb	r3, [r3, #2]
 80035d0:	461a      	mov	r2, r3
 80035d2:	4b1e      	ldr	r3, [pc, #120]	; (800364c <colomnScanCourt+0x264>)
 80035d4:	2101      	movs	r1, #1
 80035d6:	5499      	strb	r1, [r3, r2]
				court1.row[bat.lowerBatPos]=1;
 80035d8:	4b1d      	ldr	r3, [pc, #116]	; (8003650 <colomnScanCourt+0x268>)
 80035da:	78db      	ldrb	r3, [r3, #3]
 80035dc:	461a      	mov	r2, r3
 80035de:	4b1b      	ldr	r3, [pc, #108]	; (800364c <colomnScanCourt+0x264>)
 80035e0:	2101      	movs	r1, #1
 80035e2:	5499      	strb	r1, [r3, r2]
			}
			break ;
 80035e4:	e02b      	b.n	800363e <colomnScanCourt+0x256>


		case 7 :resetElementsCourt();
 80035e6:	f7ff fe0b 	bl	8003200 <resetElementsCourt>
			court1.col[7] = 1;
 80035ea:	4b18      	ldr	r3, [pc, #96]	; (800364c <colomnScanCourt+0x264>)
 80035ec:	2201      	movs	r2, #1
 80035ee:	73da      	strb	r2, [r3, #15]

			if (tBall.xpos == 7){
 80035f0:	4b18      	ldr	r3, [pc, #96]	; (8003654 <colomnScanCourt+0x26c>)
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	2b07      	cmp	r3, #7
 80035f6:	d105      	bne.n	8003604 <colomnScanCourt+0x21c>

				court1.row[tBall.ypos] =1;
 80035f8:	4b16      	ldr	r3, [pc, #88]	; (8003654 <colomnScanCourt+0x26c>)
 80035fa:	785b      	ldrb	r3, [r3, #1]
 80035fc:	461a      	mov	r2, r3
 80035fe:	4b13      	ldr	r3, [pc, #76]	; (800364c <colomnScanCourt+0x264>)
 8003600:	2101      	movs	r1, #1
 8003602:	5499      	strb	r1, [r3, r2]

			}
			if (bat.xpos==7){
 8003604:	4b12      	ldr	r3, [pc, #72]	; (8003650 <colomnScanCourt+0x268>)
 8003606:	785b      	ldrb	r3, [r3, #1]
 8003608:	2b07      	cmp	r3, #7
 800360a:	d11a      	bne.n	8003642 <colomnScanCourt+0x25a>
				court1.row[bat.upperBatPos]=1;
 800360c:	4b10      	ldr	r3, [pc, #64]	; (8003650 <colomnScanCourt+0x268>)
 800360e:	789b      	ldrb	r3, [r3, #2]
 8003610:	461a      	mov	r2, r3
 8003612:	4b0e      	ldr	r3, [pc, #56]	; (800364c <colomnScanCourt+0x264>)
 8003614:	2101      	movs	r1, #1
 8003616:	5499      	strb	r1, [r3, r2]
				court1.row[bat.lowerBatPos]=1;
 8003618:	4b0d      	ldr	r3, [pc, #52]	; (8003650 <colomnScanCourt+0x268>)
 800361a:	78db      	ldrb	r3, [r3, #3]
 800361c:	461a      	mov	r2, r3
 800361e:	4b0b      	ldr	r3, [pc, #44]	; (800364c <colomnScanCourt+0x264>)
 8003620:	2101      	movs	r1, #1
 8003622:	5499      	strb	r1, [r3, r2]
			}
			break ;
 8003624:	e00d      	b.n	8003642 <colomnScanCourt+0x25a>
			break;
 8003626:	bf00      	nop
 8003628:	e00c      	b.n	8003644 <colomnScanCourt+0x25c>
			break;
 800362a:	bf00      	nop
 800362c:	e00a      	b.n	8003644 <colomnScanCourt+0x25c>
			break;
 800362e:	bf00      	nop
 8003630:	e008      	b.n	8003644 <colomnScanCourt+0x25c>
			break ;
 8003632:	bf00      	nop
 8003634:	e006      	b.n	8003644 <colomnScanCourt+0x25c>
			break ;
 8003636:	bf00      	nop
 8003638:	e004      	b.n	8003644 <colomnScanCourt+0x25c>
			break ;
 800363a:	bf00      	nop
 800363c:	e002      	b.n	8003644 <colomnScanCourt+0x25c>
			break ;
 800363e:	bf00      	nop
 8003640:	e000      	b.n	8003644 <colomnScanCourt+0x25c>
			break ;
 8003642:	bf00      	nop
		}
	}
 8003644:	bf00      	nop
 8003646:	bd80      	pop	{r7, pc}
 8003648:	2000008b 	.word	0x2000008b
 800364c:	200001cc 	.word	0x200001cc
 8003650:	20000050 	.word	0x20000050
 8003654:	200001c4 	.word	0x200001c4

08003658 <writeCourtToArray>:

void writeCourtToArray(){
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0

	for (int i=0; i <8; i ++){
 800365e:	2300      	movs	r3, #0
 8003660:	607b      	str	r3, [r7, #4]
 8003662:	e00b      	b.n	800367c <writeCourtToArray+0x24>
		arrRow[i]= court1.row[i];
 8003664:	4a13      	ldr	r2, [pc, #76]	; (80036b4 <writeCourtToArray+0x5c>)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4413      	add	r3, r2
 800366a:	7819      	ldrb	r1, [r3, #0]
 800366c:	4a12      	ldr	r2, [pc, #72]	; (80036b8 <writeCourtToArray+0x60>)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4413      	add	r3, r2
 8003672:	460a      	mov	r2, r1
 8003674:	701a      	strb	r2, [r3, #0]
	for (int i=0; i <8; i ++){
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	3301      	adds	r3, #1
 800367a:	607b      	str	r3, [r7, #4]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2b07      	cmp	r3, #7
 8003680:	ddf0      	ble.n	8003664 <writeCourtToArray+0xc>
	}
	for (int j=0; j <8; j ++){
 8003682:	2300      	movs	r3, #0
 8003684:	603b      	str	r3, [r7, #0]
 8003686:	e00c      	b.n	80036a2 <writeCourtToArray+0x4a>
			arrCol[j]= court1.col[j];
 8003688:	4a0a      	ldr	r2, [pc, #40]	; (80036b4 <writeCourtToArray+0x5c>)
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	4413      	add	r3, r2
 800368e:	3308      	adds	r3, #8
 8003690:	7819      	ldrb	r1, [r3, #0]
 8003692:	4a0a      	ldr	r2, [pc, #40]	; (80036bc <writeCourtToArray+0x64>)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	4413      	add	r3, r2
 8003698:	460a      	mov	r2, r1
 800369a:	701a      	strb	r2, [r3, #0]
	for (int j=0; j <8; j ++){
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	3301      	adds	r3, #1
 80036a0:	603b      	str	r3, [r7, #0]
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	2b07      	cmp	r3, #7
 80036a6:	ddef      	ble.n	8003688 <writeCourtToArray+0x30>
		}
}
 80036a8:	bf00      	nop
 80036aa:	370c      	adds	r7, #12
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bc80      	pop	{r7}
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	200001cc 	.word	0x200001cc
 80036b8:	20000078 	.word	0x20000078
 80036bc:	20000080 	.word	0x20000080

080036c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80036c0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80036c2:	e003      	b.n	80036cc <LoopCopyDataInit>

080036c4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80036c4:	4b0b      	ldr	r3, [pc, #44]	; (80036f4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80036c6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80036c8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80036ca:	3104      	adds	r1, #4

080036cc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80036cc:	480a      	ldr	r0, [pc, #40]	; (80036f8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80036ce:	4b0b      	ldr	r3, [pc, #44]	; (80036fc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80036d0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80036d2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80036d4:	d3f6      	bcc.n	80036c4 <CopyDataInit>
  ldr r2, =_sbss
 80036d6:	4a0a      	ldr	r2, [pc, #40]	; (8003700 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80036d8:	e002      	b.n	80036e0 <LoopFillZerobss>

080036da <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80036da:	2300      	movs	r3, #0
  str r3, [r2], #4
 80036dc:	f842 3b04 	str.w	r3, [r2], #4

080036e0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80036e0:	4b08      	ldr	r3, [pc, #32]	; (8003704 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80036e2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80036e4:	d3f9      	bcc.n	80036da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80036e6:	f7ff faa1 	bl	8002c2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80036ea:	f002 fb51 	bl	8005d90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80036ee:	f7fd fb2b 	bl	8000d48 <main>
  bx lr
 80036f2:	4770      	bx	lr
  ldr r3, =_sidata
 80036f4:	08005fb8 	.word	0x08005fb8
  ldr r0, =_sdata
 80036f8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80036fc:	2000005c 	.word	0x2000005c
  ldr r2, =_sbss
 8003700:	2000005c 	.word	0x2000005c
  ldr r3, = _ebss
 8003704:	200001e0 	.word	0x200001e0

08003708 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003708:	e7fe      	b.n	8003708 <ADC1_2_IRQHandler>
	...

0800370c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003710:	4b08      	ldr	r3, [pc, #32]	; (8003734 <HAL_Init+0x28>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a07      	ldr	r2, [pc, #28]	; (8003734 <HAL_Init+0x28>)
 8003716:	f043 0310 	orr.w	r3, r3, #16
 800371a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800371c:	2003      	movs	r0, #3
 800371e:	f000 fb33 	bl	8003d88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003722:	2000      	movs	r0, #0
 8003724:	f000 f808 	bl	8003738 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003728:	f7ff f95e 	bl	80029e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	40022000 	.word	0x40022000

08003738 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003740:	4b12      	ldr	r3, [pc, #72]	; (800378c <HAL_InitTick+0x54>)
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	4b12      	ldr	r3, [pc, #72]	; (8003790 <HAL_InitTick+0x58>)
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	4619      	mov	r1, r3
 800374a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800374e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003752:	fbb2 f3f3 	udiv	r3, r2, r3
 8003756:	4618      	mov	r0, r3
 8003758:	f000 fb3d 	bl	8003dd6 <HAL_SYSTICK_Config>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d001      	beq.n	8003766 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e00e      	b.n	8003784 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2b0f      	cmp	r3, #15
 800376a:	d80a      	bhi.n	8003782 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800376c:	2200      	movs	r2, #0
 800376e:	6879      	ldr	r1, [r7, #4]
 8003770:	f04f 30ff 	mov.w	r0, #4294967295
 8003774:	f000 fb13 	bl	8003d9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003778:	4a06      	ldr	r2, [pc, #24]	; (8003794 <HAL_InitTick+0x5c>)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800377e:	2300      	movs	r3, #0
 8003780:	e000      	b.n	8003784 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
}
 8003784:	4618      	mov	r0, r3
 8003786:	3708      	adds	r7, #8
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}
 800378c:	2000004c 	.word	0x2000004c
 8003790:	20000058 	.word	0x20000058
 8003794:	20000054 	.word	0x20000054

08003798 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003798:	b480      	push	{r7}
 800379a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800379c:	4b05      	ldr	r3, [pc, #20]	; (80037b4 <HAL_IncTick+0x1c>)
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	461a      	mov	r2, r3
 80037a2:	4b05      	ldr	r3, [pc, #20]	; (80037b8 <HAL_IncTick+0x20>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4413      	add	r3, r2
 80037a8:	4a03      	ldr	r2, [pc, #12]	; (80037b8 <HAL_IncTick+0x20>)
 80037aa:	6013      	str	r3, [r2, #0]
}
 80037ac:	bf00      	nop
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bc80      	pop	{r7}
 80037b2:	4770      	bx	lr
 80037b4:	20000058 	.word	0x20000058
 80037b8:	200001dc 	.word	0x200001dc

080037bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037bc:	b480      	push	{r7}
 80037be:	af00      	add	r7, sp, #0
  return uwTick;
 80037c0:	4b02      	ldr	r3, [pc, #8]	; (80037cc <HAL_GetTick+0x10>)
 80037c2:	681b      	ldr	r3, [r3, #0]
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bc80      	pop	{r7}
 80037ca:	4770      	bx	lr
 80037cc:	200001dc 	.word	0x200001dc

080037d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80037d8:	f7ff fff0 	bl	80037bc <HAL_GetTick>
 80037dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037e8:	d005      	beq.n	80037f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80037ea:	4b09      	ldr	r3, [pc, #36]	; (8003810 <HAL_Delay+0x40>)
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	461a      	mov	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	4413      	add	r3, r2
 80037f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80037f6:	bf00      	nop
 80037f8:	f7ff ffe0 	bl	80037bc <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	68fa      	ldr	r2, [r7, #12]
 8003804:	429a      	cmp	r2, r3
 8003806:	d8f7      	bhi.n	80037f8 <HAL_Delay+0x28>
  {
  }
}
 8003808:	bf00      	nop
 800380a:	3710      	adds	r7, #16
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}
 8003810:	20000058 	.word	0x20000058

08003814 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b086      	sub	sp, #24
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800381c:	2300      	movs	r3, #0
 800381e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8003820:	2300      	movs	r3, #0
 8003822:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8003824:	2300      	movs	r3, #0
 8003826:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8003828:	2300      	movs	r3, #0
 800382a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d101      	bne.n	8003836 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e0be      	b.n	80039b4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003840:	2b00      	cmp	r3, #0
 8003842:	d109      	bne.n	8003858 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f7ff f8fa 	bl	8002a4c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f000 f9ab 	bl	8003bb4 <ADC_ConversionStop_Disable>
 800385e:	4603      	mov	r3, r0
 8003860:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003866:	f003 0310 	and.w	r3, r3, #16
 800386a:	2b00      	cmp	r3, #0
 800386c:	f040 8099 	bne.w	80039a2 <HAL_ADC_Init+0x18e>
 8003870:	7dfb      	ldrb	r3, [r7, #23]
 8003872:	2b00      	cmp	r3, #0
 8003874:	f040 8095 	bne.w	80039a2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800387c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003880:	f023 0302 	bic.w	r3, r3, #2
 8003884:	f043 0202 	orr.w	r2, r3, #2
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003894:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	7b1b      	ldrb	r3, [r3, #12]
 800389a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800389c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800389e:	68ba      	ldr	r2, [r7, #8]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038ac:	d003      	beq.n	80038b6 <HAL_ADC_Init+0xa2>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d102      	bne.n	80038bc <HAL_ADC_Init+0xa8>
 80038b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038ba:	e000      	b.n	80038be <HAL_ADC_Init+0xaa>
 80038bc:	2300      	movs	r3, #0
 80038be:	693a      	ldr	r2, [r7, #16]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	7d1b      	ldrb	r3, [r3, #20]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d119      	bne.n	8003900 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	7b1b      	ldrb	r3, [r3, #12]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d109      	bne.n	80038e8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	699b      	ldr	r3, [r3, #24]
 80038d8:	3b01      	subs	r3, #1
 80038da:	035a      	lsls	r2, r3, #13
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	4313      	orrs	r3, r2
 80038e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80038e4:	613b      	str	r3, [r7, #16]
 80038e6:	e00b      	b.n	8003900 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ec:	f043 0220 	orr.w	r2, r3, #32
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f8:	f043 0201 	orr.w	r2, r3, #1
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	693a      	ldr	r2, [r7, #16]
 8003910:	430a      	orrs	r2, r1
 8003912:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	689a      	ldr	r2, [r3, #8]
 800391a:	4b28      	ldr	r3, [pc, #160]	; (80039bc <HAL_ADC_Init+0x1a8>)
 800391c:	4013      	ands	r3, r2
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	6812      	ldr	r2, [r2, #0]
 8003922:	68b9      	ldr	r1, [r7, #8]
 8003924:	430b      	orrs	r3, r1
 8003926:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003930:	d003      	beq.n	800393a <HAL_ADC_Init+0x126>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	2b01      	cmp	r3, #1
 8003938:	d104      	bne.n	8003944 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	691b      	ldr	r3, [r3, #16]
 800393e:	3b01      	subs	r3, #1
 8003940:	051b      	lsls	r3, r3, #20
 8003942:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800394a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	68fa      	ldr	r2, [r7, #12]
 8003954:	430a      	orrs	r2, r1
 8003956:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	689a      	ldr	r2, [r3, #8]
 800395e:	4b18      	ldr	r3, [pc, #96]	; (80039c0 <HAL_ADC_Init+0x1ac>)
 8003960:	4013      	ands	r3, r2
 8003962:	68ba      	ldr	r2, [r7, #8]
 8003964:	429a      	cmp	r2, r3
 8003966:	d10b      	bne.n	8003980 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003972:	f023 0303 	bic.w	r3, r3, #3
 8003976:	f043 0201 	orr.w	r2, r3, #1
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800397e:	e018      	b.n	80039b2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003984:	f023 0312 	bic.w	r3, r3, #18
 8003988:	f043 0210 	orr.w	r2, r3, #16
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003994:	f043 0201 	orr.w	r2, r3, #1
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80039a0:	e007      	b.n	80039b2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a6:	f043 0210 	orr.w	r2, r3, #16
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80039b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3718      	adds	r7, #24
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	ffe1f7fd 	.word	0xffe1f7fd
 80039c0:	ff1f0efe 	.word	0xff1f0efe

080039c4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80039c4:	b480      	push	{r7}
 80039c6:	b085      	sub	sp, #20
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039ce:	2300      	movs	r3, #0
 80039d0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80039d2:	2300      	movs	r3, #0
 80039d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d101      	bne.n	80039e4 <HAL_ADC_ConfigChannel+0x20>
 80039e0:	2302      	movs	r3, #2
 80039e2:	e0dc      	b.n	8003b9e <HAL_ADC_ConfigChannel+0x1da>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	2b06      	cmp	r3, #6
 80039f2:	d81c      	bhi.n	8003a2e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	685a      	ldr	r2, [r3, #4]
 80039fe:	4613      	mov	r3, r2
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	4413      	add	r3, r2
 8003a04:	3b05      	subs	r3, #5
 8003a06:	221f      	movs	r2, #31
 8003a08:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0c:	43db      	mvns	r3, r3
 8003a0e:	4019      	ands	r1, r3
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	6818      	ldr	r0, [r3, #0]
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	685a      	ldr	r2, [r3, #4]
 8003a18:	4613      	mov	r3, r2
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	4413      	add	r3, r2
 8003a1e:	3b05      	subs	r3, #5
 8003a20:	fa00 f203 	lsl.w	r2, r0, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	430a      	orrs	r2, r1
 8003a2a:	635a      	str	r2, [r3, #52]	; 0x34
 8003a2c:	e03c      	b.n	8003aa8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	2b0c      	cmp	r3, #12
 8003a34:	d81c      	bhi.n	8003a70 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	685a      	ldr	r2, [r3, #4]
 8003a40:	4613      	mov	r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	4413      	add	r3, r2
 8003a46:	3b23      	subs	r3, #35	; 0x23
 8003a48:	221f      	movs	r2, #31
 8003a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4e:	43db      	mvns	r3, r3
 8003a50:	4019      	ands	r1, r3
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	6818      	ldr	r0, [r3, #0]
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	685a      	ldr	r2, [r3, #4]
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	4413      	add	r3, r2
 8003a60:	3b23      	subs	r3, #35	; 0x23
 8003a62:	fa00 f203 	lsl.w	r2, r0, r3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	631a      	str	r2, [r3, #48]	; 0x30
 8003a6e:	e01b      	b.n	8003aa8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	685a      	ldr	r2, [r3, #4]
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	4413      	add	r3, r2
 8003a80:	3b41      	subs	r3, #65	; 0x41
 8003a82:	221f      	movs	r2, #31
 8003a84:	fa02 f303 	lsl.w	r3, r2, r3
 8003a88:	43db      	mvns	r3, r3
 8003a8a:	4019      	ands	r1, r3
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	6818      	ldr	r0, [r3, #0]
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	685a      	ldr	r2, [r3, #4]
 8003a94:	4613      	mov	r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	4413      	add	r3, r2
 8003a9a:	3b41      	subs	r3, #65	; 0x41
 8003a9c:	fa00 f203 	lsl.w	r2, r0, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	430a      	orrs	r2, r1
 8003aa6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2b09      	cmp	r3, #9
 8003aae:	d91c      	bls.n	8003aea <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	68d9      	ldr	r1, [r3, #12]
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	4613      	mov	r3, r2
 8003abc:	005b      	lsls	r3, r3, #1
 8003abe:	4413      	add	r3, r2
 8003ac0:	3b1e      	subs	r3, #30
 8003ac2:	2207      	movs	r2, #7
 8003ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac8:	43db      	mvns	r3, r3
 8003aca:	4019      	ands	r1, r3
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	6898      	ldr	r0, [r3, #8]
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	005b      	lsls	r3, r3, #1
 8003ad8:	4413      	add	r3, r2
 8003ada:	3b1e      	subs	r3, #30
 8003adc:	fa00 f203 	lsl.w	r2, r0, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	430a      	orrs	r2, r1
 8003ae6:	60da      	str	r2, [r3, #12]
 8003ae8:	e019      	b.n	8003b1e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	6919      	ldr	r1, [r3, #16]
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	4613      	mov	r3, r2
 8003af6:	005b      	lsls	r3, r3, #1
 8003af8:	4413      	add	r3, r2
 8003afa:	2207      	movs	r2, #7
 8003afc:	fa02 f303 	lsl.w	r3, r2, r3
 8003b00:	43db      	mvns	r3, r3
 8003b02:	4019      	ands	r1, r3
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	6898      	ldr	r0, [r3, #8]
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	005b      	lsls	r3, r3, #1
 8003b10:	4413      	add	r3, r2
 8003b12:	fa00 f203 	lsl.w	r2, r0, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	430a      	orrs	r2, r1
 8003b1c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2b10      	cmp	r3, #16
 8003b24:	d003      	beq.n	8003b2e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003b2a:	2b11      	cmp	r3, #17
 8003b2c:	d132      	bne.n	8003b94 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a1d      	ldr	r2, [pc, #116]	; (8003ba8 <HAL_ADC_ConfigChannel+0x1e4>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d125      	bne.n	8003b84 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d126      	bne.n	8003b94 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	689a      	ldr	r2, [r3, #8]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003b54:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2b10      	cmp	r3, #16
 8003b5c:	d11a      	bne.n	8003b94 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003b5e:	4b13      	ldr	r3, [pc, #76]	; (8003bac <HAL_ADC_ConfigChannel+0x1e8>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a13      	ldr	r2, [pc, #76]	; (8003bb0 <HAL_ADC_ConfigChannel+0x1ec>)
 8003b64:	fba2 2303 	umull	r2, r3, r2, r3
 8003b68:	0c9a      	lsrs	r2, r3, #18
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	4413      	add	r3, r2
 8003b70:	005b      	lsls	r3, r3, #1
 8003b72:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003b74:	e002      	b.n	8003b7c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	3b01      	subs	r3, #1
 8003b7a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d1f9      	bne.n	8003b76 <HAL_ADC_ConfigChannel+0x1b2>
 8003b82:	e007      	b.n	8003b94 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b88:	f043 0220 	orr.w	r2, r3, #32
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3714      	adds	r7, #20
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bc80      	pop	{r7}
 8003ba6:	4770      	bx	lr
 8003ba8:	40012400 	.word	0x40012400
 8003bac:	2000004c 	.word	0x2000004c
 8003bb0:	431bde83 	.word	0x431bde83

08003bb4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	f003 0301 	and.w	r3, r3, #1
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d127      	bne.n	8003c1e <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	689a      	ldr	r2, [r3, #8]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f022 0201 	bic.w	r2, r2, #1
 8003bdc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003bde:	f7ff fded 	bl	80037bc <HAL_GetTick>
 8003be2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003be4:	e014      	b.n	8003c10 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003be6:	f7ff fde9 	bl	80037bc <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d90d      	bls.n	8003c10 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf8:	f043 0210 	orr.w	r2, r3, #16
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c04:	f043 0201 	orr.w	r2, r3, #1
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e007      	b.n	8003c20 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f003 0301 	and.w	r3, r3, #1
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d0e3      	beq.n	8003be6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003c1e:	2300      	movs	r3, #0
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3710      	adds	r7, #16
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b085      	sub	sp, #20
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f003 0307 	and.w	r3, r3, #7
 8003c36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c38:	4b0c      	ldr	r3, [pc, #48]	; (8003c6c <__NVIC_SetPriorityGrouping+0x44>)
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c3e:	68ba      	ldr	r2, [r7, #8]
 8003c40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c44:	4013      	ands	r3, r2
 8003c46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c5a:	4a04      	ldr	r2, [pc, #16]	; (8003c6c <__NVIC_SetPriorityGrouping+0x44>)
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	60d3      	str	r3, [r2, #12]
}
 8003c60:	bf00      	nop
 8003c62:	3714      	adds	r7, #20
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bc80      	pop	{r7}
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop
 8003c6c:	e000ed00 	.word	0xe000ed00

08003c70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c70:	b480      	push	{r7}
 8003c72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c74:	4b04      	ldr	r3, [pc, #16]	; (8003c88 <__NVIC_GetPriorityGrouping+0x18>)
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	0a1b      	lsrs	r3, r3, #8
 8003c7a:	f003 0307 	and.w	r3, r3, #7
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bc80      	pop	{r7}
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	e000ed00 	.word	0xe000ed00

08003c8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	4603      	mov	r3, r0
 8003c94:	6039      	str	r1, [r7, #0]
 8003c96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	db0a      	blt.n	8003cb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	b2da      	uxtb	r2, r3
 8003ca4:	490c      	ldr	r1, [pc, #48]	; (8003cd8 <__NVIC_SetPriority+0x4c>)
 8003ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003caa:	0112      	lsls	r2, r2, #4
 8003cac:	b2d2      	uxtb	r2, r2
 8003cae:	440b      	add	r3, r1
 8003cb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003cb4:	e00a      	b.n	8003ccc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	b2da      	uxtb	r2, r3
 8003cba:	4908      	ldr	r1, [pc, #32]	; (8003cdc <__NVIC_SetPriority+0x50>)
 8003cbc:	79fb      	ldrb	r3, [r7, #7]
 8003cbe:	f003 030f 	and.w	r3, r3, #15
 8003cc2:	3b04      	subs	r3, #4
 8003cc4:	0112      	lsls	r2, r2, #4
 8003cc6:	b2d2      	uxtb	r2, r2
 8003cc8:	440b      	add	r3, r1
 8003cca:	761a      	strb	r2, [r3, #24]
}
 8003ccc:	bf00      	nop
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bc80      	pop	{r7}
 8003cd4:	4770      	bx	lr
 8003cd6:	bf00      	nop
 8003cd8:	e000e100 	.word	0xe000e100
 8003cdc:	e000ed00 	.word	0xe000ed00

08003ce0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b089      	sub	sp, #36	; 0x24
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f003 0307 	and.w	r3, r3, #7
 8003cf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	f1c3 0307 	rsb	r3, r3, #7
 8003cfa:	2b04      	cmp	r3, #4
 8003cfc:	bf28      	it	cs
 8003cfe:	2304      	movcs	r3, #4
 8003d00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	3304      	adds	r3, #4
 8003d06:	2b06      	cmp	r3, #6
 8003d08:	d902      	bls.n	8003d10 <NVIC_EncodePriority+0x30>
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	3b03      	subs	r3, #3
 8003d0e:	e000      	b.n	8003d12 <NVIC_EncodePriority+0x32>
 8003d10:	2300      	movs	r3, #0
 8003d12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d14:	f04f 32ff 	mov.w	r2, #4294967295
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1e:	43da      	mvns	r2, r3
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	401a      	ands	r2, r3
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d28:	f04f 31ff 	mov.w	r1, #4294967295
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d32:	43d9      	mvns	r1, r3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d38:	4313      	orrs	r3, r2
         );
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3724      	adds	r7, #36	; 0x24
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bc80      	pop	{r7}
 8003d42:	4770      	bx	lr

08003d44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d54:	d301      	bcc.n	8003d5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d56:	2301      	movs	r3, #1
 8003d58:	e00f      	b.n	8003d7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d5a:	4a0a      	ldr	r2, [pc, #40]	; (8003d84 <SysTick_Config+0x40>)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d62:	210f      	movs	r1, #15
 8003d64:	f04f 30ff 	mov.w	r0, #4294967295
 8003d68:	f7ff ff90 	bl	8003c8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d6c:	4b05      	ldr	r3, [pc, #20]	; (8003d84 <SysTick_Config+0x40>)
 8003d6e:	2200      	movs	r2, #0
 8003d70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d72:	4b04      	ldr	r3, [pc, #16]	; (8003d84 <SysTick_Config+0x40>)
 8003d74:	2207      	movs	r2, #7
 8003d76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3708      	adds	r7, #8
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	e000e010 	.word	0xe000e010

08003d88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f7ff ff49 	bl	8003c28 <__NVIC_SetPriorityGrouping>
}
 8003d96:	bf00      	nop
 8003d98:	3708      	adds	r7, #8
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}

08003d9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d9e:	b580      	push	{r7, lr}
 8003da0:	b086      	sub	sp, #24
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	4603      	mov	r3, r0
 8003da6:	60b9      	str	r1, [r7, #8]
 8003da8:	607a      	str	r2, [r7, #4]
 8003daa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003dac:	2300      	movs	r3, #0
 8003dae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003db0:	f7ff ff5e 	bl	8003c70 <__NVIC_GetPriorityGrouping>
 8003db4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	68b9      	ldr	r1, [r7, #8]
 8003dba:	6978      	ldr	r0, [r7, #20]
 8003dbc:	f7ff ff90 	bl	8003ce0 <NVIC_EncodePriority>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dc6:	4611      	mov	r1, r2
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f7ff ff5f 	bl	8003c8c <__NVIC_SetPriority>
}
 8003dce:	bf00      	nop
 8003dd0:	3718      	adds	r7, #24
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}

08003dd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003dd6:	b580      	push	{r7, lr}
 8003dd8:	b082      	sub	sp, #8
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f7ff ffb0 	bl	8003d44 <SysTick_Config>
 8003de4:	4603      	mov	r3, r0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3708      	adds	r7, #8
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
	...

08003df0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b08b      	sub	sp, #44	; 0x2c
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e02:	e127      	b.n	8004054 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003e04:	2201      	movs	r2, #1
 8003e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e08:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	69fa      	ldr	r2, [r7, #28]
 8003e14:	4013      	ands	r3, r2
 8003e16:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003e18:	69ba      	ldr	r2, [r7, #24]
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	f040 8116 	bne.w	800404e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	2b12      	cmp	r3, #18
 8003e28:	d034      	beq.n	8003e94 <HAL_GPIO_Init+0xa4>
 8003e2a:	2b12      	cmp	r3, #18
 8003e2c:	d80d      	bhi.n	8003e4a <HAL_GPIO_Init+0x5a>
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d02b      	beq.n	8003e8a <HAL_GPIO_Init+0x9a>
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d804      	bhi.n	8003e40 <HAL_GPIO_Init+0x50>
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d031      	beq.n	8003e9e <HAL_GPIO_Init+0xae>
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d01c      	beq.n	8003e78 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003e3e:	e048      	b.n	8003ed2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003e40:	2b03      	cmp	r3, #3
 8003e42:	d043      	beq.n	8003ecc <HAL_GPIO_Init+0xdc>
 8003e44:	2b11      	cmp	r3, #17
 8003e46:	d01b      	beq.n	8003e80 <HAL_GPIO_Init+0x90>
          break;
 8003e48:	e043      	b.n	8003ed2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003e4a:	4a89      	ldr	r2, [pc, #548]	; (8004070 <HAL_GPIO_Init+0x280>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d026      	beq.n	8003e9e <HAL_GPIO_Init+0xae>
 8003e50:	4a87      	ldr	r2, [pc, #540]	; (8004070 <HAL_GPIO_Init+0x280>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d806      	bhi.n	8003e64 <HAL_GPIO_Init+0x74>
 8003e56:	4a87      	ldr	r2, [pc, #540]	; (8004074 <HAL_GPIO_Init+0x284>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d020      	beq.n	8003e9e <HAL_GPIO_Init+0xae>
 8003e5c:	4a86      	ldr	r2, [pc, #536]	; (8004078 <HAL_GPIO_Init+0x288>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d01d      	beq.n	8003e9e <HAL_GPIO_Init+0xae>
          break;
 8003e62:	e036      	b.n	8003ed2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003e64:	4a85      	ldr	r2, [pc, #532]	; (800407c <HAL_GPIO_Init+0x28c>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d019      	beq.n	8003e9e <HAL_GPIO_Init+0xae>
 8003e6a:	4a85      	ldr	r2, [pc, #532]	; (8004080 <HAL_GPIO_Init+0x290>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d016      	beq.n	8003e9e <HAL_GPIO_Init+0xae>
 8003e70:	4a84      	ldr	r2, [pc, #528]	; (8004084 <HAL_GPIO_Init+0x294>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d013      	beq.n	8003e9e <HAL_GPIO_Init+0xae>
          break;
 8003e76:	e02c      	b.n	8003ed2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	623b      	str	r3, [r7, #32]
          break;
 8003e7e:	e028      	b.n	8003ed2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	3304      	adds	r3, #4
 8003e86:	623b      	str	r3, [r7, #32]
          break;
 8003e88:	e023      	b.n	8003ed2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	3308      	adds	r3, #8
 8003e90:	623b      	str	r3, [r7, #32]
          break;
 8003e92:	e01e      	b.n	8003ed2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	330c      	adds	r3, #12
 8003e9a:	623b      	str	r3, [r7, #32]
          break;
 8003e9c:	e019      	b.n	8003ed2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d102      	bne.n	8003eac <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003ea6:	2304      	movs	r3, #4
 8003ea8:	623b      	str	r3, [r7, #32]
          break;
 8003eaa:	e012      	b.n	8003ed2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d105      	bne.n	8003ec0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003eb4:	2308      	movs	r3, #8
 8003eb6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	69fa      	ldr	r2, [r7, #28]
 8003ebc:	611a      	str	r2, [r3, #16]
          break;
 8003ebe:	e008      	b.n	8003ed2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003ec0:	2308      	movs	r3, #8
 8003ec2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	69fa      	ldr	r2, [r7, #28]
 8003ec8:	615a      	str	r2, [r3, #20]
          break;
 8003eca:	e002      	b.n	8003ed2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	623b      	str	r3, [r7, #32]
          break;
 8003ed0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	2bff      	cmp	r3, #255	; 0xff
 8003ed6:	d801      	bhi.n	8003edc <HAL_GPIO_Init+0xec>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	e001      	b.n	8003ee0 <HAL_GPIO_Init+0xf0>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	3304      	adds	r3, #4
 8003ee0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003ee2:	69bb      	ldr	r3, [r7, #24]
 8003ee4:	2bff      	cmp	r3, #255	; 0xff
 8003ee6:	d802      	bhi.n	8003eee <HAL_GPIO_Init+0xfe>
 8003ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	e002      	b.n	8003ef4 <HAL_GPIO_Init+0x104>
 8003eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef0:	3b08      	subs	r3, #8
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	210f      	movs	r1, #15
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	fa01 f303 	lsl.w	r3, r1, r3
 8003f02:	43db      	mvns	r3, r3
 8003f04:	401a      	ands	r2, r3
 8003f06:	6a39      	ldr	r1, [r7, #32]
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f0e:	431a      	orrs	r2, r3
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	f000 8096 	beq.w	800404e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003f22:	4b59      	ldr	r3, [pc, #356]	; (8004088 <HAL_GPIO_Init+0x298>)
 8003f24:	699b      	ldr	r3, [r3, #24]
 8003f26:	4a58      	ldr	r2, [pc, #352]	; (8004088 <HAL_GPIO_Init+0x298>)
 8003f28:	f043 0301 	orr.w	r3, r3, #1
 8003f2c:	6193      	str	r3, [r2, #24]
 8003f2e:	4b56      	ldr	r3, [pc, #344]	; (8004088 <HAL_GPIO_Init+0x298>)
 8003f30:	699b      	ldr	r3, [r3, #24]
 8003f32:	f003 0301 	and.w	r3, r3, #1
 8003f36:	60bb      	str	r3, [r7, #8]
 8003f38:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003f3a:	4a54      	ldr	r2, [pc, #336]	; (800408c <HAL_GPIO_Init+0x29c>)
 8003f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3e:	089b      	lsrs	r3, r3, #2
 8003f40:	3302      	adds	r3, #2
 8003f42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f46:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4a:	f003 0303 	and.w	r3, r3, #3
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	220f      	movs	r2, #15
 8003f52:	fa02 f303 	lsl.w	r3, r2, r3
 8003f56:	43db      	mvns	r3, r3
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a4b      	ldr	r2, [pc, #300]	; (8004090 <HAL_GPIO_Init+0x2a0>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d013      	beq.n	8003f8e <HAL_GPIO_Init+0x19e>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4a4a      	ldr	r2, [pc, #296]	; (8004094 <HAL_GPIO_Init+0x2a4>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d00d      	beq.n	8003f8a <HAL_GPIO_Init+0x19a>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a49      	ldr	r2, [pc, #292]	; (8004098 <HAL_GPIO_Init+0x2a8>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d007      	beq.n	8003f86 <HAL_GPIO_Init+0x196>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4a48      	ldr	r2, [pc, #288]	; (800409c <HAL_GPIO_Init+0x2ac>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d101      	bne.n	8003f82 <HAL_GPIO_Init+0x192>
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e006      	b.n	8003f90 <HAL_GPIO_Init+0x1a0>
 8003f82:	2304      	movs	r3, #4
 8003f84:	e004      	b.n	8003f90 <HAL_GPIO_Init+0x1a0>
 8003f86:	2302      	movs	r3, #2
 8003f88:	e002      	b.n	8003f90 <HAL_GPIO_Init+0x1a0>
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e000      	b.n	8003f90 <HAL_GPIO_Init+0x1a0>
 8003f8e:	2300      	movs	r3, #0
 8003f90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f92:	f002 0203 	and.w	r2, r2, #3
 8003f96:	0092      	lsls	r2, r2, #2
 8003f98:	4093      	lsls	r3, r2
 8003f9a:	68fa      	ldr	r2, [r7, #12]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003fa0:	493a      	ldr	r1, [pc, #232]	; (800408c <HAL_GPIO_Init+0x29c>)
 8003fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa4:	089b      	lsrs	r3, r3, #2
 8003fa6:	3302      	adds	r3, #2
 8003fa8:	68fa      	ldr	r2, [r7, #12]
 8003faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d006      	beq.n	8003fc8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003fba:	4b39      	ldr	r3, [pc, #228]	; (80040a0 <HAL_GPIO_Init+0x2b0>)
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	4938      	ldr	r1, [pc, #224]	; (80040a0 <HAL_GPIO_Init+0x2b0>)
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	600b      	str	r3, [r1, #0]
 8003fc6:	e006      	b.n	8003fd6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003fc8:	4b35      	ldr	r3, [pc, #212]	; (80040a0 <HAL_GPIO_Init+0x2b0>)
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	43db      	mvns	r3, r3
 8003fd0:	4933      	ldr	r1, [pc, #204]	; (80040a0 <HAL_GPIO_Init+0x2b0>)
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d006      	beq.n	8003ff0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003fe2:	4b2f      	ldr	r3, [pc, #188]	; (80040a0 <HAL_GPIO_Init+0x2b0>)
 8003fe4:	685a      	ldr	r2, [r3, #4]
 8003fe6:	492e      	ldr	r1, [pc, #184]	; (80040a0 <HAL_GPIO_Init+0x2b0>)
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	604b      	str	r3, [r1, #4]
 8003fee:	e006      	b.n	8003ffe <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003ff0:	4b2b      	ldr	r3, [pc, #172]	; (80040a0 <HAL_GPIO_Init+0x2b0>)
 8003ff2:	685a      	ldr	r2, [r3, #4]
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	43db      	mvns	r3, r3
 8003ff8:	4929      	ldr	r1, [pc, #164]	; (80040a0 <HAL_GPIO_Init+0x2b0>)
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d006      	beq.n	8004018 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800400a:	4b25      	ldr	r3, [pc, #148]	; (80040a0 <HAL_GPIO_Init+0x2b0>)
 800400c:	689a      	ldr	r2, [r3, #8]
 800400e:	4924      	ldr	r1, [pc, #144]	; (80040a0 <HAL_GPIO_Init+0x2b0>)
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	4313      	orrs	r3, r2
 8004014:	608b      	str	r3, [r1, #8]
 8004016:	e006      	b.n	8004026 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004018:	4b21      	ldr	r3, [pc, #132]	; (80040a0 <HAL_GPIO_Init+0x2b0>)
 800401a:	689a      	ldr	r2, [r3, #8]
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	43db      	mvns	r3, r3
 8004020:	491f      	ldr	r1, [pc, #124]	; (80040a0 <HAL_GPIO_Init+0x2b0>)
 8004022:	4013      	ands	r3, r2
 8004024:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d006      	beq.n	8004040 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004032:	4b1b      	ldr	r3, [pc, #108]	; (80040a0 <HAL_GPIO_Init+0x2b0>)
 8004034:	68da      	ldr	r2, [r3, #12]
 8004036:	491a      	ldr	r1, [pc, #104]	; (80040a0 <HAL_GPIO_Init+0x2b0>)
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	4313      	orrs	r3, r2
 800403c:	60cb      	str	r3, [r1, #12]
 800403e:	e006      	b.n	800404e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004040:	4b17      	ldr	r3, [pc, #92]	; (80040a0 <HAL_GPIO_Init+0x2b0>)
 8004042:	68da      	ldr	r2, [r3, #12]
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	43db      	mvns	r3, r3
 8004048:	4915      	ldr	r1, [pc, #84]	; (80040a0 <HAL_GPIO_Init+0x2b0>)
 800404a:	4013      	ands	r3, r2
 800404c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800404e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004050:	3301      	adds	r3, #1
 8004052:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405a:	fa22 f303 	lsr.w	r3, r2, r3
 800405e:	2b00      	cmp	r3, #0
 8004060:	f47f aed0 	bne.w	8003e04 <HAL_GPIO_Init+0x14>
  }
}
 8004064:	bf00      	nop
 8004066:	372c      	adds	r7, #44	; 0x2c
 8004068:	46bd      	mov	sp, r7
 800406a:	bc80      	pop	{r7}
 800406c:	4770      	bx	lr
 800406e:	bf00      	nop
 8004070:	10210000 	.word	0x10210000
 8004074:	10110000 	.word	0x10110000
 8004078:	10120000 	.word	0x10120000
 800407c:	10310000 	.word	0x10310000
 8004080:	10320000 	.word	0x10320000
 8004084:	10220000 	.word	0x10220000
 8004088:	40021000 	.word	0x40021000
 800408c:	40010000 	.word	0x40010000
 8004090:	40010800 	.word	0x40010800
 8004094:	40010c00 	.word	0x40010c00
 8004098:	40011000 	.word	0x40011000
 800409c:	40011400 	.word	0x40011400
 80040a0:	40010400 	.word	0x40010400

080040a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b085      	sub	sp, #20
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	460b      	mov	r3, r1
 80040ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	689a      	ldr	r2, [r3, #8]
 80040b4:	887b      	ldrh	r3, [r7, #2]
 80040b6:	4013      	ands	r3, r2
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d002      	beq.n	80040c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80040bc:	2301      	movs	r3, #1
 80040be:	73fb      	strb	r3, [r7, #15]
 80040c0:	e001      	b.n	80040c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80040c2:	2300      	movs	r3, #0
 80040c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80040c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3714      	adds	r7, #20
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bc80      	pop	{r7}
 80040d0:	4770      	bx	lr

080040d2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040d2:	b480      	push	{r7}
 80040d4:	b083      	sub	sp, #12
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	6078      	str	r0, [r7, #4]
 80040da:	460b      	mov	r3, r1
 80040dc:	807b      	strh	r3, [r7, #2]
 80040de:	4613      	mov	r3, r2
 80040e0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80040e2:	787b      	ldrb	r3, [r7, #1]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d003      	beq.n	80040f0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80040e8:	887a      	ldrh	r2, [r7, #2]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80040ee:	e003      	b.n	80040f8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80040f0:	887b      	ldrh	r3, [r7, #2]
 80040f2:	041a      	lsls	r2, r3, #16
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	611a      	str	r2, [r3, #16]
}
 80040f8:	bf00      	nop
 80040fa:	370c      	adds	r7, #12
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bc80      	pop	{r7}
 8004100:	4770      	bx	lr
	...

08004104 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d101      	bne.n	8004116 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e11f      	b.n	8004356 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800411c:	b2db      	uxtb	r3, r3
 800411e:	2b00      	cmp	r3, #0
 8004120:	d106      	bne.n	8004130 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f7fe fcca 	bl	8002ac4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2224      	movs	r2, #36	; 0x24
 8004134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f022 0201 	bic.w	r2, r2, #1
 8004146:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004156:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004166:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004168:	f001 fb5e 	bl	8005828 <HAL_RCC_GetPCLK1Freq>
 800416c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	4a7b      	ldr	r2, [pc, #492]	; (8004360 <HAL_I2C_Init+0x25c>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d807      	bhi.n	8004188 <HAL_I2C_Init+0x84>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	4a7a      	ldr	r2, [pc, #488]	; (8004364 <HAL_I2C_Init+0x260>)
 800417c:	4293      	cmp	r3, r2
 800417e:	bf94      	ite	ls
 8004180:	2301      	movls	r3, #1
 8004182:	2300      	movhi	r3, #0
 8004184:	b2db      	uxtb	r3, r3
 8004186:	e006      	b.n	8004196 <HAL_I2C_Init+0x92>
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	4a77      	ldr	r2, [pc, #476]	; (8004368 <HAL_I2C_Init+0x264>)
 800418c:	4293      	cmp	r3, r2
 800418e:	bf94      	ite	ls
 8004190:	2301      	movls	r3, #1
 8004192:	2300      	movhi	r3, #0
 8004194:	b2db      	uxtb	r3, r3
 8004196:	2b00      	cmp	r3, #0
 8004198:	d001      	beq.n	800419e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e0db      	b.n	8004356 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	4a72      	ldr	r2, [pc, #456]	; (800436c <HAL_I2C_Init+0x268>)
 80041a2:	fba2 2303 	umull	r2, r3, r2, r3
 80041a6:	0c9b      	lsrs	r3, r3, #18
 80041a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68ba      	ldr	r2, [r7, #8]
 80041ba:	430a      	orrs	r2, r1
 80041bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	6a1b      	ldr	r3, [r3, #32]
 80041c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	4a64      	ldr	r2, [pc, #400]	; (8004360 <HAL_I2C_Init+0x25c>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d802      	bhi.n	80041d8 <HAL_I2C_Init+0xd4>
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	3301      	adds	r3, #1
 80041d6:	e009      	b.n	80041ec <HAL_I2C_Init+0xe8>
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80041de:	fb02 f303 	mul.w	r3, r2, r3
 80041e2:	4a63      	ldr	r2, [pc, #396]	; (8004370 <HAL_I2C_Init+0x26c>)
 80041e4:	fba2 2303 	umull	r2, r3, r2, r3
 80041e8:	099b      	lsrs	r3, r3, #6
 80041ea:	3301      	adds	r3, #1
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	6812      	ldr	r2, [r2, #0]
 80041f0:	430b      	orrs	r3, r1
 80041f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	69db      	ldr	r3, [r3, #28]
 80041fa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80041fe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	4956      	ldr	r1, [pc, #344]	; (8004360 <HAL_I2C_Init+0x25c>)
 8004208:	428b      	cmp	r3, r1
 800420a:	d80d      	bhi.n	8004228 <HAL_I2C_Init+0x124>
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	1e59      	subs	r1, r3, #1
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	005b      	lsls	r3, r3, #1
 8004216:	fbb1 f3f3 	udiv	r3, r1, r3
 800421a:	3301      	adds	r3, #1
 800421c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004220:	2b04      	cmp	r3, #4
 8004222:	bf38      	it	cc
 8004224:	2304      	movcc	r3, #4
 8004226:	e04f      	b.n	80042c8 <HAL_I2C_Init+0x1c4>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d111      	bne.n	8004254 <HAL_I2C_Init+0x150>
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	1e58      	subs	r0, r3, #1
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6859      	ldr	r1, [r3, #4]
 8004238:	460b      	mov	r3, r1
 800423a:	005b      	lsls	r3, r3, #1
 800423c:	440b      	add	r3, r1
 800423e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004242:	3301      	adds	r3, #1
 8004244:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004248:	2b00      	cmp	r3, #0
 800424a:	bf0c      	ite	eq
 800424c:	2301      	moveq	r3, #1
 800424e:	2300      	movne	r3, #0
 8004250:	b2db      	uxtb	r3, r3
 8004252:	e012      	b.n	800427a <HAL_I2C_Init+0x176>
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	1e58      	subs	r0, r3, #1
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6859      	ldr	r1, [r3, #4]
 800425c:	460b      	mov	r3, r1
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	440b      	add	r3, r1
 8004262:	0099      	lsls	r1, r3, #2
 8004264:	440b      	add	r3, r1
 8004266:	fbb0 f3f3 	udiv	r3, r0, r3
 800426a:	3301      	adds	r3, #1
 800426c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004270:	2b00      	cmp	r3, #0
 8004272:	bf0c      	ite	eq
 8004274:	2301      	moveq	r3, #1
 8004276:	2300      	movne	r3, #0
 8004278:	b2db      	uxtb	r3, r3
 800427a:	2b00      	cmp	r3, #0
 800427c:	d001      	beq.n	8004282 <HAL_I2C_Init+0x17e>
 800427e:	2301      	movs	r3, #1
 8004280:	e022      	b.n	80042c8 <HAL_I2C_Init+0x1c4>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d10e      	bne.n	80042a8 <HAL_I2C_Init+0x1a4>
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	1e58      	subs	r0, r3, #1
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6859      	ldr	r1, [r3, #4]
 8004292:	460b      	mov	r3, r1
 8004294:	005b      	lsls	r3, r3, #1
 8004296:	440b      	add	r3, r1
 8004298:	fbb0 f3f3 	udiv	r3, r0, r3
 800429c:	3301      	adds	r3, #1
 800429e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042a6:	e00f      	b.n	80042c8 <HAL_I2C_Init+0x1c4>
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	1e58      	subs	r0, r3, #1
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6859      	ldr	r1, [r3, #4]
 80042b0:	460b      	mov	r3, r1
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	440b      	add	r3, r1
 80042b6:	0099      	lsls	r1, r3, #2
 80042b8:	440b      	add	r3, r1
 80042ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80042be:	3301      	adds	r3, #1
 80042c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80042c8:	6879      	ldr	r1, [r7, #4]
 80042ca:	6809      	ldr	r1, [r1, #0]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	69da      	ldr	r2, [r3, #28]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a1b      	ldr	r3, [r3, #32]
 80042e2:	431a      	orrs	r2, r3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	430a      	orrs	r2, r1
 80042ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80042f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	6911      	ldr	r1, [r2, #16]
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	68d2      	ldr	r2, [r2, #12]
 8004302:	4311      	orrs	r1, r2
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	6812      	ldr	r2, [r2, #0]
 8004308:	430b      	orrs	r3, r1
 800430a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	695a      	ldr	r2, [r3, #20]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	699b      	ldr	r3, [r3, #24]
 800431e:	431a      	orrs	r2, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	430a      	orrs	r2, r1
 8004326:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f042 0201 	orr.w	r2, r2, #1
 8004336:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2220      	movs	r2, #32
 8004342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3710      	adds	r7, #16
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	000186a0 	.word	0x000186a0
 8004364:	001e847f 	.word	0x001e847f
 8004368:	003d08ff 	.word	0x003d08ff
 800436c:	431bde83 	.word	0x431bde83
 8004370:	10624dd3 	.word	0x10624dd3

08004374 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b088      	sub	sp, #32
 8004378:	af02      	add	r7, sp, #8
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	607a      	str	r2, [r7, #4]
 800437e:	461a      	mov	r2, r3
 8004380:	460b      	mov	r3, r1
 8004382:	817b      	strh	r3, [r7, #10]
 8004384:	4613      	mov	r3, r2
 8004386:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004388:	f7ff fa18 	bl	80037bc <HAL_GetTick>
 800438c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004394:	b2db      	uxtb	r3, r3
 8004396:	2b20      	cmp	r3, #32
 8004398:	f040 80e0 	bne.w	800455c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	9300      	str	r3, [sp, #0]
 80043a0:	2319      	movs	r3, #25
 80043a2:	2201      	movs	r2, #1
 80043a4:	4970      	ldr	r1, [pc, #448]	; (8004568 <HAL_I2C_Master_Transmit+0x1f4>)
 80043a6:	68f8      	ldr	r0, [r7, #12]
 80043a8:	f000 fc8c 	bl	8004cc4 <I2C_WaitOnFlagUntilTimeout>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d001      	beq.n	80043b6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80043b2:	2302      	movs	r3, #2
 80043b4:	e0d3      	b.n	800455e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d101      	bne.n	80043c4 <HAL_I2C_Master_Transmit+0x50>
 80043c0:	2302      	movs	r3, #2
 80043c2:	e0cc      	b.n	800455e <HAL_I2C_Master_Transmit+0x1ea>
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0301 	and.w	r3, r3, #1
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d007      	beq.n	80043ea <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f042 0201 	orr.w	r2, r2, #1
 80043e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043f8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2221      	movs	r2, #33	; 0x21
 80043fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2210      	movs	r2, #16
 8004406:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2200      	movs	r2, #0
 800440e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	893a      	ldrh	r2, [r7, #8]
 800441a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004420:	b29a      	uxth	r2, r3
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	4a50      	ldr	r2, [pc, #320]	; (800456c <HAL_I2C_Master_Transmit+0x1f8>)
 800442a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800442c:	8979      	ldrh	r1, [r7, #10]
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	6a3a      	ldr	r2, [r7, #32]
 8004432:	68f8      	ldr	r0, [r7, #12]
 8004434:	f000 faf6 	bl	8004a24 <I2C_MasterRequestWrite>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d001      	beq.n	8004442 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e08d      	b.n	800455e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004442:	2300      	movs	r3, #0
 8004444:	613b      	str	r3, [r7, #16]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	695b      	ldr	r3, [r3, #20]
 800444c:	613b      	str	r3, [r7, #16]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	699b      	ldr	r3, [r3, #24]
 8004454:	613b      	str	r3, [r7, #16]
 8004456:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004458:	e066      	b.n	8004528 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800445a:	697a      	ldr	r2, [r7, #20]
 800445c:	6a39      	ldr	r1, [r7, #32]
 800445e:	68f8      	ldr	r0, [r7, #12]
 8004460:	f000 fd06 	bl	8004e70 <I2C_WaitOnTXEFlagUntilTimeout>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d00d      	beq.n	8004486 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446e:	2b04      	cmp	r3, #4
 8004470:	d107      	bne.n	8004482 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004480:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e06b      	b.n	800455e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448a:	781a      	ldrb	r2, [r3, #0]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004496:	1c5a      	adds	r2, r3, #1
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	3b01      	subs	r3, #1
 80044a4:	b29a      	uxth	r2, r3
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044ae:	3b01      	subs	r3, #1
 80044b0:	b29a      	uxth	r2, r3
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	695b      	ldr	r3, [r3, #20]
 80044bc:	f003 0304 	and.w	r3, r3, #4
 80044c0:	2b04      	cmp	r3, #4
 80044c2:	d11b      	bne.n	80044fc <HAL_I2C_Master_Transmit+0x188>
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d017      	beq.n	80044fc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d0:	781a      	ldrb	r2, [r3, #0]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044dc:	1c5a      	adds	r2, r3, #1
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	3b01      	subs	r3, #1
 80044ea:	b29a      	uxth	r2, r3
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044f4:	3b01      	subs	r3, #1
 80044f6:	b29a      	uxth	r2, r3
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044fc:	697a      	ldr	r2, [r7, #20]
 80044fe:	6a39      	ldr	r1, [r7, #32]
 8004500:	68f8      	ldr	r0, [r7, #12]
 8004502:	f000 fcf6 	bl	8004ef2 <I2C_WaitOnBTFFlagUntilTimeout>
 8004506:	4603      	mov	r3, r0
 8004508:	2b00      	cmp	r3, #0
 800450a:	d00d      	beq.n	8004528 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004510:	2b04      	cmp	r3, #4
 8004512:	d107      	bne.n	8004524 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004522:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e01a      	b.n	800455e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800452c:	2b00      	cmp	r3, #0
 800452e:	d194      	bne.n	800445a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800453e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2220      	movs	r2, #32
 8004544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2200      	movs	r2, #0
 800454c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2200      	movs	r2, #0
 8004554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004558:	2300      	movs	r3, #0
 800455a:	e000      	b.n	800455e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800455c:	2302      	movs	r3, #2
  }
}
 800455e:	4618      	mov	r0, r3
 8004560:	3718      	adds	r7, #24
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	00100002 	.word	0x00100002
 800456c:	ffff0000 	.word	0xffff0000

08004570 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b08c      	sub	sp, #48	; 0x30
 8004574:	af02      	add	r7, sp, #8
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	607a      	str	r2, [r7, #4]
 800457a:	461a      	mov	r2, r3
 800457c:	460b      	mov	r3, r1
 800457e:	817b      	strh	r3, [r7, #10]
 8004580:	4613      	mov	r3, r2
 8004582:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8004584:	2300      	movs	r3, #0
 8004586:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004588:	f7ff f918 	bl	80037bc <HAL_GetTick>
 800458c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004594:	b2db      	uxtb	r3, r3
 8004596:	2b20      	cmp	r3, #32
 8004598:	f040 8238 	bne.w	8004a0c <HAL_I2C_Master_Receive+0x49c>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800459c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459e:	9300      	str	r3, [sp, #0]
 80045a0:	2319      	movs	r3, #25
 80045a2:	2201      	movs	r2, #1
 80045a4:	497e      	ldr	r1, [pc, #504]	; (80047a0 <HAL_I2C_Master_Receive+0x230>)
 80045a6:	68f8      	ldr	r0, [r7, #12]
 80045a8:	f000 fb8c 	bl	8004cc4 <I2C_WaitOnFlagUntilTimeout>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d001      	beq.n	80045b6 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80045b2:	2302      	movs	r3, #2
 80045b4:	e22b      	b.n	8004a0e <HAL_I2C_Master_Receive+0x49e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d101      	bne.n	80045c4 <HAL_I2C_Master_Receive+0x54>
 80045c0:	2302      	movs	r3, #2
 80045c2:	e224      	b.n	8004a0e <HAL_I2C_Master_Receive+0x49e>
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 0301 	and.w	r3, r3, #1
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d007      	beq.n	80045ea <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f042 0201 	orr.w	r2, r2, #1
 80045e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045f8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2222      	movs	r2, #34	; 0x22
 80045fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2210      	movs	r2, #16
 8004606:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2200      	movs	r2, #0
 800460e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	893a      	ldrh	r2, [r7, #8]
 800461a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004620:	b29a      	uxth	r2, r3
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	4a5e      	ldr	r2, [pc, #376]	; (80047a4 <HAL_I2C_Master_Receive+0x234>)
 800462a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800462c:	8979      	ldrh	r1, [r7, #10]
 800462e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004630:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004632:	68f8      	ldr	r0, [r7, #12]
 8004634:	f000 fa78 	bl	8004b28 <I2C_MasterRequestRead>
 8004638:	4603      	mov	r3, r0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d001      	beq.n	8004642 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e1e5      	b.n	8004a0e <HAL_I2C_Master_Receive+0x49e>
    }

    if (hi2c->XferSize == 0U)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004646:	2b00      	cmp	r3, #0
 8004648:	d113      	bne.n	8004672 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800464a:	2300      	movs	r3, #0
 800464c:	61fb      	str	r3, [r7, #28]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	695b      	ldr	r3, [r3, #20]
 8004654:	61fb      	str	r3, [r7, #28]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	699b      	ldr	r3, [r3, #24]
 800465c:	61fb      	str	r3, [r7, #28]
 800465e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800466e:	601a      	str	r2, [r3, #0]
 8004670:	e1b9      	b.n	80049e6 <HAL_I2C_Master_Receive+0x476>
    }
    else if (hi2c->XferSize == 1U)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004676:	2b01      	cmp	r3, #1
 8004678:	d11d      	bne.n	80046b6 <HAL_I2C_Master_Receive+0x146>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004688:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800468a:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800468c:	2300      	movs	r3, #0
 800468e:	61bb      	str	r3, [r7, #24]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	695b      	ldr	r3, [r3, #20]
 8004696:	61bb      	str	r3, [r7, #24]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	699b      	ldr	r3, [r3, #24]
 800469e:	61bb      	str	r3, [r7, #24]
 80046a0:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046b0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80046b2:	b662      	cpsie	i
 80046b4:	e197      	b.n	80049e6 <HAL_I2C_Master_Receive+0x476>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ba:	2b02      	cmp	r3, #2
 80046bc:	d11d      	bne.n	80046fa <HAL_I2C_Master_Receive+0x18a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046cc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80046ce:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046d0:	2300      	movs	r3, #0
 80046d2:	617b      	str	r3, [r7, #20]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	695b      	ldr	r3, [r3, #20]
 80046da:	617b      	str	r3, [r7, #20]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	699b      	ldr	r3, [r3, #24]
 80046e2:	617b      	str	r3, [r7, #20]
 80046e4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046f4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80046f6:	b662      	cpsie	i
 80046f8:	e175      	b.n	80049e6 <HAL_I2C_Master_Receive+0x476>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004708:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800470a:	2300      	movs	r3, #0
 800470c:	613b      	str	r3, [r7, #16]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	695b      	ldr	r3, [r3, #20]
 8004714:	613b      	str	r3, [r7, #16]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	699b      	ldr	r3, [r3, #24]
 800471c:	613b      	str	r3, [r7, #16]
 800471e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004720:	e161      	b.n	80049e6 <HAL_I2C_Master_Receive+0x476>
    {
      if (hi2c->XferSize <= 3U)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004726:	2b03      	cmp	r3, #3
 8004728:	f200 811a 	bhi.w	8004960 <HAL_I2C_Master_Receive+0x3f0>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004730:	2b01      	cmp	r3, #1
 8004732:	d123      	bne.n	800477c <HAL_I2C_Master_Receive+0x20c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004734:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004736:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004738:	68f8      	ldr	r0, [r7, #12]
 800473a:	f000 fc1b 	bl	8004f74 <I2C_WaitOnRXNEFlagUntilTimeout>
 800473e:	4603      	mov	r3, r0
 8004740:	2b00      	cmp	r3, #0
 8004742:	d001      	beq.n	8004748 <HAL_I2C_Master_Receive+0x1d8>
          {
            return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e162      	b.n	8004a0e <HAL_I2C_Master_Receive+0x49e>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	691a      	ldr	r2, [r3, #16]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004752:	b2d2      	uxtb	r2, r2
 8004754:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475a:	1c5a      	adds	r2, r3, #1
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004764:	3b01      	subs	r3, #1
 8004766:	b29a      	uxth	r2, r3
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004770:	b29b      	uxth	r3, r3
 8004772:	3b01      	subs	r3, #1
 8004774:	b29a      	uxth	r2, r3
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	855a      	strh	r2, [r3, #42]	; 0x2a
 800477a:	e134      	b.n	80049e6 <HAL_I2C_Master_Receive+0x476>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004780:	2b02      	cmp	r3, #2
 8004782:	d150      	bne.n	8004826 <HAL_I2C_Master_Receive+0x2b6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004786:	9300      	str	r3, [sp, #0]
 8004788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800478a:	2200      	movs	r2, #0
 800478c:	4906      	ldr	r1, [pc, #24]	; (80047a8 <HAL_I2C_Master_Receive+0x238>)
 800478e:	68f8      	ldr	r0, [r7, #12]
 8004790:	f000 fa98 	bl	8004cc4 <I2C_WaitOnFlagUntilTimeout>
 8004794:	4603      	mov	r3, r0
 8004796:	2b00      	cmp	r3, #0
 8004798:	d008      	beq.n	80047ac <HAL_I2C_Master_Receive+0x23c>
          {
            return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e137      	b.n	8004a0e <HAL_I2C_Master_Receive+0x49e>
 800479e:	bf00      	nop
 80047a0:	00100002 	.word	0x00100002
 80047a4:	ffff0000 	.word	0xffff0000
 80047a8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80047ac:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047bc:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	691a      	ldr	r2, [r3, #16]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c8:	b2d2      	uxtb	r2, r2
 80047ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d0:	1c5a      	adds	r2, r3, #1
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047da:	3b01      	subs	r3, #1
 80047dc:	b29a      	uxth	r2, r3
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	3b01      	subs	r3, #1
 80047ea:	b29a      	uxth	r2, r3
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80047f0:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	691a      	ldr	r2, [r3, #16]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fc:	b2d2      	uxtb	r2, r2
 80047fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004804:	1c5a      	adds	r2, r3, #1
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800480e:	3b01      	subs	r3, #1
 8004810:	b29a      	uxth	r2, r3
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800481a:	b29b      	uxth	r3, r3
 800481c:	3b01      	subs	r3, #1
 800481e:	b29a      	uxth	r2, r3
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004824:	e0df      	b.n	80049e6 <HAL_I2C_Master_Receive+0x476>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004828:	9300      	str	r3, [sp, #0]
 800482a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800482c:	2200      	movs	r2, #0
 800482e:	497a      	ldr	r1, [pc, #488]	; (8004a18 <HAL_I2C_Master_Receive+0x4a8>)
 8004830:	68f8      	ldr	r0, [r7, #12]
 8004832:	f000 fa47 	bl	8004cc4 <I2C_WaitOnFlagUntilTimeout>
 8004836:	4603      	mov	r3, r0
 8004838:	2b00      	cmp	r3, #0
 800483a:	d001      	beq.n	8004840 <HAL_I2C_Master_Receive+0x2d0>
          {
            return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e0e6      	b.n	8004a0e <HAL_I2C_Master_Receive+0x49e>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800484e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004850:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	691a      	ldr	r2, [r3, #16]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485c:	b2d2      	uxtb	r2, r2
 800485e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004864:	1c5a      	adds	r2, r3, #1
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800486e:	3b01      	subs	r3, #1
 8004870:	b29a      	uxth	r2, r3
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800487a:	b29b      	uxth	r3, r3
 800487c:	3b01      	subs	r3, #1
 800487e:	b29a      	uxth	r2, r3
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004884:	4b65      	ldr	r3, [pc, #404]	; (8004a1c <HAL_I2C_Master_Receive+0x4ac>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	08db      	lsrs	r3, r3, #3
 800488a:	4a65      	ldr	r2, [pc, #404]	; (8004a20 <HAL_I2C_Master_Receive+0x4b0>)
 800488c:	fba2 2303 	umull	r2, r3, r2, r3
 8004890:	0a1a      	lsrs	r2, r3, #8
 8004892:	4613      	mov	r3, r2
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	4413      	add	r3, r2
 8004898:	00da      	lsls	r2, r3, #3
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800489e:	6a3b      	ldr	r3, [r7, #32]
 80048a0:	3b01      	subs	r3, #1
 80048a2:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80048a4:	6a3b      	ldr	r3, [r7, #32]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d117      	bne.n	80048da <HAL_I2C_Master_Receive+0x36a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2200      	movs	r2, #0
 80048ae:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2220      	movs	r2, #32
 80048b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c4:	f043 0220 	orr.w	r2, r3, #32
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80048cc:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e099      	b.n	8004a0e <HAL_I2C_Master_Receive+0x49e>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	695b      	ldr	r3, [r3, #20]
 80048e0:	f003 0304 	and.w	r3, r3, #4
 80048e4:	2b04      	cmp	r3, #4
 80048e6:	d1da      	bne.n	800489e <HAL_I2C_Master_Receive+0x32e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	691a      	ldr	r2, [r3, #16]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004902:	b2d2      	uxtb	r2, r2
 8004904:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490a:	1c5a      	adds	r2, r3, #1
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004914:	3b01      	subs	r3, #1
 8004916:	b29a      	uxth	r2, r3
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004920:	b29b      	uxth	r3, r3
 8004922:	3b01      	subs	r3, #1
 8004924:	b29a      	uxth	r2, r3
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	855a      	strh	r2, [r3, #42]	; 0x2a
 800492a:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	691a      	ldr	r2, [r3, #16]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004936:	b2d2      	uxtb	r2, r2
 8004938:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493e:	1c5a      	adds	r2, r3, #1
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004948:	3b01      	subs	r3, #1
 800494a:	b29a      	uxth	r2, r3
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004954:	b29b      	uxth	r3, r3
 8004956:	3b01      	subs	r3, #1
 8004958:	b29a      	uxth	r2, r3
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800495e:	e042      	b.n	80049e6 <HAL_I2C_Master_Receive+0x476>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004962:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004964:	68f8      	ldr	r0, [r7, #12]
 8004966:	f000 fb05 	bl	8004f74 <I2C_WaitOnRXNEFlagUntilTimeout>
 800496a:	4603      	mov	r3, r0
 800496c:	2b00      	cmp	r3, #0
 800496e:	d001      	beq.n	8004974 <HAL_I2C_Master_Receive+0x404>
        {
          return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e04c      	b.n	8004a0e <HAL_I2C_Master_Receive+0x49e>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	691a      	ldr	r2, [r3, #16]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497e:	b2d2      	uxtb	r2, r2
 8004980:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004986:	1c5a      	adds	r2, r3, #1
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004990:	3b01      	subs	r3, #1
 8004992:	b29a      	uxth	r2, r3
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800499c:	b29b      	uxth	r3, r3
 800499e:	3b01      	subs	r3, #1
 80049a0:	b29a      	uxth	r2, r3
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	695b      	ldr	r3, [r3, #20]
 80049ac:	f003 0304 	and.w	r3, r3, #4
 80049b0:	2b04      	cmp	r3, #4
 80049b2:	d118      	bne.n	80049e6 <HAL_I2C_Master_Receive+0x476>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	691a      	ldr	r2, [r3, #16]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049be:	b2d2      	uxtb	r2, r2
 80049c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c6:	1c5a      	adds	r2, r3, #1
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049d0:	3b01      	subs	r3, #1
 80049d2:	b29a      	uxth	r2, r3
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049dc:	b29b      	uxth	r3, r3
 80049de:	3b01      	subs	r3, #1
 80049e0:	b29a      	uxth	r2, r3
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	f47f ae99 	bne.w	8004722 <HAL_I2C_Master_Receive+0x1b2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2220      	movs	r2, #32
 80049f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	e000      	b.n	8004a0e <HAL_I2C_Master_Receive+0x49e>
  }
  else
  {
    return HAL_BUSY;
 8004a0c:	2302      	movs	r3, #2
  }
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3728      	adds	r7, #40	; 0x28
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	00010004 	.word	0x00010004
 8004a1c:	2000004c 	.word	0x2000004c
 8004a20:	14f8b589 	.word	0x14f8b589

08004a24 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b088      	sub	sp, #32
 8004a28:	af02      	add	r7, sp, #8
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	607a      	str	r2, [r7, #4]
 8004a2e:	603b      	str	r3, [r7, #0]
 8004a30:	460b      	mov	r3, r1
 8004a32:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a38:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	2b08      	cmp	r3, #8
 8004a3e:	d006      	beq.n	8004a4e <I2C_MasterRequestWrite+0x2a>
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d003      	beq.n	8004a4e <I2C_MasterRequestWrite+0x2a>
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a4c:	d108      	bne.n	8004a60 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a5c:	601a      	str	r2, [r3, #0]
 8004a5e:	e00b      	b.n	8004a78 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a64:	2b12      	cmp	r3, #18
 8004a66:	d107      	bne.n	8004a78 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a76:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	9300      	str	r3, [sp, #0]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a84:	68f8      	ldr	r0, [r7, #12]
 8004a86:	f000 f91d 	bl	8004cc4 <I2C_WaitOnFlagUntilTimeout>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d00d      	beq.n	8004aac <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a9e:	d103      	bne.n	8004aa8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004aa6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	e035      	b.n	8004b18 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	691b      	ldr	r3, [r3, #16]
 8004ab0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ab4:	d108      	bne.n	8004ac8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004ab6:	897b      	ldrh	r3, [r7, #10]
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	461a      	mov	r2, r3
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004ac4:	611a      	str	r2, [r3, #16]
 8004ac6:	e01b      	b.n	8004b00 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004ac8:	897b      	ldrh	r3, [r7, #10]
 8004aca:	11db      	asrs	r3, r3, #7
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	f003 0306 	and.w	r3, r3, #6
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	f063 030f 	orn	r3, r3, #15
 8004ad8:	b2da      	uxtb	r2, r3
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	490e      	ldr	r1, [pc, #56]	; (8004b20 <I2C_MasterRequestWrite+0xfc>)
 8004ae6:	68f8      	ldr	r0, [r7, #12]
 8004ae8:	f000 f943 	bl	8004d72 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d001      	beq.n	8004af6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e010      	b.n	8004b18 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004af6:	897b      	ldrh	r3, [r7, #10]
 8004af8:	b2da      	uxtb	r2, r3
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	4907      	ldr	r1, [pc, #28]	; (8004b24 <I2C_MasterRequestWrite+0x100>)
 8004b06:	68f8      	ldr	r0, [r7, #12]
 8004b08:	f000 f933 	bl	8004d72 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d001      	beq.n	8004b16 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e000      	b.n	8004b18 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004b16:	2300      	movs	r3, #0
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3718      	adds	r7, #24
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	00010008 	.word	0x00010008
 8004b24:	00010002 	.word	0x00010002

08004b28 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b088      	sub	sp, #32
 8004b2c:	af02      	add	r7, sp, #8
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	607a      	str	r2, [r7, #4]
 8004b32:	603b      	str	r3, [r7, #0]
 8004b34:	460b      	mov	r3, r1
 8004b36:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b3c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b4c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	2b08      	cmp	r3, #8
 8004b52:	d006      	beq.n	8004b62 <I2C_MasterRequestRead+0x3a>
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d003      	beq.n	8004b62 <I2C_MasterRequestRead+0x3a>
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004b60:	d108      	bne.n	8004b74 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b70:	601a      	str	r2, [r3, #0]
 8004b72:	e00b      	b.n	8004b8c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b78:	2b11      	cmp	r3, #17
 8004b7a:	d107      	bne.n	8004b8c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b8a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	9300      	str	r3, [sp, #0]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b98:	68f8      	ldr	r0, [r7, #12]
 8004b9a:	f000 f893 	bl	8004cc4 <I2C_WaitOnFlagUntilTimeout>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d00d      	beq.n	8004bc0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bb2:	d103      	bne.n	8004bbc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004bba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004bbc:	2303      	movs	r3, #3
 8004bbe:	e079      	b.n	8004cb4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	691b      	ldr	r3, [r3, #16]
 8004bc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bc8:	d108      	bne.n	8004bdc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004bca:	897b      	ldrh	r3, [r7, #10]
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	f043 0301 	orr.w	r3, r3, #1
 8004bd2:	b2da      	uxtb	r2, r3
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	611a      	str	r2, [r3, #16]
 8004bda:	e05f      	b.n	8004c9c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004bdc:	897b      	ldrh	r3, [r7, #10]
 8004bde:	11db      	asrs	r3, r3, #7
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	f003 0306 	and.w	r3, r3, #6
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	f063 030f 	orn	r3, r3, #15
 8004bec:	b2da      	uxtb	r2, r3
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	4930      	ldr	r1, [pc, #192]	; (8004cbc <I2C_MasterRequestRead+0x194>)
 8004bfa:	68f8      	ldr	r0, [r7, #12]
 8004bfc:	f000 f8b9 	bl	8004d72 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c00:	4603      	mov	r3, r0
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d001      	beq.n	8004c0a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e054      	b.n	8004cb4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004c0a:	897b      	ldrh	r3, [r7, #10]
 8004c0c:	b2da      	uxtb	r2, r3
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	4929      	ldr	r1, [pc, #164]	; (8004cc0 <I2C_MasterRequestRead+0x198>)
 8004c1a:	68f8      	ldr	r0, [r7, #12]
 8004c1c:	f000 f8a9 	bl	8004d72 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d001      	beq.n	8004c2a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e044      	b.n	8004cb4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	613b      	str	r3, [r7, #16]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	695b      	ldr	r3, [r3, #20]
 8004c34:	613b      	str	r3, [r7, #16]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	699b      	ldr	r3, [r3, #24]
 8004c3c:	613b      	str	r3, [r7, #16]
 8004c3e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c4e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	9300      	str	r3, [sp, #0]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c5c:	68f8      	ldr	r0, [r7, #12]
 8004c5e:	f000 f831 	bl	8004cc4 <I2C_WaitOnFlagUntilTimeout>
 8004c62:	4603      	mov	r3, r0
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d00d      	beq.n	8004c84 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c76:	d103      	bne.n	8004c80 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c7e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004c80:	2303      	movs	r3, #3
 8004c82:	e017      	b.n	8004cb4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004c84:	897b      	ldrh	r3, [r7, #10]
 8004c86:	11db      	asrs	r3, r3, #7
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	f003 0306 	and.w	r3, r3, #6
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	f063 030e 	orn	r3, r3, #14
 8004c94:	b2da      	uxtb	r2, r3
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	4907      	ldr	r1, [pc, #28]	; (8004cc0 <I2C_MasterRequestRead+0x198>)
 8004ca2:	68f8      	ldr	r0, [r7, #12]
 8004ca4:	f000 f865 	bl	8004d72 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d001      	beq.n	8004cb2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e000      	b.n	8004cb4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004cb2:	2300      	movs	r3, #0
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3718      	adds	r7, #24
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	00010008 	.word	0x00010008
 8004cc0:	00010002 	.word	0x00010002

08004cc4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	60f8      	str	r0, [r7, #12]
 8004ccc:	60b9      	str	r1, [r7, #8]
 8004cce:	603b      	str	r3, [r7, #0]
 8004cd0:	4613      	mov	r3, r2
 8004cd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004cd4:	e025      	b.n	8004d22 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cdc:	d021      	beq.n	8004d22 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cde:	f7fe fd6d 	bl	80037bc <HAL_GetTick>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	683a      	ldr	r2, [r7, #0]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d302      	bcc.n	8004cf4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d116      	bne.n	8004d22 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2220      	movs	r2, #32
 8004cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0e:	f043 0220 	orr.w	r2, r3, #32
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e023      	b.n	8004d6a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	0c1b      	lsrs	r3, r3, #16
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d10d      	bne.n	8004d48 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	695b      	ldr	r3, [r3, #20]
 8004d32:	43da      	mvns	r2, r3
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	4013      	ands	r3, r2
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	bf0c      	ite	eq
 8004d3e:	2301      	moveq	r3, #1
 8004d40:	2300      	movne	r3, #0
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	461a      	mov	r2, r3
 8004d46:	e00c      	b.n	8004d62 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	699b      	ldr	r3, [r3, #24]
 8004d4e:	43da      	mvns	r2, r3
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	4013      	ands	r3, r2
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	bf0c      	ite	eq
 8004d5a:	2301      	moveq	r3, #1
 8004d5c:	2300      	movne	r3, #0
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	461a      	mov	r2, r3
 8004d62:	79fb      	ldrb	r3, [r7, #7]
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d0b6      	beq.n	8004cd6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d68:	2300      	movs	r3, #0
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3710      	adds	r7, #16
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}

08004d72 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004d72:	b580      	push	{r7, lr}
 8004d74:	b084      	sub	sp, #16
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	60f8      	str	r0, [r7, #12]
 8004d7a:	60b9      	str	r1, [r7, #8]
 8004d7c:	607a      	str	r2, [r7, #4]
 8004d7e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d80:	e051      	b.n	8004e26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	695b      	ldr	r3, [r3, #20]
 8004d88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d90:	d123      	bne.n	8004dda <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004da0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004daa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2200      	movs	r2, #0
 8004db0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2220      	movs	r2, #32
 8004db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc6:	f043 0204 	orr.w	r2, r3, #4
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e046      	b.n	8004e68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004de0:	d021      	beq.n	8004e26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004de2:	f7fe fceb 	bl	80037bc <HAL_GetTick>
 8004de6:	4602      	mov	r2, r0
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	1ad3      	subs	r3, r2, r3
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d302      	bcc.n	8004df8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d116      	bne.n	8004e26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2220      	movs	r2, #32
 8004e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e12:	f043 0220 	orr.w	r2, r3, #32
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e020      	b.n	8004e68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	0c1b      	lsrs	r3, r3, #16
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d10c      	bne.n	8004e4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	695b      	ldr	r3, [r3, #20]
 8004e36:	43da      	mvns	r2, r3
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	bf14      	ite	ne
 8004e42:	2301      	movne	r3, #1
 8004e44:	2300      	moveq	r3, #0
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	e00b      	b.n	8004e62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	699b      	ldr	r3, [r3, #24]
 8004e50:	43da      	mvns	r2, r3
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	4013      	ands	r3, r2
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	bf14      	ite	ne
 8004e5c:	2301      	movne	r3, #1
 8004e5e:	2300      	moveq	r3, #0
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d18d      	bne.n	8004d82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004e66:	2300      	movs	r3, #0
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3710      	adds	r7, #16
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b084      	sub	sp, #16
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	60f8      	str	r0, [r7, #12]
 8004e78:	60b9      	str	r1, [r7, #8]
 8004e7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e7c:	e02d      	b.n	8004eda <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e7e:	68f8      	ldr	r0, [r7, #12]
 8004e80:	f000 f8ce 	bl	8005020 <I2C_IsAcknowledgeFailed>
 8004e84:	4603      	mov	r3, r0
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d001      	beq.n	8004e8e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e02d      	b.n	8004eea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e94:	d021      	beq.n	8004eda <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e96:	f7fe fc91 	bl	80037bc <HAL_GetTick>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	1ad3      	subs	r3, r2, r3
 8004ea0:	68ba      	ldr	r2, [r7, #8]
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d302      	bcc.n	8004eac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d116      	bne.n	8004eda <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2220      	movs	r2, #32
 8004eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec6:	f043 0220 	orr.w	r2, r3, #32
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e007      	b.n	8004eea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	695b      	ldr	r3, [r3, #20]
 8004ee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ee4:	2b80      	cmp	r3, #128	; 0x80
 8004ee6:	d1ca      	bne.n	8004e7e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ee8:	2300      	movs	r3, #0
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3710      	adds	r7, #16
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}

08004ef2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ef2:	b580      	push	{r7, lr}
 8004ef4:	b084      	sub	sp, #16
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	60f8      	str	r0, [r7, #12]
 8004efa:	60b9      	str	r1, [r7, #8]
 8004efc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004efe:	e02d      	b.n	8004f5c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f00:	68f8      	ldr	r0, [r7, #12]
 8004f02:	f000 f88d 	bl	8005020 <I2C_IsAcknowledgeFailed>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d001      	beq.n	8004f10 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e02d      	b.n	8004f6c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f16:	d021      	beq.n	8004f5c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f18:	f7fe fc50 	bl	80037bc <HAL_GetTick>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	68ba      	ldr	r2, [r7, #8]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d302      	bcc.n	8004f2e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d116      	bne.n	8004f5c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2200      	movs	r2, #0
 8004f32:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2220      	movs	r2, #32
 8004f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f48:	f043 0220 	orr.w	r2, r3, #32
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2200      	movs	r2, #0
 8004f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e007      	b.n	8004f6c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	695b      	ldr	r3, [r3, #20]
 8004f62:	f003 0304 	and.w	r3, r3, #4
 8004f66:	2b04      	cmp	r3, #4
 8004f68:	d1ca      	bne.n	8004f00 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f6a:	2300      	movs	r3, #0
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3710      	adds	r7, #16
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}

08004f74 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b084      	sub	sp, #16
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	60f8      	str	r0, [r7, #12]
 8004f7c:	60b9      	str	r1, [r7, #8]
 8004f7e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f80:	e042      	b.n	8005008 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	695b      	ldr	r3, [r3, #20]
 8004f88:	f003 0310 	and.w	r3, r3, #16
 8004f8c:	2b10      	cmp	r3, #16
 8004f8e:	d119      	bne.n	8004fc4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f06f 0210 	mvn.w	r2, #16
 8004f98:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2220      	movs	r2, #32
 8004fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e029      	b.n	8005018 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fc4:	f7fe fbfa 	bl	80037bc <HAL_GetTick>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	68ba      	ldr	r2, [r7, #8]
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d302      	bcc.n	8004fda <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d116      	bne.n	8005008 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2220      	movs	r2, #32
 8004fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff4:	f043 0220 	orr.w	r2, r3, #32
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2200      	movs	r2, #0
 8005000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e007      	b.n	8005018 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	695b      	ldr	r3, [r3, #20]
 800500e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005012:	2b40      	cmp	r3, #64	; 0x40
 8005014:	d1b5      	bne.n	8004f82 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005016:	2300      	movs	r3, #0
}
 8005018:	4618      	mov	r0, r3
 800501a:	3710      	adds	r7, #16
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}

08005020 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005020:	b480      	push	{r7}
 8005022:	b083      	sub	sp, #12
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	695b      	ldr	r3, [r3, #20]
 800502e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005032:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005036:	d11b      	bne.n	8005070 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005040:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2220      	movs	r2, #32
 800504c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800505c:	f043 0204 	orr.w	r2, r3, #4
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	e000      	b.n	8005072 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005070:	2300      	movs	r3, #0
}
 8005072:	4618      	mov	r0, r3
 8005074:	370c      	adds	r7, #12
 8005076:	46bd      	mov	sp, r7
 8005078:	bc80      	pop	{r7}
 800507a:	4770      	bx	lr

0800507c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b086      	sub	sp, #24
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d101      	bne.n	800508e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	e26c      	b.n	8005568 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 0301 	and.w	r3, r3, #1
 8005096:	2b00      	cmp	r3, #0
 8005098:	f000 8087 	beq.w	80051aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800509c:	4b92      	ldr	r3, [pc, #584]	; (80052e8 <HAL_RCC_OscConfig+0x26c>)
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	f003 030c 	and.w	r3, r3, #12
 80050a4:	2b04      	cmp	r3, #4
 80050a6:	d00c      	beq.n	80050c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80050a8:	4b8f      	ldr	r3, [pc, #572]	; (80052e8 <HAL_RCC_OscConfig+0x26c>)
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	f003 030c 	and.w	r3, r3, #12
 80050b0:	2b08      	cmp	r3, #8
 80050b2:	d112      	bne.n	80050da <HAL_RCC_OscConfig+0x5e>
 80050b4:	4b8c      	ldr	r3, [pc, #560]	; (80052e8 <HAL_RCC_OscConfig+0x26c>)
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050c0:	d10b      	bne.n	80050da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050c2:	4b89      	ldr	r3, [pc, #548]	; (80052e8 <HAL_RCC_OscConfig+0x26c>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d06c      	beq.n	80051a8 <HAL_RCC_OscConfig+0x12c>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d168      	bne.n	80051a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e246      	b.n	8005568 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050e2:	d106      	bne.n	80050f2 <HAL_RCC_OscConfig+0x76>
 80050e4:	4b80      	ldr	r3, [pc, #512]	; (80052e8 <HAL_RCC_OscConfig+0x26c>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a7f      	ldr	r2, [pc, #508]	; (80052e8 <HAL_RCC_OscConfig+0x26c>)
 80050ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050ee:	6013      	str	r3, [r2, #0]
 80050f0:	e02e      	b.n	8005150 <HAL_RCC_OscConfig+0xd4>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d10c      	bne.n	8005114 <HAL_RCC_OscConfig+0x98>
 80050fa:	4b7b      	ldr	r3, [pc, #492]	; (80052e8 <HAL_RCC_OscConfig+0x26c>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a7a      	ldr	r2, [pc, #488]	; (80052e8 <HAL_RCC_OscConfig+0x26c>)
 8005100:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005104:	6013      	str	r3, [r2, #0]
 8005106:	4b78      	ldr	r3, [pc, #480]	; (80052e8 <HAL_RCC_OscConfig+0x26c>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a77      	ldr	r2, [pc, #476]	; (80052e8 <HAL_RCC_OscConfig+0x26c>)
 800510c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005110:	6013      	str	r3, [r2, #0]
 8005112:	e01d      	b.n	8005150 <HAL_RCC_OscConfig+0xd4>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800511c:	d10c      	bne.n	8005138 <HAL_RCC_OscConfig+0xbc>
 800511e:	4b72      	ldr	r3, [pc, #456]	; (80052e8 <HAL_RCC_OscConfig+0x26c>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a71      	ldr	r2, [pc, #452]	; (80052e8 <HAL_RCC_OscConfig+0x26c>)
 8005124:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005128:	6013      	str	r3, [r2, #0]
 800512a:	4b6f      	ldr	r3, [pc, #444]	; (80052e8 <HAL_RCC_OscConfig+0x26c>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a6e      	ldr	r2, [pc, #440]	; (80052e8 <HAL_RCC_OscConfig+0x26c>)
 8005130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005134:	6013      	str	r3, [r2, #0]
 8005136:	e00b      	b.n	8005150 <HAL_RCC_OscConfig+0xd4>
 8005138:	4b6b      	ldr	r3, [pc, #428]	; (80052e8 <HAL_RCC_OscConfig+0x26c>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a6a      	ldr	r2, [pc, #424]	; (80052e8 <HAL_RCC_OscConfig+0x26c>)
 800513e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005142:	6013      	str	r3, [r2, #0]
 8005144:	4b68      	ldr	r3, [pc, #416]	; (80052e8 <HAL_RCC_OscConfig+0x26c>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a67      	ldr	r2, [pc, #412]	; (80052e8 <HAL_RCC_OscConfig+0x26c>)
 800514a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800514e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d013      	beq.n	8005180 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005158:	f7fe fb30 	bl	80037bc <HAL_GetTick>
 800515c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800515e:	e008      	b.n	8005172 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005160:	f7fe fb2c 	bl	80037bc <HAL_GetTick>
 8005164:	4602      	mov	r2, r0
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	1ad3      	subs	r3, r2, r3
 800516a:	2b64      	cmp	r3, #100	; 0x64
 800516c:	d901      	bls.n	8005172 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	e1fa      	b.n	8005568 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005172:	4b5d      	ldr	r3, [pc, #372]	; (80052e8 <HAL_RCC_OscConfig+0x26c>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800517a:	2b00      	cmp	r3, #0
 800517c:	d0f0      	beq.n	8005160 <HAL_RCC_OscConfig+0xe4>
 800517e:	e014      	b.n	80051aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005180:	f7fe fb1c 	bl	80037bc <HAL_GetTick>
 8005184:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005186:	e008      	b.n	800519a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005188:	f7fe fb18 	bl	80037bc <HAL_GetTick>
 800518c:	4602      	mov	r2, r0
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	2b64      	cmp	r3, #100	; 0x64
 8005194:	d901      	bls.n	800519a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	e1e6      	b.n	8005568 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800519a:	4b53      	ldr	r3, [pc, #332]	; (80052e8 <HAL_RCC_OscConfig+0x26c>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d1f0      	bne.n	8005188 <HAL_RCC_OscConfig+0x10c>
 80051a6:	e000      	b.n	80051aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f003 0302 	and.w	r3, r3, #2
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d063      	beq.n	800527e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80051b6:	4b4c      	ldr	r3, [pc, #304]	; (80052e8 <HAL_RCC_OscConfig+0x26c>)
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	f003 030c 	and.w	r3, r3, #12
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d00b      	beq.n	80051da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80051c2:	4b49      	ldr	r3, [pc, #292]	; (80052e8 <HAL_RCC_OscConfig+0x26c>)
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	f003 030c 	and.w	r3, r3, #12
 80051ca:	2b08      	cmp	r3, #8
 80051cc:	d11c      	bne.n	8005208 <HAL_RCC_OscConfig+0x18c>
 80051ce:	4b46      	ldr	r3, [pc, #280]	; (80052e8 <HAL_RCC_OscConfig+0x26c>)
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d116      	bne.n	8005208 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051da:	4b43      	ldr	r3, [pc, #268]	; (80052e8 <HAL_RCC_OscConfig+0x26c>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 0302 	and.w	r3, r3, #2
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d005      	beq.n	80051f2 <HAL_RCC_OscConfig+0x176>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d001      	beq.n	80051f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e1ba      	b.n	8005568 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051f2:	4b3d      	ldr	r3, [pc, #244]	; (80052e8 <HAL_RCC_OscConfig+0x26c>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	695b      	ldr	r3, [r3, #20]
 80051fe:	00db      	lsls	r3, r3, #3
 8005200:	4939      	ldr	r1, [pc, #228]	; (80052e8 <HAL_RCC_OscConfig+0x26c>)
 8005202:	4313      	orrs	r3, r2
 8005204:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005206:	e03a      	b.n	800527e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	691b      	ldr	r3, [r3, #16]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d020      	beq.n	8005252 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005210:	4b36      	ldr	r3, [pc, #216]	; (80052ec <HAL_RCC_OscConfig+0x270>)
 8005212:	2201      	movs	r2, #1
 8005214:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005216:	f7fe fad1 	bl	80037bc <HAL_GetTick>
 800521a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800521c:	e008      	b.n	8005230 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800521e:	f7fe facd 	bl	80037bc <HAL_GetTick>
 8005222:	4602      	mov	r2, r0
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	1ad3      	subs	r3, r2, r3
 8005228:	2b02      	cmp	r3, #2
 800522a:	d901      	bls.n	8005230 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800522c:	2303      	movs	r3, #3
 800522e:	e19b      	b.n	8005568 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005230:	4b2d      	ldr	r3, [pc, #180]	; (80052e8 <HAL_RCC_OscConfig+0x26c>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f003 0302 	and.w	r3, r3, #2
 8005238:	2b00      	cmp	r3, #0
 800523a:	d0f0      	beq.n	800521e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800523c:	4b2a      	ldr	r3, [pc, #168]	; (80052e8 <HAL_RCC_OscConfig+0x26c>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	695b      	ldr	r3, [r3, #20]
 8005248:	00db      	lsls	r3, r3, #3
 800524a:	4927      	ldr	r1, [pc, #156]	; (80052e8 <HAL_RCC_OscConfig+0x26c>)
 800524c:	4313      	orrs	r3, r2
 800524e:	600b      	str	r3, [r1, #0]
 8005250:	e015      	b.n	800527e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005252:	4b26      	ldr	r3, [pc, #152]	; (80052ec <HAL_RCC_OscConfig+0x270>)
 8005254:	2200      	movs	r2, #0
 8005256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005258:	f7fe fab0 	bl	80037bc <HAL_GetTick>
 800525c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800525e:	e008      	b.n	8005272 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005260:	f7fe faac 	bl	80037bc <HAL_GetTick>
 8005264:	4602      	mov	r2, r0
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	2b02      	cmp	r3, #2
 800526c:	d901      	bls.n	8005272 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800526e:	2303      	movs	r3, #3
 8005270:	e17a      	b.n	8005568 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005272:	4b1d      	ldr	r3, [pc, #116]	; (80052e8 <HAL_RCC_OscConfig+0x26c>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 0302 	and.w	r3, r3, #2
 800527a:	2b00      	cmp	r3, #0
 800527c:	d1f0      	bne.n	8005260 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 0308 	and.w	r3, r3, #8
 8005286:	2b00      	cmp	r3, #0
 8005288:	d03a      	beq.n	8005300 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	699b      	ldr	r3, [r3, #24]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d019      	beq.n	80052c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005292:	4b17      	ldr	r3, [pc, #92]	; (80052f0 <HAL_RCC_OscConfig+0x274>)
 8005294:	2201      	movs	r2, #1
 8005296:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005298:	f7fe fa90 	bl	80037bc <HAL_GetTick>
 800529c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800529e:	e008      	b.n	80052b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052a0:	f7fe fa8c 	bl	80037bc <HAL_GetTick>
 80052a4:	4602      	mov	r2, r0
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	1ad3      	subs	r3, r2, r3
 80052aa:	2b02      	cmp	r3, #2
 80052ac:	d901      	bls.n	80052b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80052ae:	2303      	movs	r3, #3
 80052b0:	e15a      	b.n	8005568 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052b2:	4b0d      	ldr	r3, [pc, #52]	; (80052e8 <HAL_RCC_OscConfig+0x26c>)
 80052b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b6:	f003 0302 	and.w	r3, r3, #2
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d0f0      	beq.n	80052a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80052be:	2001      	movs	r0, #1
 80052c0:	f000 fada 	bl	8005878 <RCC_Delay>
 80052c4:	e01c      	b.n	8005300 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052c6:	4b0a      	ldr	r3, [pc, #40]	; (80052f0 <HAL_RCC_OscConfig+0x274>)
 80052c8:	2200      	movs	r2, #0
 80052ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052cc:	f7fe fa76 	bl	80037bc <HAL_GetTick>
 80052d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052d2:	e00f      	b.n	80052f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052d4:	f7fe fa72 	bl	80037bc <HAL_GetTick>
 80052d8:	4602      	mov	r2, r0
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	2b02      	cmp	r3, #2
 80052e0:	d908      	bls.n	80052f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80052e2:	2303      	movs	r3, #3
 80052e4:	e140      	b.n	8005568 <HAL_RCC_OscConfig+0x4ec>
 80052e6:	bf00      	nop
 80052e8:	40021000 	.word	0x40021000
 80052ec:	42420000 	.word	0x42420000
 80052f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052f4:	4b9e      	ldr	r3, [pc, #632]	; (8005570 <HAL_RCC_OscConfig+0x4f4>)
 80052f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f8:	f003 0302 	and.w	r3, r3, #2
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d1e9      	bne.n	80052d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 0304 	and.w	r3, r3, #4
 8005308:	2b00      	cmp	r3, #0
 800530a:	f000 80a6 	beq.w	800545a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800530e:	2300      	movs	r3, #0
 8005310:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005312:	4b97      	ldr	r3, [pc, #604]	; (8005570 <HAL_RCC_OscConfig+0x4f4>)
 8005314:	69db      	ldr	r3, [r3, #28]
 8005316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800531a:	2b00      	cmp	r3, #0
 800531c:	d10d      	bne.n	800533a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800531e:	4b94      	ldr	r3, [pc, #592]	; (8005570 <HAL_RCC_OscConfig+0x4f4>)
 8005320:	69db      	ldr	r3, [r3, #28]
 8005322:	4a93      	ldr	r2, [pc, #588]	; (8005570 <HAL_RCC_OscConfig+0x4f4>)
 8005324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005328:	61d3      	str	r3, [r2, #28]
 800532a:	4b91      	ldr	r3, [pc, #580]	; (8005570 <HAL_RCC_OscConfig+0x4f4>)
 800532c:	69db      	ldr	r3, [r3, #28]
 800532e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005332:	60bb      	str	r3, [r7, #8]
 8005334:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005336:	2301      	movs	r3, #1
 8005338:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800533a:	4b8e      	ldr	r3, [pc, #568]	; (8005574 <HAL_RCC_OscConfig+0x4f8>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005342:	2b00      	cmp	r3, #0
 8005344:	d118      	bne.n	8005378 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005346:	4b8b      	ldr	r3, [pc, #556]	; (8005574 <HAL_RCC_OscConfig+0x4f8>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a8a      	ldr	r2, [pc, #552]	; (8005574 <HAL_RCC_OscConfig+0x4f8>)
 800534c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005350:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005352:	f7fe fa33 	bl	80037bc <HAL_GetTick>
 8005356:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005358:	e008      	b.n	800536c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800535a:	f7fe fa2f 	bl	80037bc <HAL_GetTick>
 800535e:	4602      	mov	r2, r0
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	1ad3      	subs	r3, r2, r3
 8005364:	2b64      	cmp	r3, #100	; 0x64
 8005366:	d901      	bls.n	800536c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005368:	2303      	movs	r3, #3
 800536a:	e0fd      	b.n	8005568 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800536c:	4b81      	ldr	r3, [pc, #516]	; (8005574 <HAL_RCC_OscConfig+0x4f8>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005374:	2b00      	cmp	r3, #0
 8005376:	d0f0      	beq.n	800535a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	2b01      	cmp	r3, #1
 800537e:	d106      	bne.n	800538e <HAL_RCC_OscConfig+0x312>
 8005380:	4b7b      	ldr	r3, [pc, #492]	; (8005570 <HAL_RCC_OscConfig+0x4f4>)
 8005382:	6a1b      	ldr	r3, [r3, #32]
 8005384:	4a7a      	ldr	r2, [pc, #488]	; (8005570 <HAL_RCC_OscConfig+0x4f4>)
 8005386:	f043 0301 	orr.w	r3, r3, #1
 800538a:	6213      	str	r3, [r2, #32]
 800538c:	e02d      	b.n	80053ea <HAL_RCC_OscConfig+0x36e>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d10c      	bne.n	80053b0 <HAL_RCC_OscConfig+0x334>
 8005396:	4b76      	ldr	r3, [pc, #472]	; (8005570 <HAL_RCC_OscConfig+0x4f4>)
 8005398:	6a1b      	ldr	r3, [r3, #32]
 800539a:	4a75      	ldr	r2, [pc, #468]	; (8005570 <HAL_RCC_OscConfig+0x4f4>)
 800539c:	f023 0301 	bic.w	r3, r3, #1
 80053a0:	6213      	str	r3, [r2, #32]
 80053a2:	4b73      	ldr	r3, [pc, #460]	; (8005570 <HAL_RCC_OscConfig+0x4f4>)
 80053a4:	6a1b      	ldr	r3, [r3, #32]
 80053a6:	4a72      	ldr	r2, [pc, #456]	; (8005570 <HAL_RCC_OscConfig+0x4f4>)
 80053a8:	f023 0304 	bic.w	r3, r3, #4
 80053ac:	6213      	str	r3, [r2, #32]
 80053ae:	e01c      	b.n	80053ea <HAL_RCC_OscConfig+0x36e>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	2b05      	cmp	r3, #5
 80053b6:	d10c      	bne.n	80053d2 <HAL_RCC_OscConfig+0x356>
 80053b8:	4b6d      	ldr	r3, [pc, #436]	; (8005570 <HAL_RCC_OscConfig+0x4f4>)
 80053ba:	6a1b      	ldr	r3, [r3, #32]
 80053bc:	4a6c      	ldr	r2, [pc, #432]	; (8005570 <HAL_RCC_OscConfig+0x4f4>)
 80053be:	f043 0304 	orr.w	r3, r3, #4
 80053c2:	6213      	str	r3, [r2, #32]
 80053c4:	4b6a      	ldr	r3, [pc, #424]	; (8005570 <HAL_RCC_OscConfig+0x4f4>)
 80053c6:	6a1b      	ldr	r3, [r3, #32]
 80053c8:	4a69      	ldr	r2, [pc, #420]	; (8005570 <HAL_RCC_OscConfig+0x4f4>)
 80053ca:	f043 0301 	orr.w	r3, r3, #1
 80053ce:	6213      	str	r3, [r2, #32]
 80053d0:	e00b      	b.n	80053ea <HAL_RCC_OscConfig+0x36e>
 80053d2:	4b67      	ldr	r3, [pc, #412]	; (8005570 <HAL_RCC_OscConfig+0x4f4>)
 80053d4:	6a1b      	ldr	r3, [r3, #32]
 80053d6:	4a66      	ldr	r2, [pc, #408]	; (8005570 <HAL_RCC_OscConfig+0x4f4>)
 80053d8:	f023 0301 	bic.w	r3, r3, #1
 80053dc:	6213      	str	r3, [r2, #32]
 80053de:	4b64      	ldr	r3, [pc, #400]	; (8005570 <HAL_RCC_OscConfig+0x4f4>)
 80053e0:	6a1b      	ldr	r3, [r3, #32]
 80053e2:	4a63      	ldr	r2, [pc, #396]	; (8005570 <HAL_RCC_OscConfig+0x4f4>)
 80053e4:	f023 0304 	bic.w	r3, r3, #4
 80053e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	68db      	ldr	r3, [r3, #12]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d015      	beq.n	800541e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053f2:	f7fe f9e3 	bl	80037bc <HAL_GetTick>
 80053f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053f8:	e00a      	b.n	8005410 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053fa:	f7fe f9df 	bl	80037bc <HAL_GetTick>
 80053fe:	4602      	mov	r2, r0
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	1ad3      	subs	r3, r2, r3
 8005404:	f241 3288 	movw	r2, #5000	; 0x1388
 8005408:	4293      	cmp	r3, r2
 800540a:	d901      	bls.n	8005410 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800540c:	2303      	movs	r3, #3
 800540e:	e0ab      	b.n	8005568 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005410:	4b57      	ldr	r3, [pc, #348]	; (8005570 <HAL_RCC_OscConfig+0x4f4>)
 8005412:	6a1b      	ldr	r3, [r3, #32]
 8005414:	f003 0302 	and.w	r3, r3, #2
 8005418:	2b00      	cmp	r3, #0
 800541a:	d0ee      	beq.n	80053fa <HAL_RCC_OscConfig+0x37e>
 800541c:	e014      	b.n	8005448 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800541e:	f7fe f9cd 	bl	80037bc <HAL_GetTick>
 8005422:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005424:	e00a      	b.n	800543c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005426:	f7fe f9c9 	bl	80037bc <HAL_GetTick>
 800542a:	4602      	mov	r2, r0
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	1ad3      	subs	r3, r2, r3
 8005430:	f241 3288 	movw	r2, #5000	; 0x1388
 8005434:	4293      	cmp	r3, r2
 8005436:	d901      	bls.n	800543c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005438:	2303      	movs	r3, #3
 800543a:	e095      	b.n	8005568 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800543c:	4b4c      	ldr	r3, [pc, #304]	; (8005570 <HAL_RCC_OscConfig+0x4f4>)
 800543e:	6a1b      	ldr	r3, [r3, #32]
 8005440:	f003 0302 	and.w	r3, r3, #2
 8005444:	2b00      	cmp	r3, #0
 8005446:	d1ee      	bne.n	8005426 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005448:	7dfb      	ldrb	r3, [r7, #23]
 800544a:	2b01      	cmp	r3, #1
 800544c:	d105      	bne.n	800545a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800544e:	4b48      	ldr	r3, [pc, #288]	; (8005570 <HAL_RCC_OscConfig+0x4f4>)
 8005450:	69db      	ldr	r3, [r3, #28]
 8005452:	4a47      	ldr	r2, [pc, #284]	; (8005570 <HAL_RCC_OscConfig+0x4f4>)
 8005454:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005458:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	69db      	ldr	r3, [r3, #28]
 800545e:	2b00      	cmp	r3, #0
 8005460:	f000 8081 	beq.w	8005566 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005464:	4b42      	ldr	r3, [pc, #264]	; (8005570 <HAL_RCC_OscConfig+0x4f4>)
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	f003 030c 	and.w	r3, r3, #12
 800546c:	2b08      	cmp	r3, #8
 800546e:	d061      	beq.n	8005534 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	69db      	ldr	r3, [r3, #28]
 8005474:	2b02      	cmp	r3, #2
 8005476:	d146      	bne.n	8005506 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005478:	4b3f      	ldr	r3, [pc, #252]	; (8005578 <HAL_RCC_OscConfig+0x4fc>)
 800547a:	2200      	movs	r2, #0
 800547c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800547e:	f7fe f99d 	bl	80037bc <HAL_GetTick>
 8005482:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005484:	e008      	b.n	8005498 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005486:	f7fe f999 	bl	80037bc <HAL_GetTick>
 800548a:	4602      	mov	r2, r0
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	1ad3      	subs	r3, r2, r3
 8005490:	2b02      	cmp	r3, #2
 8005492:	d901      	bls.n	8005498 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005494:	2303      	movs	r3, #3
 8005496:	e067      	b.n	8005568 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005498:	4b35      	ldr	r3, [pc, #212]	; (8005570 <HAL_RCC_OscConfig+0x4f4>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d1f0      	bne.n	8005486 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6a1b      	ldr	r3, [r3, #32]
 80054a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054ac:	d108      	bne.n	80054c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80054ae:	4b30      	ldr	r3, [pc, #192]	; (8005570 <HAL_RCC_OscConfig+0x4f4>)
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	492d      	ldr	r1, [pc, #180]	; (8005570 <HAL_RCC_OscConfig+0x4f4>)
 80054bc:	4313      	orrs	r3, r2
 80054be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80054c0:	4b2b      	ldr	r3, [pc, #172]	; (8005570 <HAL_RCC_OscConfig+0x4f4>)
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6a19      	ldr	r1, [r3, #32]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d0:	430b      	orrs	r3, r1
 80054d2:	4927      	ldr	r1, [pc, #156]	; (8005570 <HAL_RCC_OscConfig+0x4f4>)
 80054d4:	4313      	orrs	r3, r2
 80054d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054d8:	4b27      	ldr	r3, [pc, #156]	; (8005578 <HAL_RCC_OscConfig+0x4fc>)
 80054da:	2201      	movs	r2, #1
 80054dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054de:	f7fe f96d 	bl	80037bc <HAL_GetTick>
 80054e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80054e4:	e008      	b.n	80054f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054e6:	f7fe f969 	bl	80037bc <HAL_GetTick>
 80054ea:	4602      	mov	r2, r0
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	1ad3      	subs	r3, r2, r3
 80054f0:	2b02      	cmp	r3, #2
 80054f2:	d901      	bls.n	80054f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80054f4:	2303      	movs	r3, #3
 80054f6:	e037      	b.n	8005568 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80054f8:	4b1d      	ldr	r3, [pc, #116]	; (8005570 <HAL_RCC_OscConfig+0x4f4>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005500:	2b00      	cmp	r3, #0
 8005502:	d0f0      	beq.n	80054e6 <HAL_RCC_OscConfig+0x46a>
 8005504:	e02f      	b.n	8005566 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005506:	4b1c      	ldr	r3, [pc, #112]	; (8005578 <HAL_RCC_OscConfig+0x4fc>)
 8005508:	2200      	movs	r2, #0
 800550a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800550c:	f7fe f956 	bl	80037bc <HAL_GetTick>
 8005510:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005512:	e008      	b.n	8005526 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005514:	f7fe f952 	bl	80037bc <HAL_GetTick>
 8005518:	4602      	mov	r2, r0
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	2b02      	cmp	r3, #2
 8005520:	d901      	bls.n	8005526 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005522:	2303      	movs	r3, #3
 8005524:	e020      	b.n	8005568 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005526:	4b12      	ldr	r3, [pc, #72]	; (8005570 <HAL_RCC_OscConfig+0x4f4>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800552e:	2b00      	cmp	r3, #0
 8005530:	d1f0      	bne.n	8005514 <HAL_RCC_OscConfig+0x498>
 8005532:	e018      	b.n	8005566 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	69db      	ldr	r3, [r3, #28]
 8005538:	2b01      	cmp	r3, #1
 800553a:	d101      	bne.n	8005540 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	e013      	b.n	8005568 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005540:	4b0b      	ldr	r3, [pc, #44]	; (8005570 <HAL_RCC_OscConfig+0x4f4>)
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6a1b      	ldr	r3, [r3, #32]
 8005550:	429a      	cmp	r2, r3
 8005552:	d106      	bne.n	8005562 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800555e:	429a      	cmp	r2, r3
 8005560:	d001      	beq.n	8005566 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e000      	b.n	8005568 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8005566:	2300      	movs	r3, #0
}
 8005568:	4618      	mov	r0, r3
 800556a:	3718      	adds	r7, #24
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}
 8005570:	40021000 	.word	0x40021000
 8005574:	40007000 	.word	0x40007000
 8005578:	42420060 	.word	0x42420060

0800557c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b084      	sub	sp, #16
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d101      	bne.n	8005590 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	e0d0      	b.n	8005732 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005590:	4b6a      	ldr	r3, [pc, #424]	; (800573c <HAL_RCC_ClockConfig+0x1c0>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 0307 	and.w	r3, r3, #7
 8005598:	683a      	ldr	r2, [r7, #0]
 800559a:	429a      	cmp	r2, r3
 800559c:	d910      	bls.n	80055c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800559e:	4b67      	ldr	r3, [pc, #412]	; (800573c <HAL_RCC_ClockConfig+0x1c0>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f023 0207 	bic.w	r2, r3, #7
 80055a6:	4965      	ldr	r1, [pc, #404]	; (800573c <HAL_RCC_ClockConfig+0x1c0>)
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055ae:	4b63      	ldr	r3, [pc, #396]	; (800573c <HAL_RCC_ClockConfig+0x1c0>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 0307 	and.w	r3, r3, #7
 80055b6:	683a      	ldr	r2, [r7, #0]
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d001      	beq.n	80055c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	e0b8      	b.n	8005732 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f003 0302 	and.w	r3, r3, #2
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d020      	beq.n	800560e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 0304 	and.w	r3, r3, #4
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d005      	beq.n	80055e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80055d8:	4b59      	ldr	r3, [pc, #356]	; (8005740 <HAL_RCC_ClockConfig+0x1c4>)
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	4a58      	ldr	r2, [pc, #352]	; (8005740 <HAL_RCC_ClockConfig+0x1c4>)
 80055de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80055e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 0308 	and.w	r3, r3, #8
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d005      	beq.n	80055fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80055f0:	4b53      	ldr	r3, [pc, #332]	; (8005740 <HAL_RCC_ClockConfig+0x1c4>)
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	4a52      	ldr	r2, [pc, #328]	; (8005740 <HAL_RCC_ClockConfig+0x1c4>)
 80055f6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80055fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055fc:	4b50      	ldr	r3, [pc, #320]	; (8005740 <HAL_RCC_ClockConfig+0x1c4>)
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	494d      	ldr	r1, [pc, #308]	; (8005740 <HAL_RCC_ClockConfig+0x1c4>)
 800560a:	4313      	orrs	r3, r2
 800560c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 0301 	and.w	r3, r3, #1
 8005616:	2b00      	cmp	r3, #0
 8005618:	d040      	beq.n	800569c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	2b01      	cmp	r3, #1
 8005620:	d107      	bne.n	8005632 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005622:	4b47      	ldr	r3, [pc, #284]	; (8005740 <HAL_RCC_ClockConfig+0x1c4>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800562a:	2b00      	cmp	r3, #0
 800562c:	d115      	bne.n	800565a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	e07f      	b.n	8005732 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	2b02      	cmp	r3, #2
 8005638:	d107      	bne.n	800564a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800563a:	4b41      	ldr	r3, [pc, #260]	; (8005740 <HAL_RCC_ClockConfig+0x1c4>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005642:	2b00      	cmp	r3, #0
 8005644:	d109      	bne.n	800565a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e073      	b.n	8005732 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800564a:	4b3d      	ldr	r3, [pc, #244]	; (8005740 <HAL_RCC_ClockConfig+0x1c4>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 0302 	and.w	r3, r3, #2
 8005652:	2b00      	cmp	r3, #0
 8005654:	d101      	bne.n	800565a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e06b      	b.n	8005732 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800565a:	4b39      	ldr	r3, [pc, #228]	; (8005740 <HAL_RCC_ClockConfig+0x1c4>)
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	f023 0203 	bic.w	r2, r3, #3
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	4936      	ldr	r1, [pc, #216]	; (8005740 <HAL_RCC_ClockConfig+0x1c4>)
 8005668:	4313      	orrs	r3, r2
 800566a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800566c:	f7fe f8a6 	bl	80037bc <HAL_GetTick>
 8005670:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005672:	e00a      	b.n	800568a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005674:	f7fe f8a2 	bl	80037bc <HAL_GetTick>
 8005678:	4602      	mov	r2, r0
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	1ad3      	subs	r3, r2, r3
 800567e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005682:	4293      	cmp	r3, r2
 8005684:	d901      	bls.n	800568a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005686:	2303      	movs	r3, #3
 8005688:	e053      	b.n	8005732 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800568a:	4b2d      	ldr	r3, [pc, #180]	; (8005740 <HAL_RCC_ClockConfig+0x1c4>)
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	f003 020c 	and.w	r2, r3, #12
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	429a      	cmp	r2, r3
 800569a:	d1eb      	bne.n	8005674 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800569c:	4b27      	ldr	r3, [pc, #156]	; (800573c <HAL_RCC_ClockConfig+0x1c0>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 0307 	and.w	r3, r3, #7
 80056a4:	683a      	ldr	r2, [r7, #0]
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d210      	bcs.n	80056cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056aa:	4b24      	ldr	r3, [pc, #144]	; (800573c <HAL_RCC_ClockConfig+0x1c0>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f023 0207 	bic.w	r2, r3, #7
 80056b2:	4922      	ldr	r1, [pc, #136]	; (800573c <HAL_RCC_ClockConfig+0x1c0>)
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056ba:	4b20      	ldr	r3, [pc, #128]	; (800573c <HAL_RCC_ClockConfig+0x1c0>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 0307 	and.w	r3, r3, #7
 80056c2:	683a      	ldr	r2, [r7, #0]
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d001      	beq.n	80056cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	e032      	b.n	8005732 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f003 0304 	and.w	r3, r3, #4
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d008      	beq.n	80056ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056d8:	4b19      	ldr	r3, [pc, #100]	; (8005740 <HAL_RCC_ClockConfig+0x1c4>)
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	4916      	ldr	r1, [pc, #88]	; (8005740 <HAL_RCC_ClockConfig+0x1c4>)
 80056e6:	4313      	orrs	r3, r2
 80056e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 0308 	and.w	r3, r3, #8
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d009      	beq.n	800570a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80056f6:	4b12      	ldr	r3, [pc, #72]	; (8005740 <HAL_RCC_ClockConfig+0x1c4>)
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	00db      	lsls	r3, r3, #3
 8005704:	490e      	ldr	r1, [pc, #56]	; (8005740 <HAL_RCC_ClockConfig+0x1c4>)
 8005706:	4313      	orrs	r3, r2
 8005708:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800570a:	f000 f821 	bl	8005750 <HAL_RCC_GetSysClockFreq>
 800570e:	4601      	mov	r1, r0
 8005710:	4b0b      	ldr	r3, [pc, #44]	; (8005740 <HAL_RCC_ClockConfig+0x1c4>)
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	091b      	lsrs	r3, r3, #4
 8005716:	f003 030f 	and.w	r3, r3, #15
 800571a:	4a0a      	ldr	r2, [pc, #40]	; (8005744 <HAL_RCC_ClockConfig+0x1c8>)
 800571c:	5cd3      	ldrb	r3, [r2, r3]
 800571e:	fa21 f303 	lsr.w	r3, r1, r3
 8005722:	4a09      	ldr	r2, [pc, #36]	; (8005748 <HAL_RCC_ClockConfig+0x1cc>)
 8005724:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005726:	4b09      	ldr	r3, [pc, #36]	; (800574c <HAL_RCC_ClockConfig+0x1d0>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4618      	mov	r0, r3
 800572c:	f7fe f804 	bl	8003738 <HAL_InitTick>

  return HAL_OK;
 8005730:	2300      	movs	r3, #0
}
 8005732:	4618      	mov	r0, r3
 8005734:	3710      	adds	r7, #16
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
 800573a:	bf00      	nop
 800573c:	40022000 	.word	0x40022000
 8005740:	40021000 	.word	0x40021000
 8005744:	08005f98 	.word	0x08005f98
 8005748:	2000004c 	.word	0x2000004c
 800574c:	20000054 	.word	0x20000054

08005750 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005750:	b490      	push	{r4, r7}
 8005752:	b08a      	sub	sp, #40	; 0x28
 8005754:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005756:	4b2a      	ldr	r3, [pc, #168]	; (8005800 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005758:	1d3c      	adds	r4, r7, #4
 800575a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800575c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005760:	4b28      	ldr	r3, [pc, #160]	; (8005804 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005762:	881b      	ldrh	r3, [r3, #0]
 8005764:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005766:	2300      	movs	r3, #0
 8005768:	61fb      	str	r3, [r7, #28]
 800576a:	2300      	movs	r3, #0
 800576c:	61bb      	str	r3, [r7, #24]
 800576e:	2300      	movs	r3, #0
 8005770:	627b      	str	r3, [r7, #36]	; 0x24
 8005772:	2300      	movs	r3, #0
 8005774:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005776:	2300      	movs	r3, #0
 8005778:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800577a:	4b23      	ldr	r3, [pc, #140]	; (8005808 <HAL_RCC_GetSysClockFreq+0xb8>)
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	f003 030c 	and.w	r3, r3, #12
 8005786:	2b04      	cmp	r3, #4
 8005788:	d002      	beq.n	8005790 <HAL_RCC_GetSysClockFreq+0x40>
 800578a:	2b08      	cmp	r3, #8
 800578c:	d003      	beq.n	8005796 <HAL_RCC_GetSysClockFreq+0x46>
 800578e:	e02d      	b.n	80057ec <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005790:	4b1e      	ldr	r3, [pc, #120]	; (800580c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005792:	623b      	str	r3, [r7, #32]
      break;
 8005794:	e02d      	b.n	80057f2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	0c9b      	lsrs	r3, r3, #18
 800579a:	f003 030f 	and.w	r3, r3, #15
 800579e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80057a2:	4413      	add	r3, r2
 80057a4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80057a8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80057aa:	69fb      	ldr	r3, [r7, #28]
 80057ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d013      	beq.n	80057dc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80057b4:	4b14      	ldr	r3, [pc, #80]	; (8005808 <HAL_RCC_GetSysClockFreq+0xb8>)
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	0c5b      	lsrs	r3, r3, #17
 80057ba:	f003 0301 	and.w	r3, r3, #1
 80057be:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80057c2:	4413      	add	r3, r2
 80057c4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80057c8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	4a0f      	ldr	r2, [pc, #60]	; (800580c <HAL_RCC_GetSysClockFreq+0xbc>)
 80057ce:	fb02 f203 	mul.w	r2, r2, r3
 80057d2:	69bb      	ldr	r3, [r7, #24]
 80057d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80057d8:	627b      	str	r3, [r7, #36]	; 0x24
 80057da:	e004      	b.n	80057e6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	4a0c      	ldr	r2, [pc, #48]	; (8005810 <HAL_RCC_GetSysClockFreq+0xc0>)
 80057e0:	fb02 f303 	mul.w	r3, r2, r3
 80057e4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80057e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e8:	623b      	str	r3, [r7, #32]
      break;
 80057ea:	e002      	b.n	80057f2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80057ec:	4b07      	ldr	r3, [pc, #28]	; (800580c <HAL_RCC_GetSysClockFreq+0xbc>)
 80057ee:	623b      	str	r3, [r7, #32]
      break;
 80057f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80057f2:	6a3b      	ldr	r3, [r7, #32]
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3728      	adds	r7, #40	; 0x28
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bc90      	pop	{r4, r7}
 80057fc:	4770      	bx	lr
 80057fe:	bf00      	nop
 8005800:	08005e84 	.word	0x08005e84
 8005804:	08005e94 	.word	0x08005e94
 8005808:	40021000 	.word	0x40021000
 800580c:	007a1200 	.word	0x007a1200
 8005810:	003d0900 	.word	0x003d0900

08005814 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005814:	b480      	push	{r7}
 8005816:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005818:	4b02      	ldr	r3, [pc, #8]	; (8005824 <HAL_RCC_GetHCLKFreq+0x10>)
 800581a:	681b      	ldr	r3, [r3, #0]
}
 800581c:	4618      	mov	r0, r3
 800581e:	46bd      	mov	sp, r7
 8005820:	bc80      	pop	{r7}
 8005822:	4770      	bx	lr
 8005824:	2000004c 	.word	0x2000004c

08005828 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800582c:	f7ff fff2 	bl	8005814 <HAL_RCC_GetHCLKFreq>
 8005830:	4601      	mov	r1, r0
 8005832:	4b05      	ldr	r3, [pc, #20]	; (8005848 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	0a1b      	lsrs	r3, r3, #8
 8005838:	f003 0307 	and.w	r3, r3, #7
 800583c:	4a03      	ldr	r2, [pc, #12]	; (800584c <HAL_RCC_GetPCLK1Freq+0x24>)
 800583e:	5cd3      	ldrb	r3, [r2, r3]
 8005840:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005844:	4618      	mov	r0, r3
 8005846:	bd80      	pop	{r7, pc}
 8005848:	40021000 	.word	0x40021000
 800584c:	08005fa8 	.word	0x08005fa8

08005850 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005854:	f7ff ffde 	bl	8005814 <HAL_RCC_GetHCLKFreq>
 8005858:	4601      	mov	r1, r0
 800585a:	4b05      	ldr	r3, [pc, #20]	; (8005870 <HAL_RCC_GetPCLK2Freq+0x20>)
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	0adb      	lsrs	r3, r3, #11
 8005860:	f003 0307 	and.w	r3, r3, #7
 8005864:	4a03      	ldr	r2, [pc, #12]	; (8005874 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005866:	5cd3      	ldrb	r3, [r2, r3]
 8005868:	fa21 f303 	lsr.w	r3, r1, r3
}
 800586c:	4618      	mov	r0, r3
 800586e:	bd80      	pop	{r7, pc}
 8005870:	40021000 	.word	0x40021000
 8005874:	08005fa8 	.word	0x08005fa8

08005878 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005878:	b480      	push	{r7}
 800587a:	b085      	sub	sp, #20
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005880:	4b0a      	ldr	r3, [pc, #40]	; (80058ac <RCC_Delay+0x34>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a0a      	ldr	r2, [pc, #40]	; (80058b0 <RCC_Delay+0x38>)
 8005886:	fba2 2303 	umull	r2, r3, r2, r3
 800588a:	0a5b      	lsrs	r3, r3, #9
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	fb02 f303 	mul.w	r3, r2, r3
 8005892:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005894:	bf00      	nop
  }
  while (Delay --);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	1e5a      	subs	r2, r3, #1
 800589a:	60fa      	str	r2, [r7, #12]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d1f9      	bne.n	8005894 <RCC_Delay+0x1c>
}
 80058a0:	bf00      	nop
 80058a2:	3714      	adds	r7, #20
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bc80      	pop	{r7}
 80058a8:	4770      	bx	lr
 80058aa:	bf00      	nop
 80058ac:	2000004c 	.word	0x2000004c
 80058b0:	10624dd3 	.word	0x10624dd3

080058b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b086      	sub	sp, #24
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80058bc:	2300      	movs	r3, #0
 80058be:	613b      	str	r3, [r7, #16]
 80058c0:	2300      	movs	r3, #0
 80058c2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 0301 	and.w	r3, r3, #1
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d07d      	beq.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80058d0:	2300      	movs	r3, #0
 80058d2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058d4:	4b4f      	ldr	r3, [pc, #316]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058d6:	69db      	ldr	r3, [r3, #28]
 80058d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d10d      	bne.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058e0:	4b4c      	ldr	r3, [pc, #304]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058e2:	69db      	ldr	r3, [r3, #28]
 80058e4:	4a4b      	ldr	r2, [pc, #300]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058ea:	61d3      	str	r3, [r2, #28]
 80058ec:	4b49      	ldr	r3, [pc, #292]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058ee:	69db      	ldr	r3, [r3, #28]
 80058f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058f4:	60bb      	str	r3, [r7, #8]
 80058f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058f8:	2301      	movs	r3, #1
 80058fa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058fc:	4b46      	ldr	r3, [pc, #280]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005904:	2b00      	cmp	r3, #0
 8005906:	d118      	bne.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005908:	4b43      	ldr	r3, [pc, #268]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a42      	ldr	r2, [pc, #264]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800590e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005912:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005914:	f7fd ff52 	bl	80037bc <HAL_GetTick>
 8005918:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800591a:	e008      	b.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800591c:	f7fd ff4e 	bl	80037bc <HAL_GetTick>
 8005920:	4602      	mov	r2, r0
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	1ad3      	subs	r3, r2, r3
 8005926:	2b64      	cmp	r3, #100	; 0x64
 8005928:	d901      	bls.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800592a:	2303      	movs	r3, #3
 800592c:	e06d      	b.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800592e:	4b3a      	ldr	r3, [pc, #232]	; (8005a18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005936:	2b00      	cmp	r3, #0
 8005938:	d0f0      	beq.n	800591c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800593a:	4b36      	ldr	r3, [pc, #216]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800593c:	6a1b      	ldr	r3, [r3, #32]
 800593e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005942:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d02e      	beq.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005952:	68fa      	ldr	r2, [r7, #12]
 8005954:	429a      	cmp	r2, r3
 8005956:	d027      	beq.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005958:	4b2e      	ldr	r3, [pc, #184]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800595a:	6a1b      	ldr	r3, [r3, #32]
 800595c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005960:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005962:	4b2e      	ldr	r3, [pc, #184]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005964:	2201      	movs	r2, #1
 8005966:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005968:	4b2c      	ldr	r3, [pc, #176]	; (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800596a:	2200      	movs	r2, #0
 800596c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800596e:	4a29      	ldr	r2, [pc, #164]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f003 0301 	and.w	r3, r3, #1
 800597a:	2b00      	cmp	r3, #0
 800597c:	d014      	beq.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800597e:	f7fd ff1d 	bl	80037bc <HAL_GetTick>
 8005982:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005984:	e00a      	b.n	800599c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005986:	f7fd ff19 	bl	80037bc <HAL_GetTick>
 800598a:	4602      	mov	r2, r0
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	1ad3      	subs	r3, r2, r3
 8005990:	f241 3288 	movw	r2, #5000	; 0x1388
 8005994:	4293      	cmp	r3, r2
 8005996:	d901      	bls.n	800599c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005998:	2303      	movs	r3, #3
 800599a:	e036      	b.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800599c:	4b1d      	ldr	r3, [pc, #116]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800599e:	6a1b      	ldr	r3, [r3, #32]
 80059a0:	f003 0302 	and.w	r3, r3, #2
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d0ee      	beq.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80059a8:	4b1a      	ldr	r3, [pc, #104]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059aa:	6a1b      	ldr	r3, [r3, #32]
 80059ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	4917      	ldr	r1, [pc, #92]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059b6:	4313      	orrs	r3, r2
 80059b8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80059ba:	7dfb      	ldrb	r3, [r7, #23]
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d105      	bne.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059c0:	4b14      	ldr	r3, [pc, #80]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059c2:	69db      	ldr	r3, [r3, #28]
 80059c4:	4a13      	ldr	r2, [pc, #76]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059ca:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 0302 	and.w	r3, r3, #2
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d008      	beq.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80059d8:	4b0e      	ldr	r3, [pc, #56]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	490b      	ldr	r1, [pc, #44]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059e6:	4313      	orrs	r3, r2
 80059e8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 0310 	and.w	r3, r3, #16
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d008      	beq.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80059f6:	4b07      	ldr	r3, [pc, #28]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	4904      	ldr	r1, [pc, #16]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a04:	4313      	orrs	r3, r2
 8005a06:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005a08:	2300      	movs	r3, #0
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3718      	adds	r7, #24
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
 8005a12:	bf00      	nop
 8005a14:	40021000 	.word	0x40021000
 8005a18:	40007000 	.word	0x40007000
 8005a1c:	42420440 	.word	0x42420440

08005a20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b082      	sub	sp, #8
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d101      	bne.n	8005a32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e03f      	b.n	8005ab2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d106      	bne.n	8005a4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f7fd f87a 	bl	8002b40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2224      	movs	r2, #36	; 0x24
 8005a50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	68da      	ldr	r2, [r3, #12]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f000 f905 	bl	8005c74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	691a      	ldr	r2, [r3, #16]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	695a      	ldr	r2, [r3, #20]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	68da      	ldr	r2, [r3, #12]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2220      	movs	r2, #32
 8005aa4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2220      	movs	r2, #32
 8005aac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005ab0:	2300      	movs	r3, #0
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3708      	adds	r7, #8
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}

08005aba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005aba:	b580      	push	{r7, lr}
 8005abc:	b08a      	sub	sp, #40	; 0x28
 8005abe:	af02      	add	r7, sp, #8
 8005ac0:	60f8      	str	r0, [r7, #12]
 8005ac2:	60b9      	str	r1, [r7, #8]
 8005ac4:	603b      	str	r3, [r7, #0]
 8005ac6:	4613      	mov	r3, r2
 8005ac8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005aca:	2300      	movs	r3, #0
 8005acc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	2b20      	cmp	r3, #32
 8005ad8:	d17c      	bne.n	8005bd4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d002      	beq.n	8005ae6 <HAL_UART_Transmit+0x2c>
 8005ae0:	88fb      	ldrh	r3, [r7, #6]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d101      	bne.n	8005aea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e075      	b.n	8005bd6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d101      	bne.n	8005af8 <HAL_UART_Transmit+0x3e>
 8005af4:	2302      	movs	r3, #2
 8005af6:	e06e      	b.n	8005bd6 <HAL_UART_Transmit+0x11c>
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2200      	movs	r2, #0
 8005b04:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2221      	movs	r2, #33	; 0x21
 8005b0a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005b0e:	f7fd fe55 	bl	80037bc <HAL_GetTick>
 8005b12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	88fa      	ldrh	r2, [r7, #6]
 8005b18:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	88fa      	ldrh	r2, [r7, #6]
 8005b1e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b28:	d108      	bne.n	8005b3c <HAL_UART_Transmit+0x82>
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	691b      	ldr	r3, [r3, #16]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d104      	bne.n	8005b3c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005b32:	2300      	movs	r3, #0
 8005b34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	61bb      	str	r3, [r7, #24]
 8005b3a:	e003      	b.n	8005b44 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b40:	2300      	movs	r3, #0
 8005b42:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2200      	movs	r2, #0
 8005b48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005b4c:	e02a      	b.n	8005ba4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	9300      	str	r3, [sp, #0]
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	2200      	movs	r2, #0
 8005b56:	2180      	movs	r1, #128	; 0x80
 8005b58:	68f8      	ldr	r0, [r7, #12]
 8005b5a:	f000 f840 	bl	8005bde <UART_WaitOnFlagUntilTimeout>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d001      	beq.n	8005b68 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005b64:	2303      	movs	r3, #3
 8005b66:	e036      	b.n	8005bd6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005b68:	69fb      	ldr	r3, [r7, #28]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d10b      	bne.n	8005b86 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b6e:	69bb      	ldr	r3, [r7, #24]
 8005b70:	881b      	ldrh	r3, [r3, #0]
 8005b72:	461a      	mov	r2, r3
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b7c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	3302      	adds	r3, #2
 8005b82:	61bb      	str	r3, [r7, #24]
 8005b84:	e007      	b.n	8005b96 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b86:	69fb      	ldr	r3, [r7, #28]
 8005b88:	781a      	ldrb	r2, [r3, #0]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	3301      	adds	r3, #1
 8005b94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	3b01      	subs	r3, #1
 8005b9e:	b29a      	uxth	r2, r3
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d1cf      	bne.n	8005b4e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	9300      	str	r3, [sp, #0]
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	2140      	movs	r1, #64	; 0x40
 8005bb8:	68f8      	ldr	r0, [r7, #12]
 8005bba:	f000 f810 	bl	8005bde <UART_WaitOnFlagUntilTimeout>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d001      	beq.n	8005bc8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005bc4:	2303      	movs	r3, #3
 8005bc6:	e006      	b.n	8005bd6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2220      	movs	r2, #32
 8005bcc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	e000      	b.n	8005bd6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005bd4:	2302      	movs	r3, #2
  }
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3720      	adds	r7, #32
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}

08005bde <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005bde:	b580      	push	{r7, lr}
 8005be0:	b084      	sub	sp, #16
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	60f8      	str	r0, [r7, #12]
 8005be6:	60b9      	str	r1, [r7, #8]
 8005be8:	603b      	str	r3, [r7, #0]
 8005bea:	4613      	mov	r3, r2
 8005bec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bee:	e02c      	b.n	8005c4a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bf0:	69bb      	ldr	r3, [r7, #24]
 8005bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bf6:	d028      	beq.n	8005c4a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005bf8:	69bb      	ldr	r3, [r7, #24]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d007      	beq.n	8005c0e <UART_WaitOnFlagUntilTimeout+0x30>
 8005bfe:	f7fd fddd 	bl	80037bc <HAL_GetTick>
 8005c02:	4602      	mov	r2, r0
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	1ad3      	subs	r3, r2, r3
 8005c08:	69ba      	ldr	r2, [r7, #24]
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d21d      	bcs.n	8005c4a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	68da      	ldr	r2, [r3, #12]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005c1c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	695a      	ldr	r2, [r3, #20]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f022 0201 	bic.w	r2, r2, #1
 8005c2c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2220      	movs	r2, #32
 8005c32:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2220      	movs	r2, #32
 8005c3a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2200      	movs	r2, #0
 8005c42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005c46:	2303      	movs	r3, #3
 8005c48:	e00f      	b.n	8005c6a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	4013      	ands	r3, r2
 8005c54:	68ba      	ldr	r2, [r7, #8]
 8005c56:	429a      	cmp	r2, r3
 8005c58:	bf0c      	ite	eq
 8005c5a:	2301      	moveq	r3, #1
 8005c5c:	2300      	movne	r3, #0
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	461a      	mov	r2, r3
 8005c62:	79fb      	ldrb	r3, [r7, #7]
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d0c3      	beq.n	8005bf0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005c68:	2300      	movs	r3, #0
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3710      	adds	r7, #16
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
	...

08005c74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	691b      	ldr	r3, [r3, #16]
 8005c82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	68da      	ldr	r2, [r3, #12]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	430a      	orrs	r2, r1
 8005c90:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	689a      	ldr	r2, [r3, #8]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	691b      	ldr	r3, [r3, #16]
 8005c9a:	431a      	orrs	r2, r3
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	695b      	ldr	r3, [r3, #20]
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	68db      	ldr	r3, [r3, #12]
 8005caa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005cae:	f023 030c 	bic.w	r3, r3, #12
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	6812      	ldr	r2, [r2, #0]
 8005cb6:	68b9      	ldr	r1, [r7, #8]
 8005cb8:	430b      	orrs	r3, r1
 8005cba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	695b      	ldr	r3, [r3, #20]
 8005cc2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	699a      	ldr	r2, [r3, #24]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	430a      	orrs	r2, r1
 8005cd0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a2c      	ldr	r2, [pc, #176]	; (8005d88 <UART_SetConfig+0x114>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d103      	bne.n	8005ce4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005cdc:	f7ff fdb8 	bl	8005850 <HAL_RCC_GetPCLK2Freq>
 8005ce0:	60f8      	str	r0, [r7, #12]
 8005ce2:	e002      	b.n	8005cea <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005ce4:	f7ff fda0 	bl	8005828 <HAL_RCC_GetPCLK1Freq>
 8005ce8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005cea:	68fa      	ldr	r2, [r7, #12]
 8005cec:	4613      	mov	r3, r2
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	4413      	add	r3, r2
 8005cf2:	009a      	lsls	r2, r3, #2
 8005cf4:	441a      	add	r2, r3
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	009b      	lsls	r3, r3, #2
 8005cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d00:	4a22      	ldr	r2, [pc, #136]	; (8005d8c <UART_SetConfig+0x118>)
 8005d02:	fba2 2303 	umull	r2, r3, r2, r3
 8005d06:	095b      	lsrs	r3, r3, #5
 8005d08:	0119      	lsls	r1, r3, #4
 8005d0a:	68fa      	ldr	r2, [r7, #12]
 8005d0c:	4613      	mov	r3, r2
 8005d0e:	009b      	lsls	r3, r3, #2
 8005d10:	4413      	add	r3, r2
 8005d12:	009a      	lsls	r2, r3, #2
 8005d14:	441a      	add	r2, r3
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	009b      	lsls	r3, r3, #2
 8005d1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d20:	4b1a      	ldr	r3, [pc, #104]	; (8005d8c <UART_SetConfig+0x118>)
 8005d22:	fba3 0302 	umull	r0, r3, r3, r2
 8005d26:	095b      	lsrs	r3, r3, #5
 8005d28:	2064      	movs	r0, #100	; 0x64
 8005d2a:	fb00 f303 	mul.w	r3, r0, r3
 8005d2e:	1ad3      	subs	r3, r2, r3
 8005d30:	011b      	lsls	r3, r3, #4
 8005d32:	3332      	adds	r3, #50	; 0x32
 8005d34:	4a15      	ldr	r2, [pc, #84]	; (8005d8c <UART_SetConfig+0x118>)
 8005d36:	fba2 2303 	umull	r2, r3, r2, r3
 8005d3a:	095b      	lsrs	r3, r3, #5
 8005d3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d40:	4419      	add	r1, r3
 8005d42:	68fa      	ldr	r2, [r7, #12]
 8005d44:	4613      	mov	r3, r2
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	4413      	add	r3, r2
 8005d4a:	009a      	lsls	r2, r3, #2
 8005d4c:	441a      	add	r2, r3
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	009b      	lsls	r3, r3, #2
 8005d54:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d58:	4b0c      	ldr	r3, [pc, #48]	; (8005d8c <UART_SetConfig+0x118>)
 8005d5a:	fba3 0302 	umull	r0, r3, r3, r2
 8005d5e:	095b      	lsrs	r3, r3, #5
 8005d60:	2064      	movs	r0, #100	; 0x64
 8005d62:	fb00 f303 	mul.w	r3, r0, r3
 8005d66:	1ad3      	subs	r3, r2, r3
 8005d68:	011b      	lsls	r3, r3, #4
 8005d6a:	3332      	adds	r3, #50	; 0x32
 8005d6c:	4a07      	ldr	r2, [pc, #28]	; (8005d8c <UART_SetConfig+0x118>)
 8005d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d72:	095b      	lsrs	r3, r3, #5
 8005d74:	f003 020f 	and.w	r2, r3, #15
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	440a      	add	r2, r1
 8005d7e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005d80:	bf00      	nop
 8005d82:	3710      	adds	r7, #16
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}
 8005d88:	40013800 	.word	0x40013800
 8005d8c:	51eb851f 	.word	0x51eb851f

08005d90 <__libc_init_array>:
 8005d90:	b570      	push	{r4, r5, r6, lr}
 8005d92:	2500      	movs	r5, #0
 8005d94:	4e0c      	ldr	r6, [pc, #48]	; (8005dc8 <__libc_init_array+0x38>)
 8005d96:	4c0d      	ldr	r4, [pc, #52]	; (8005dcc <__libc_init_array+0x3c>)
 8005d98:	1ba4      	subs	r4, r4, r6
 8005d9a:	10a4      	asrs	r4, r4, #2
 8005d9c:	42a5      	cmp	r5, r4
 8005d9e:	d109      	bne.n	8005db4 <__libc_init_array+0x24>
 8005da0:	f000 f822 	bl	8005de8 <_init>
 8005da4:	2500      	movs	r5, #0
 8005da6:	4e0a      	ldr	r6, [pc, #40]	; (8005dd0 <__libc_init_array+0x40>)
 8005da8:	4c0a      	ldr	r4, [pc, #40]	; (8005dd4 <__libc_init_array+0x44>)
 8005daa:	1ba4      	subs	r4, r4, r6
 8005dac:	10a4      	asrs	r4, r4, #2
 8005dae:	42a5      	cmp	r5, r4
 8005db0:	d105      	bne.n	8005dbe <__libc_init_array+0x2e>
 8005db2:	bd70      	pop	{r4, r5, r6, pc}
 8005db4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005db8:	4798      	blx	r3
 8005dba:	3501      	adds	r5, #1
 8005dbc:	e7ee      	b.n	8005d9c <__libc_init_array+0xc>
 8005dbe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005dc2:	4798      	blx	r3
 8005dc4:	3501      	adds	r5, #1
 8005dc6:	e7f2      	b.n	8005dae <__libc_init_array+0x1e>
 8005dc8:	08005fb0 	.word	0x08005fb0
 8005dcc:	08005fb0 	.word	0x08005fb0
 8005dd0:	08005fb0 	.word	0x08005fb0
 8005dd4:	08005fb4 	.word	0x08005fb4

08005dd8 <memset>:
 8005dd8:	4603      	mov	r3, r0
 8005dda:	4402      	add	r2, r0
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d100      	bne.n	8005de2 <memset+0xa>
 8005de0:	4770      	bx	lr
 8005de2:	f803 1b01 	strb.w	r1, [r3], #1
 8005de6:	e7f9      	b.n	8005ddc <memset+0x4>

08005de8 <_init>:
 8005de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dea:	bf00      	nop
 8005dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dee:	bc08      	pop	{r3}
 8005df0:	469e      	mov	lr, r3
 8005df2:	4770      	bx	lr

08005df4 <_fini>:
 8005df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005df6:	bf00      	nop
 8005df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dfa:	bc08      	pop	{r3}
 8005dfc:	469e      	mov	lr, r3
 8005dfe:	4770      	bx	lr
